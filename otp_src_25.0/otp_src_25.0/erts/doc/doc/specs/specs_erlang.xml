<module name="erlang">
<type>
  <name>any</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-any">any()</marker> = <seetype marker="erlang#any">any()</seetype></typehead></typedecl>
</type>
<type>
  <name>arity</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-arity">arity()</marker> = <seetype marker="erlang#arity">arity()</seetype></typehead></typedecl>
</type>
<type>
  <name>atom</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-atom">atom()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-binary">binary()</marker> = &lt;&lt;_:_*8&gt;&gt;</typehead></typedecl>
</type>
<type>
  <name>bitstring</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bitstring">bitstring()</marker> = &lt;&lt;_:_*1&gt;&gt;</typehead></typedecl>
</type>
<type>
  <name>bitstring_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bitstring_list">bitstring_list()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#maybe_improper_list">maybe_improper_list</seetype>(<seetype marker="erlang#byte">byte()</seetype> | <seetype marker="erlang#bitstring">bitstring()</seetype> | <seetype marker="#bitstring_list">bitstring_list()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#bitstring">bitstring()</seetype> | [])</typehead></typedecl>
</type>
<type>
  <name>bool</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bool">bool()</marker> = <seetype marker="erlang#boolean">boolean()</seetype></typehead></typedecl>
</type>
<type>
  <name>boolean</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-boolean">boolean()</marker> = true | false</typehead></typedecl>
</type>
<type>
  <name>byte</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-byte">byte()</marker> = 0..255</typehead></typedecl>
</type>
<type>
  <name>char</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-char">char()</marker> = 0..1114111</typehead></typedecl>
</type>
<type>
  <name>cpu_topology</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cpu_topology">cpu_topology()</marker> = [LevelEntry :: <seetype marker="#level_entry">level_entry()</seetype>] | undefined</typehead></typedecl>
  <anno>LevelEntry</anno>
</type>
<type>
  <name>deprecated_time_unit</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-deprecated_time_unit">deprecated_time_unit()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>seconds | milli_seconds | micro_seconds | nano_seconds</typehead></typedecl>
</type>
<type>
  <name>dist_handle</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dist_handle">dist_handle()</marker></typehead></typedecl>
</type>
<type>
  <name>ext_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ext_binary">ext_binary()</marker> = <seetype marker="erlang#binary">binary()</seetype></typehead></typedecl>
</type>
<type>
  <name>ext_iovec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ext_iovec">ext_iovec()</marker> = <seetype marker="#iovec">iovec()</seetype></typehead></typedecl>
</type>
<type>
  <name>float</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-float">float()</marker> = <seetype marker="erlang#float">float()</seetype></typehead></typedecl>
</type>
<type>
  <name>fun_info_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fun_info_item">fun_info_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>arity | env | index | name | module | new_index | new_uniq |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pid | type | uniq</typehead></typedecl>
</type>
<type>
  <name>function</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-function">function()</marker> = <seetype marker="erlang#function">function()</seetype></typehead></typedecl>
</type>
<type>
  <name>identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-identifier">identifier()</marker> = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#reference">reference()</seetype></typehead></typedecl>
</type>
<type>
  <name>info_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_list">info_list()</marker> = []</typehead></typedecl>
</type>
<type>
  <name>integer</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-integer">integer()</marker> = <seetype marker="erlang#integer">integer()</seetype></typehead></typedecl>
</type>
<type>
  <name>iodata</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-iodata">iodata()</marker> = <seetype marker="erlang#iolist">iolist()</seetype> | <seetype marker="erlang#binary">binary()</seetype></typehead></typedecl>
</type>
<type>
  <name>iolist</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-iolist">iolist()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#maybe_improper_list">maybe_improper_list</seetype>(<seetype marker="erlang#byte">byte()</seetype> | <seetype marker="erlang#binary">binary()</seetype> | <seetype marker="erlang#iolist">iolist()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#binary">binary()</seetype> | [])</typehead></typedecl>
</type>
<type>
  <name>iovec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-iovec">iovec()</marker> = [<seetype marker="erlang#binary">binary()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>level_entry</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-level_entry">level_entry()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{LevelTag :: <seetype marker="#level_tag">level_tag()</seetype>, SubLevel :: <seetype marker="#sub_level">sub_level()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{LevelTag :: <seetype marker="#level_tag">level_tag()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InfoList :: <seetype marker="#info_list">info_list()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SubLevel :: <seetype marker="#sub_level">sub_level()</seetype>}</typehead></typedecl>
  <anno>InfoList</anno>
  <anno>LevelTag</anno>
  <anno>SubLevel</anno>
</type>
<type>
  <name>level_tag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-level_tag">level_tag()</marker> = core | node | processor | thread</typehead></typedecl>
</type>
<type>
  <name>list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-list">list()</marker> = [<seetype marker="erlang#any">any()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>list</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-list">list(ContentType)</marker> = [ContentType]</typehead></typedecl>
  <anno>ContentType</anno>
</type>
<type>
  <name>map</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-map">map()</marker> = #{<seetype marker="erlang#any">any()</seetype> =&gt; <seetype marker="erlang#any">any()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>match_variable</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-match_variable">match_variable()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>max_heap_size</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-max_heap_size">max_heap_size()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{size =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>kill =&gt; <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error_logger =&gt; <seetype marker="erlang#boolean">boolean()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>maybe_improper_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-maybe_improper_list">maybe_improper_list()</marker> = <seetype marker="erlang#maybe_improper_list">maybe_improper_list</seetype>(<seetype marker="erlang#any">any()</seetype>, <seetype marker="erlang#any">any()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>maybe_improper_list</name>
  <n_vars>2</n_vars>
  <typedecl>
      <typehead><marker id="type-maybe_improper_list">maybe_improper_list(ContentType, TerminationType)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#maybe_improper_list">maybe_improper_list</seetype>(ContentType, TerminationType)</typehead></typedecl>
  <anno>ContentType</anno>
  <anno>TerminationType</anno>
</type>
<type>
  <name>memory_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-memory_type">memory_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>total | processes | processes_used | system | atom |<br/><nbsp/><nbsp/><nbsp/><nbsp/>atom_used | binary | code | ets</typehead></typedecl>
</type>
<type>
  <name>message_queue_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-message_queue_data">message_queue_data()</marker> = off_heap | on_heap</typehead></typedecl>
</type>
<type>
  <name>mfa</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mfa">mfa()</marker> = {<seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>module</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-module">module()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>module_info_key</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-module_info_key">module_info_key()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>attributes | compile | exports | functions | md5 | module |<br/><nbsp/><nbsp/><nbsp/><nbsp/>native | native_addresses | nifs</typehead></typedecl>
</type>
<type>
  <name>monitor_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-monitor_option">monitor_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{alias, explicit_unalias | demonitor | reply_demonitor} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tag, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>monitor_port_identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-monitor_port_identifier">monitor_port_identifier()</marker> = <seetype marker="erlang#port">port()</seetype> | <seetype marker="#registered_name">registered_name()</seetype></typehead></typedecl>
</type>
<type>
  <name>monitor_process_identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-monitor_process_identifier">monitor_process_identifier()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> | <seetype marker="#registered_process_identifier">registered_process_identifier()</seetype></typehead></typedecl>
</type>
<type>
  <name>neg_integer</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-neg_integer">neg_integer()</marker> = <seetype marker="erlang#neg_integer">integer() =&lt; -1</seetype></typehead></typedecl>
</type>
<type>
  <name>nif_resource</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nif_resource">nif_resource()</marker></typehead></typedecl>
</type>
<type>
  <name>nil</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nil">nil()</marker> = []</typehead></typedecl>
</type>
<type>
  <name>no_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-no_return">no_return()</marker> = <seetype marker="erlang#none">none()</seetype></typehead></typedecl>
</type>
<type>
  <name>node</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-node">node()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>non_neg_integer</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-non_neg_integer">non_neg_integer()</marker> = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></typehead></typedecl>
</type>
<type>
  <name>none</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-none">none()</marker> = <seetype marker="erlang#none">none()</seetype></typehead></typedecl>
</type>
<type>
  <name>nonempty_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_binary">nonempty_binary()</marker> = &lt;&lt;_:8, _:_*8&gt;&gt;</typehead></typedecl>
</type>
<type>
  <name>nonempty_bitstring</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_bitstring">nonempty_bitstring()</marker> = &lt;&lt;_:1, _:_*1&gt;&gt;</typehead></typedecl>
</type>
<type>
  <name>nonempty_improper_list</name>
  <n_vars>2</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_improper_list">nonempty_improper_list(ContentType, TerminationType)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#nonempty_improper_list">nonempty_improper_list</seetype>(ContentType, TerminationType)</typehead></typedecl>
  <anno>ContentType</anno>
  <anno>TerminationType</anno>
</type>
<type>
  <name>nonempty_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_list">nonempty_list()</marker> = [<seetype marker="erlang#any">any()</seetype>, ...]</typehead></typedecl>
</type>
<type>
  <name>nonempty_list</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_list">nonempty_list(ContentType)</marker> = [ContentType, ...]</typehead></typedecl>
  <anno>ContentType</anno>
</type>
<type>
  <name>nonempty_maybe_improper_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_maybe_improper_list">nonempty_maybe_improper_list()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#nonempty_maybe_improper_list">nonempty_maybe_improper_list</seetype>(<seetype marker="erlang#any">any()</seetype>, <seetype marker="erlang#any">any()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>nonempty_maybe_improper_list</name>
  <n_vars>2</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_maybe_improper_list">nonempty_maybe_improper_list(ContentType, TerminationType)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#nonempty_maybe_improper_list">nonempty_maybe_improper_list</seetype>(ContentType, TerminationType)</typehead></typedecl>
  <anno>ContentType</anno>
  <anno>TerminationType</anno>
</type>
<type>
  <name>nonempty_string</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nonempty_string">nonempty_string()</marker> = [<seetype marker="erlang#char">char()</seetype>, ...]</typehead></typedecl>
</type>
<type>
  <name>number</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-number">number()</marker> = <seetype marker="erlang#integer">integer()</seetype> | <seetype marker="erlang#float">float()</seetype></typehead></typedecl>
</type>
<type>
  <name>pid</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-pid">pid()</marker> = <seetype marker="erlang#pid">pid()</seetype></typehead></typedecl>
</type>
<type>
  <name>port</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-port">port()</marker> = <seetype marker="erlang#port">port()</seetype></typehead></typedecl>
</type>
<type>
  <name>pos_integer</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-pos_integer">pos_integer()</marker> = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></typehead></typedecl>
</type>
<type>
  <name>prepared_code</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-prepared_code">prepared_code()</marker></typehead></typedecl>
</type>
<type>
  <name>priority_level</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-priority_level">priority_level()</marker> = low | normal | high | max</typehead></typedecl>
</type>
<type>
  <name>process_info_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-process_info_item">process_info_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>backtrace | binary | catchlevel | current_function |<br/><nbsp/><nbsp/><nbsp/><nbsp/>current_location | current_stacktrace | dictionary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>error_handler | garbage_collection | garbage_collection_info |<br/><nbsp/><nbsp/><nbsp/><nbsp/>group_leader | heap_size | initial_call | links | last_calls |<br/><nbsp/><nbsp/><nbsp/><nbsp/>memory | message_queue_len | messages | min_heap_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>min_bin_vheap_size | monitored_by | monitors |<br/><nbsp/><nbsp/><nbsp/><nbsp/>message_queue_data | parent | priority | reductions |<br/><nbsp/><nbsp/><nbsp/><nbsp/>registered_name | sequential_trace_token | stack_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>status | suspending | total_heap_size | trace | trap_exit</typehead></typedecl>
</type>
<type>
  <name>process_info_result_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-process_info_result_item">process_info_result_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{backtrace, Bin :: <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{binary,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>BinInfo ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{catchlevel, CatchLevel :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_function,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: <seetype marker="erlang#module">module()</seetype>, Function :: <seetype marker="erlang#atom">atom()</seetype>, Arity :: <seetype marker="erlang#arity">arity()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_location,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: <seetype marker="erlang#module">module()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Function :: <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: <seetype marker="erlang#arity">arity()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Location ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{file, Filename :: <seetype marker="erlang#string">string()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{line, Line :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_stacktrace, Stack :: [<seetype marker="#stack_item">stack_item()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dictionary, Dictionary :: [{Key :: <seetype marker="erlang#term">term()</seetype>, Value :: <seetype marker="erlang#term">term()</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error_handler, Module :: <seetype marker="erlang#module">module()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{garbage_collection, GCInfo :: [{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{garbage_collection_info,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>GCInfo :: [{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{group_leader, GroupLeader :: <seetype marker="erlang#pid">pid()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{heap_size, Size :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{initial_call, <seetype marker="erlang#mfa">mfa()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{links, PidsAndPorts :: [<seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{last_calls, false | (Calls :: [<seetype marker="erlang#mfa">mfa()</seetype>])} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{memory, Size :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_len, MessageQueueLen :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{messages, MessageQueue :: [<seetype marker="erlang#term">term()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size, MinHeapSize :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size, MinBinVHeapSize :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size, MaxHeapSize :: <seetype marker="#max_heap_size">max_heap_size()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitored_by,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitoredBy :: [<seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | <seetype marker="#nif_resource">nif_resource()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitors,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Monitors ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{process | port,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pid ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#port">port()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{RegName :: <seetype marker="erlang#atom">atom()</seetype>, Node :: <seetype marker="erlang#node">node()</seetype>}}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_data, MQD :: <seetype marker="#message_queue_data">message_queue_data()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{parent, <seetype marker="erlang#pid">pid()</seetype> | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, Level :: <seetype marker="#priority_level">priority_level()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reductions, Number :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{registered_name, [] | (Atom :: <seetype marker="erlang#atom">atom()</seetype>)} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sequential_trace_token,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] | (SequentialTraceToken :: <seetype marker="erlang#term">term()</seetype>)} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stack_size, Size :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{status,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Status ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>exiting | garbage_collecting | waiting | running |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>runnable | suspended} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{suspending,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SuspendeeList ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Suspendee :: <seetype marker="erlang#pid">pid()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ActiveSuspendCount :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OutstandingSuspendCount :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{total_heap_size, Size :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{trace, InternalTraceFlags :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{trap_exit, Boolean :: <seetype marker="erlang#boolean">boolean()</seetype>}</typehead></typedecl>
  <anno>ActiveSuspendCount</anno>
  <anno>Arity</anno>
  <anno>Atom</anno>
  <anno>Bin</anno>
  <anno>BinInfo</anno>
  <anno>Boolean</anno>
  <anno>Calls</anno>
  <anno>CatchLevel</anno>
  <anno>Dictionary</anno>
  <anno>Filename</anno>
  <anno>Function</anno>
  <anno>GCInfo</anno>
  <anno>GroupLeader</anno>
  <anno>InternalTraceFlags</anno>
  <anno>Key</anno>
  <anno>Level</anno>
  <anno>Line</anno>
  <anno>Location</anno>
  <anno>MQD</anno>
  <anno>MaxHeapSize</anno>
  <anno>MessageQueue</anno>
  <anno>MessageQueueLen</anno>
  <anno>MinBinVHeapSize</anno>
  <anno>MinHeapSize</anno>
  <anno>Module</anno>
  <anno>MonitoredBy</anno>
  <anno>Monitors</anno>
  <anno>Node</anno>
  <anno>Number</anno>
  <anno>OutstandingSuspendCount</anno>
  <anno>Pid</anno>
  <anno>PidsAndPorts</anno>
  <anno>RegName</anno>
  <anno>SequentialTraceToken</anno>
  <anno>Size</anno>
  <anno>Stack</anno>
  <anno>Status</anno>
  <anno>Suspendee</anno>
  <anno>SuspendeeList</anno>
  <anno>Value</anno>
</type>
<type>
  <name>raise_stacktrace</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-raise_stacktrace">raise_stacktrace()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype> | [<seetype marker="erlang#term">term()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#function">function()</seetype>, <seetype marker="erlang#arity">arity()</seetype> | [<seetype marker="erlang#term">term()</seetype>]}]</typehead></typedecl>
</type>
<type>
  <name>reference</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reference">reference()</marker> = <seetype marker="erlang#reference">reference()</seetype></typehead></typedecl>
</type>
<type>
  <name>registered_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-registered_name">registered_name()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>registered_process_identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-registered_process_identifier">registered_process_identifier()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#registered_name">registered_name()</seetype> | {<seetype marker="#registered_name">registered_name()</seetype>, <seetype marker="erlang#node">node()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>scheduler_bind_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-scheduler_bind_type">scheduler_bind_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_processor_spread | no_node_thread_spread | no_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>processor_spread | spread | thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>thread_no_node_processor_spread | unbound</typehead></typedecl>
</type>
<type>
  <name>send_destination</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-send_destination">send_destination()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#reference">reference()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#port">port()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(RegName :: <seetype marker="erlang#atom">atom()</seetype>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{RegName :: <seetype marker="erlang#atom">atom()</seetype>, Node :: <seetype marker="erlang#node">node()</seetype>}</typehead></typedecl>
  <anno>Node</anno>
  <anno>RegName</anno>
</type>
<type>
  <name>seq_trace_info_returns</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-seq_trace_info_returns">seq_trace_info_returns()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{send | 'receive' | print | timestamp | monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{label, <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{serial, {<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>[]</typehead></typedecl>
</type>
<type>
  <name>spawn_opt_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-spawn_opt_option">spawn_opt_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>link | monitor |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitor, MonitorOpts :: [<seetype marker="#monitor_option">monitor_option()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, Level :: <seetype marker="#priority_level">priority_level()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fullsweep_after, Number :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size, Size :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size, VSize :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size, Size :: <seetype marker="#max_heap_size">max_heap_size()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_data, MQD :: <seetype marker="#message_queue_data">message_queue_data()</seetype>}</typehead></typedecl>
  <anno>Level</anno>
  <anno>MQD</anno>
  <anno>MonitorOpts</anno>
  <anno>Number</anno>
  <anno>Size</anno>
  <anno>VSize</anno>
</type>
<type>
  <name>stack_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stack_item">stack_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: <seetype marker="erlang#module">module()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Function :: <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: <seetype marker="erlang#arity">arity()</seetype> | (Args :: [<seetype marker="erlang#term">term()</seetype>]),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Location ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{file, Filename :: <seetype marker="erlang#string">string()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{line, Line :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}]}</typehead></typedecl>
  <anno>Args</anno>
  <anno>Arity</anno>
  <anno>Filename</anno>
  <anno>Function</anno>
  <anno>Line</anno>
  <anno>Location</anno>
  <anno>Module</anno>
</type>
<type>
  <name>stacktrace</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stacktrace">stacktrace()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#module">module()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#arity">arity()</seetype> | [<seetype marker="erlang#term">term()</seetype>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="#stacktrace_extrainfo">stacktrace_extrainfo()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#function">function()</seetype>, <seetype marker="erlang#arity">arity()</seetype> | [<seetype marker="erlang#term">term()</seetype>], [<seetype marker="#stacktrace_extrainfo">stacktrace_extrainfo()</seetype>]}]</typehead></typedecl>
</type>
<type>
  <name>stacktrace_extrainfo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stacktrace_extrainfo">stacktrace_extrainfo()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{line, <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file, <seetype marker="unicode#chardata">unicode:chardata()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error_info,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#{module =&gt; <seetype marker="erlang#module">module()</seetype>, function =&gt; <seetype marker="erlang#atom">atom()</seetype>, cause =&gt; <seetype marker="erlang#term">term()</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>string</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-string">string()</marker> = [<seetype marker="erlang#char">char()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>sub_level</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sub_level">sub_level()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[LevelEntry :: <seetype marker="#level_entry">level_entry()</seetype>] |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(LogicalCpuId :: {logical, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>})</typehead></typedecl>
  <anno>LevelEntry</anno>
  <anno>LogicalCpuId</anno>
</type>
<type>
  <name>system_monitor_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-system_monitor_option">system_monitor_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>busy_port | busy_dist_port |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{long_gc, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{long_schedule, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{large_heap, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</typehead></typedecl>
</type>
<type>
  <name>system_profile_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-system_profile_option">system_profile_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>exclusive | runnable_ports | runnable_procs | scheduler |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timestamp | monotonic_timestamp | strict_monotonic_timestamp</typehead></typedecl>
</type>
<type>
  <name>term</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-term">term()</marker> = <seetype marker="erlang#any">any()</seetype></typehead></typedecl>
</type>
<type>
  <name>time_unit</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-time_unit">time_unit()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>second | millisecond | microsecond | nanosecond | native |<br/><nbsp/><nbsp/><nbsp/><nbsp/>perf_counter |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#deprecated_time_unit">deprecated_time_unit()</seetype></typehead></typedecl>
</type>
<type>
  <name>timeout</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timeout">timeout()</marker> = infinity | <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></typehead></typedecl>
</type>
<type>
  <name>timestamp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timestamp">timestamp()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{MegaSecs :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Secs :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MicroSecs :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</typehead></typedecl>
  <anno>MegaSecs</anno>
  <anno>MicroSecs</anno>
  <anno>Secs</anno>
</type>
<type>
  <name>trace_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_flag">trace_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>all | send | 'receive' | procs | ports | call | arity |<br/><nbsp/><nbsp/><nbsp/><nbsp/>return_to | silent | running | exiting | running_procs |<br/><nbsp/><nbsp/><nbsp/><nbsp/>running_ports | garbage_collection | timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>cpu_timestamp | monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp | set_on_spawn |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_first_spawn | set_on_link | set_on_first_link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, <seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>trace_info_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_info_flag">trace_info_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>send | 'receive' | set_on_spawn | call | return_to | procs |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_first_spawn | set_on_link | running |<br/><nbsp/><nbsp/><nbsp/><nbsp/>garbage_collection | timestamp | monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp | arity</typehead></typedecl>
</type>
<type>
  <name>trace_info_item_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_info_item_result">trace_info_item_result()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{traced, global | local | false | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_spec, <seetype marker="#trace_match_spec">trace_match_spec()</seetype> | false | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | false | undefined | []} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, <seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta_match_spec, <seetype marker="#trace_match_spec">trace_match_spec()</seetype> | false | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{call_count, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | <seetype marker="erlang#boolean">boolean()</seetype> | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{call_time,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#pid">pid()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined}</typehead></typedecl>
</type>
<type>
  <name>trace_info_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_info_return">trace_info_return()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>undefined |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{flags, [<seetype marker="#trace_info_flag">trace_info_flag()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | []} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, <seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#trace_info_item_result">trace_info_item_result()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{all, [<seetype marker="#trace_info_item_result">trace_info_item_result()</seetype>] | false | undefined}</typehead></typedecl>
</type>
<type>
  <name>trace_match_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_match_spec">trace_match_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{[<seetype marker="erlang#term">term()</seetype>] | '_' | <seetype marker="#match_variable">match_variable()</seetype>, [<seetype marker="erlang#term">term()</seetype>], [<seetype marker="erlang#term">term()</seetype>]}]</typehead></typedecl>
</type>
<type>
  <name>trace_pattern_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_pattern_flag">trace_pattern_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>global | local | meta |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, Pid :: <seetype marker="erlang#pid">pid()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, TracerModule :: <seetype marker="erlang#module">module()</seetype>, TracerState :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call_count | call_time</typehead></typedecl>
  <anno>Pid</anno>
  <anno>TracerModule</anno>
  <anno>TracerState</anno>
</type>
<type>
  <name>trace_pattern_mfa</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_pattern_mfa">trace_pattern_mfa()</marker> = {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype> | '_'} | on_load</typehead></typedecl>
</type>
<type>
  <name>tuple</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-tuple">tuple()</marker> = <seetype marker="erlang#tuple">tuple()</seetype></typehead></typedecl>
</type>
<spec>
  <name>'!'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'!'(Dst :: <seetype marker="#send_destination">send_destination()</seetype>, Msg :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Dst</anno>
  <anno>Msg</anno>
</spec>
<spec>
  <name>'*'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'*'(A :: <seetype marker="erlang#number">number()</seetype>, B :: <seetype marker="erlang#number">number()</seetype>) -&gt; <seetype marker="erlang#number">number()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'+'</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:'+'(A :: <seetype marker="erlang#number">number()</seetype>) -&gt; <seetype marker="erlang#number">number()</seetype></head></clause>
  </contract>
  <anno>A</anno>
</spec>
<spec>
  <name>'+'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'+'(A :: <seetype marker="erlang#number">number()</seetype>, B :: <seetype marker="erlang#number">number()</seetype>) -&gt; <seetype marker="erlang#number">number()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'++'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'++'(A :: <seetype marker="erlang#list">list()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'-'</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:'-'(A :: <seetype marker="erlang#number">number()</seetype>) -&gt; <seetype marker="erlang#number">number()</seetype></head></clause>
  </contract>
  <anno>A</anno>
</spec>
<spec>
  <name>'-'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'-'(A :: <seetype marker="erlang#number">number()</seetype>, B :: <seetype marker="erlang#number">number()</seetype>) -&gt; <seetype marker="erlang#number">number()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'--'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'--'(A :: <seetype marker="erlang#list">list()</seetype>, B :: <seetype marker="erlang#list">list()</seetype>) -&gt; <seetype marker="erlang#list">list()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'/'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'/'(A :: <seetype marker="erlang#number">number()</seetype>, B :: <seetype marker="erlang#number">number()</seetype>) -&gt; <seetype marker="erlang#float">float()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'/='</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'/='(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'&lt;'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'&lt;'(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'=/='</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'=/='(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'=:='</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'=:='(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'=&lt;'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'=&lt;'(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'=='</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'=='(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'&gt;'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'&gt;'(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'&gt;='</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'&gt;='(A :: <seetype marker="erlang#term">term()</seetype>, B :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'and'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'and'(A :: <seetype marker="erlang#boolean">boolean()</seetype>, B :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'band'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'band'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'bnot'</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:'bnot'(A :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
</spec>
<spec>
  <name>'bor'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'bor'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'bsl'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'bsl'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'bsr'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'bsr'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'bxor'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'bxor'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'div'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'div'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'not'</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:'not'(A :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
</spec>
<spec>
  <name>'or'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'or'(A :: <seetype marker="erlang#boolean">boolean()</seetype>, B :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'rem'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'rem'(A :: <seetype marker="erlang#integer">integer()</seetype>, B :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>'xor'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:'xor'(A :: <seetype marker="erlang#boolean">boolean()</seetype>, B :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>abs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abs(Float) -&gt; <seetype marker="erlang#float">float()</seetype></head>
      <guard>
        <subtype><typename>Float</typename><string>Float = <seetype marker="erlang#float">float()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
</spec>
<spec>
  <name>abs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abs(Int) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Int</typename><string>Int = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Int</anno>
</spec>
<spec>
  <name>adler32</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:adler32(Data) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
</spec>
<spec>
  <name>adler32</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:adler32(OldAdler, Data) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>OldAdler</typename><string>OldAdler = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>OldAdler</anno>
</spec>
<spec>
  <name>adler32_combine</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:adler32_combine(FirstAdler, SecondAdler, SecondSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>FirstAdler</typename><string>FirstAdler = SecondAdler = SecondSize = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>SecondAdler</typename><string></string></subtype>
        <subtype><typename>SecondSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>FirstAdler</anno>
  <anno>SecondAdler</anno>
  <anno>SecondSize</anno>
</spec>
<spec>
  <name>alias</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>alias() -&gt; Alias</head>
      <guard>
        <subtype><typename>Alias</typename><string>Alias = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alias</anno>
</spec>
<spec>
  <name>alias</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>alias(Opts) -&gt; Alias</head>
      <guard>
        <subtype><typename>Alias</typename><string>Alias = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [explicit_unalias | reply]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alias</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>alloc_info</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>alloc_sizes</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>append</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:append(List, Tail) -&gt; <seetype marker="erlang#maybe_improper_list">maybe_improper_list()</seetype></head>
      <guard>
        <subtype><typename>List</typename><string>List = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Tail</typename><string>Tail = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>append_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:append_element(Tuple1, Term) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
        <subtype><typename>Tuple2</typename><string/></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
</spec>
<spec>
  <name>apply</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>apply(Fun, Args) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Fun</anno>
</spec>
<spec>
  <name>apply</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>apply(Module, Function, Args) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>atom_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_to_binary(Atom) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
</spec>
<spec>
  <name>atom_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>atom_to_binary(Atom, Encoding) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>atom_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_to_list(Atom) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
</spec>
<spec>
  <name>binary_part</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_part(Subject, PosLen) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>PosLen</typename><string>PosLen = {Start :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, Length :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>PosLen</anno>
  <anno>Start</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>binary_part</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>binary_part(Subject, Start, Length) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Start</typename><string>Start = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>Start</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>binary_to_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_atom(Binary) -&gt; <seetype marker="erlang#atom">atom()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_atom(Binary, Encoding) -&gt; <seetype marker="erlang#atom">atom()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>binary_to_existing_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_existing_atom(Binary) -&gt; <seetype marker="erlang#atom">atom()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_existing_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_existing_atom(Binary, Encoding) -&gt; <seetype marker="erlang#atom">atom()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>binary_to_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_float(Binary) -&gt; <seetype marker="erlang#float">float()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_integer(Binary) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_integer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_integer(Binary, Base) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_list(Binary) -&gt; [<seetype marker="erlang#byte">byte()</seetype>]</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>binary_to_list(Binary, Start, Stop) -&gt; [<seetype marker="erlang#byte">byte()</seetype>]</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Start</typename><string>Start = Stop = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Stop</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Start</anno>
  <anno>Stop</anno>
</spec>
<spec>
  <name>binary_to_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_term(Binary) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="#ext_binary">ext_binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_term</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_term(Binary, Opts) -&gt; <seetype marker="erlang#term">term()</seetype> | {<seetype marker="erlang#term">term()</seetype>, Used}</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="#ext_binary">ext_binary()</seetype></string></subtype>
        <subtype><typename>Opt</typename><string>Opt = safe | used</string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [Opt]</string></subtype>
        <subtype><typename>Used</typename><string>Used = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Opt</anno>
  <anno>Opts</anno>
  <anno>Used</anno>
</spec>
<spec>
  <name>bit_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bit_size(Bitstring) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Bitstring</typename><string>Bitstring = <seetype marker="erlang#bitstring">bitstring()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitstring</anno>
</spec>
<spec>
  <name>bitstring_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstring_to_list(Bitstring) -&gt; [<seetype marker="erlang#byte">byte()</seetype> | <seetype marker="erlang#bitstring">bitstring()</seetype>]</head>
      <guard>
        <subtype><typename>Bitstring</typename><string>Bitstring = <seetype marker="erlang#bitstring">bitstring()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitstring</anno>
</spec>
<spec>
  <name>bump_reductions</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:bump_reductions(Reductions) -&gt; true</head>
      <guard>
        <subtype><typename>Reductions</typename><string>Reductions = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reductions</anno>
</spec>
<spec>
  <name>byte_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>byte_size(Bitstring) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Bitstring</typename><string>Bitstring = <seetype marker="erlang#bitstring">bitstring()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitstring</anno>
</spec>
<spec>
  <name>call_on_load_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:call_on_load_function(P1) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>cancel_timer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:cancel_timer(TimerRef) -&gt; Result</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>cancel_timer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:cancel_timer(TimerRef, Options) -&gt; Result | ok</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>Async</typename><string>Async = Info = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Info</typename><string/></subtype>
        <subtype><typename>Option</typename><string>Option = {async, Async} | {info, Info}</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Async</anno>
  <anno>Info</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>ceil</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ceil(Number) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Number</typename><string>Number = <seetype marker="erlang#number">number()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>check_old_code</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>check_old_code(Module) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>check_process_code</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>check_process_code(Pid, Module) -&gt; CheckResult</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>CheckResult</typename><string>CheckResult = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>CheckResult</anno>
  <anno>Module</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>check_process_code</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>check_process_code(Pid, Module, OptionList) -&gt; CheckResult | async</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = {async, RequestId} | {allow_gc, <seetype marker="erlang#boolean">boolean()</seetype>}</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>CheckResult</typename><string>CheckResult = <seetype marker="erlang#boolean">boolean()</seetype> | aborted</string></subtype>
      </guard></clause>
  </contract>
  <anno>CheckResult</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Pid</anno>
  <anno>RequestId</anno>
</spec>
<spec>
  <name>convert_time_unit</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:convert_time_unit(Time, FromUnit, ToUnit) -&gt; ConvertedTime</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = ConvertedTime = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>ConvertedTime</typename><string/></subtype>
        <subtype><typename>FromUnit</typename><string>FromUnit = ToUnit = <seetype marker="#time_unit">time_unit()</seetype></string></subtype>
        <subtype><typename>ToUnit</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ConvertedTime</anno>
  <anno>FromUnit</anno>
  <anno>Time</anno>
  <anno>ToUnit</anno>
</spec>
<spec>
  <name>crc32</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:crc32(Data) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
</spec>
<spec>
  <name>crc32</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:crc32(OldCrc, Data) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>OldCrc</typename><string>OldCrc = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>OldCrc</anno>
</spec>
<spec>
  <name>crc32_combine</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:crc32_combine(FirstCrc, SecondCrc, SecondSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>FirstCrc</typename><string>FirstCrc = SecondCrc = SecondSize = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>SecondCrc</typename><string></string></subtype>
        <subtype><typename>SecondSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>FirstCrc</anno>
  <anno>SecondCrc</anno>
  <anno>SecondSize</anno>
</spec>
<spec>
  <name>date</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>date() -&gt; Date</head>
      <guard>
        <subtype><typename>Date</typename><string>Date = <seetype marker="calendar#date">calendar:date()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Date</anno>
</spec>
<spec>
  <name>decode_packet</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:decode_packet(Type, Bin, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Packet, Rest} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{more, Length} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <br/><nbsp/><nbsp/><nbsp/><nbsp/>raw | 0 | 1 | 2 | 4 | asn1 | cdr | sunrm | fcgi | tpkt |<br/><nbsp/><nbsp/><nbsp/><nbsp/>line | http | http_bin | httph | httph_bin</string></subtype>
        <subtype><typename>Bin</typename><string>Bin = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet_size, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{line_length, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
        <subtype><typename>Packet</typename><string>Packet = <seetype marker="erlang#binary">binary()</seetype> | HttpPacket</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | undefined</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>HttpPacket</typename><string>HttpPacket = <br/><nbsp/><nbsp/><nbsp/><nbsp/>HttpRequest | HttpResponse | HttpHeader | http_eoh | HttpError</string></subtype>
        <subtype><typename>HttpRequest</typename><string>HttpRequest = {http_request, HttpMethod, HttpUri, HttpVersion}</string></subtype>
        <subtype><typename>HttpResponse</typename><string>HttpResponse = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{http_response, HttpVersion, <seetype marker="erlang#integer">integer()</seetype>, HttpString}</string></subtype>
        <subtype><typename>HttpHeader</typename><string>HttpHeader = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{http_header,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>HttpField,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>UnmodifiedField :: HttpString,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: HttpString}</string></subtype>
        <subtype><typename>HttpError</typename><string>HttpError = {http_error, HttpString}</string></subtype>
        <subtype><typename>HttpMethod</typename><string>HttpMethod = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'TRACE' | HttpString</string></subtype>
        <subtype><typename>HttpUri</typename><string>HttpUri = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'*' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{absoluteURI,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>http | https,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Host :: HttpString,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Port :: <seetype marker="inet#port_number">inet:port_number()</seetype> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Path :: HttpString} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{scheme, Scheme :: HttpString, HttpString} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{abs_path, HttpString} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>HttpString</string></subtype>
        <subtype><typename>HttpVersion</typename><string>HttpVersion = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Major :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, Minor :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
        <subtype><typename>HttpField</typename><string>HttpField = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'Cache-Control' | 'Connection' | 'Date' | 'Pragma' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Transfer-Encoding' | 'Upgrade' | 'Via' | 'Accept' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept-Charset' | 'Accept-Encoding' | 'Accept-Language' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Authorization' | 'From' | 'Host' | 'If-Modified-Since' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-Match' | 'If-None-Match' | 'If-Range' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-Unmodified-Since' | 'Max-Forwards' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Proxy-Authorization' | 'Range' | 'Referer' | 'User-Agent' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Age' | 'Location' | 'Proxy-Authenticate' | 'Public' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Retry-After' | 'Server' | 'Vary' | 'Warning' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Www-Authenticate' | 'Allow' | 'Content-Base' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Encoding' | 'Content-Language' | 'Content-Length' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Location' | 'Content-Md5' | 'Content-Range' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Type' | 'Etag' | 'Expires' | 'Last-Modified' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept-Ranges' | 'Set-Cookie' | 'Set-Cookie2' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'X-Forwarded-For' | 'Cookie' | 'Keep-Alive' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Proxy-Connection' | HttpString</string></subtype>
        <subtype><typename>HttpString</typename><string>HttpString = <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Host</anno>
  <anno>HttpError</anno>
  <anno>HttpField</anno>
  <anno>HttpHeader</anno>
  <anno>HttpMethod</anno>
  <anno>HttpPacket</anno>
  <anno>HttpRequest</anno>
  <anno>HttpResponse</anno>
  <anno>HttpString</anno>
  <anno>HttpUri</anno>
  <anno>HttpVersion</anno>
  <anno>Length</anno>
  <anno>Major</anno>
  <anno>Minor</anno>
  <anno>Opt</anno>
  <anno>Options</anno>
  <anno>Packet</anno>
  <anno>Path</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
  <anno>Rest</anno>
  <anno>Scheme</anno>
  <anno>Type</anno>
  <anno>UnmodifiedField</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>delay_trap</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:delay_trap(Result, Timeout :: <seetype marker="erlang#timeout">timeout()</seetype>) -&gt; Result</head></clause>
  </contract>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>delete_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:delete_element(Index, Tuple1) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
        <subtype><typename>Tuple2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
</spec>
<spec>
  <name>delete_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete_module(Module) -&gt; true | undefined</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>demonitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>demonitor(MonitorRef) -&gt; true</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>MonitorRef</anno>
</spec>
<spec>
  <name>demonitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>demonitor(MonitorRef, OptionList) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = flush | info</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonitorRef</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
</spec>
<spec>
  <name>disconnect_node</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disconnect_node(Node) -&gt; <seetype marker="erlang#boolean">boolean()</seetype> | ignored</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>display</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:display(Term) -&gt; true</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>display_nl</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:display_nl() -&gt; true</head></clause>
  </contract>
</spec>
<spec>
  <name>display_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:display_string(P1) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>dist_ctrl_get_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dist_ctrl_get_data(DHandle) -&gt; {Size, Data} | Data | none</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="#iovec">iovec()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
  <anno>Data</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>dist_ctrl_get_data_notification</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dist_ctrl_get_data_notification(DHandle) -&gt; ok</head>
      <guard>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
</spec>
<spec>
  <name>dist_ctrl_get_opt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:dist_ctrl_get_opt(DHandle, Opt :: get_size) -&gt; Value</head>
      <guard>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
  <anno>Opt</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>dist_ctrl_input_handler</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:dist_ctrl_input_handler(DHandle, InputHandler) -&gt; ok</head>
      <guard>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
        <subtype><typename>InputHandler</typename><string>InputHandler = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
  <anno>InputHandler</anno>
</spec>
<spec>
  <name>dist_ctrl_put_data</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:dist_ctrl_put_data(DHandle, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
  <anno>Data</anno>
</spec>
<spec>
  <name>dist_ctrl_set_opt</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:dist_ctrl_set_opt(DHandle, Opt :: get_size, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldValue</head>
      <guard>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = OldValue = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>OldValue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
  <anno>OldValue</anno>
  <anno>Opt</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>dist_get_stat</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dist_get_stat(DHandle) -&gt; Res</head>
      <guard>
        <subtype><typename>DHandle</typename><string>DHandle = <seetype marker="#dist_handle">dist_handle()</seetype></string></subtype>
        <subtype><typename>InputPackets</typename><string>InputPackets = OutputPackets = PendingOutputPackets = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OutputPackets</typename><string/></subtype>
        <subtype><typename>PendingOutputPackets</typename><string/></subtype>
        <subtype><typename>Res</typename><string>Res = {ok, InputPackets, OutputPackets, PendingOutputPackets}</string></subtype>
      </guard></clause>
  </contract>
  <anno>DHandle</anno>
  <anno>InputPackets</anno>
  <anno>OutputPackets</anno>
  <anno>PendingOutputPackets</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>dmonitor_node</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>dt_append_vm_tag_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_append_vm_tag_data(IoData) -&gt; IoDataRet</head>
      <guard>
        <subtype><typename>IoData</typename><string>IoData = IoDataRet = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>IoDataRet</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoData</anno>
  <anno>IoDataRet</anno>
</spec>
<spec>
  <name>dt_get_tag</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:dt_get_tag() -&gt; <seetype marker="erlang#binary">binary()</seetype> | undefined</head></clause>
  </contract>
</spec>
<spec>
  <name>dt_get_tag_data</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:dt_get_tag_data() -&gt; <seetype marker="erlang#binary">binary()</seetype> | undefined</head></clause>
  </contract>
</spec>
<spec>
  <name>dt_prepend_vm_tag_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_prepend_vm_tag_data(IoData) -&gt; IoDataRet</head>
      <guard>
        <subtype><typename>IoData</typename><string>IoData = IoDataRet = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>IoDataRet</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoData</anno>
  <anno>IoDataRet</anno>
</spec>
<spec>
  <name>dt_put_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_put_tag(IoData) -&gt; <seetype marker="erlang#binary">binary()</seetype> | undefined</head>
      <guard>
        <subtype><typename>IoData</typename><string>IoData = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoData</anno>
</spec>
<spec>
  <name>dt_restore_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_restore_tag(TagData) -&gt; true</head>
      <guard>
        <subtype><typename>TagData</typename><string>TagData = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>TagData</anno>
</spec>
<spec>
  <name>dt_spread_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_spread_tag(Bool :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; TagData</head>
      <guard>
        <subtype><typename>TagData</typename><string>TagData = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bool</anno>
  <anno>TagData</anno>
</spec>
<spec>
  <name>element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>element(N, Tuple) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>N</typename><string>N = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Tuple</typename><string>Tuple = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>erase</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erase() -&gt; [{Key, Val}]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>erase</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erase(Key) -&gt; Val | undefined</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error(Reason) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>error</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>error(Reason, Args) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>] | none</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>error</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>error(Reason, Args, Options) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>] | none</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {error_info, ErrorInfoMap}</string></subtype>
        <subtype><typename>ErrorInfoMap</typename><string>ErrorInfoMap = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{cause =&gt; <seetype marker="erlang#term">term()</seetype>, module =&gt; <seetype marker="erlang#module">module()</seetype>, function =&gt; <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>ErrorInfoMap</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>exit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>exit(Reason) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>exit</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>exit(Pid, Reason) -&gt; true</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>exit_signal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:exit_signal(Pid, Reason) -&gt; true</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>external_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:external_size(Term) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>external_size</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:external_size(Term, Options) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [{minor_version, Version :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>Term</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>finish_after_on_load</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:finish_after_on_load(P1, P2) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>P2</typename><string>P2 = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>finish_loading</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:finish_loading(PreparedCodeList) -&gt; ok | Error</head>
      <guard>
        <subtype><typename>PreparedCodeList</typename><string>PreparedCodeList = [PreparedCode]</string></subtype>
        <subtype><typename>PreparedCode</typename><string>PreparedCode = <seetype marker="#prepared_code">prepared_code()</seetype></string></subtype>
        <subtype><typename>ModuleList</typename><string>ModuleList = [<seetype marker="erlang#module">module()</seetype>]</string></subtype>
        <subtype><typename>Error</typename><string>Error = {not_purged, ModuleList} | {on_load, ModuleList}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>ModuleList</anno>
  <anno>PreparedCode</anno>
  <anno>PreparedCodeList</anno>
</spec>
<spec>
  <name>float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float(Number) -&gt; <seetype marker="erlang#float">float()</seetype></head>
      <guard>
        <subtype><typename>Number</typename><string>Number = <seetype marker="erlang#number">number()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>float_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_to_binary(Float) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Float</typename><string>Float = <seetype marker="erlang#float">float()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
</spec>
<spec>
  <name>float_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>float_to_binary(Float, Options) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Float</typename><string>Float = <seetype marker="erlang#float">float()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{decimals, Decimals :: 0..253} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{scientific, Decimals :: 0..249} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compact | short</string></subtype>
      </guard></clause>
  </contract>
  <anno>Decimals</anno>
  <anno>Float</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>float_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_to_list(Float) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Float</typename><string>Float = <seetype marker="erlang#float">float()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
</spec>
<spec>
  <name>float_to_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>float_to_list(Float, Options) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Float</typename><string>Float = <seetype marker="erlang#float">float()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{decimals, Decimals :: 0..253} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{scientific, Decimals :: 0..249} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compact | short</string></subtype>
      </guard></clause>
  </contract>
  <anno>Decimals</anno>
  <anno>Float</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>floor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>floor(Number) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Number</typename><string>Number = <seetype marker="erlang#number">number()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>format_cpu_topology</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>fun_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:fun_info(Fun) -&gt; [{Item, Info}]</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <br/><nbsp/><nbsp/><nbsp/><nbsp/>arity | env | index | name | module | new_index | new_uniq |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pid | type | uniq</string></subtype>
        <subtype><typename>Info</typename><string>Info = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Info</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>fun_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:fun_info(Fun, Item) -&gt; {Item, Info}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="#fun_info_item">fun_info_item()</seetype></string></subtype>
        <subtype><typename>Info</typename><string>Info = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Info</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>fun_info_mfa</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:fun_info_mfa(Fun) -&gt; {Mod, Name, Arity}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Mod</typename><string>Mod = Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Name</typename><string/></subtype>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Fun</anno>
  <anno>Mod</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>fun_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:fun_to_list(Fun) -&gt; String :: <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>function_exported</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:function_exported(Module, Function, Arity) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>garbage_collect</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>garbage_collect() -&gt; true</head></clause>
  </contract>
</spec>
<spec>
  <name>garbage_collect</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>garbage_collect(Pid) -&gt; GCResult</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>GCResult</typename><string>GCResult = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>GCResult</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>garbage_collect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>garbage_collect(Pid, OptionList) -&gt; GCResult | async</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = {async, RequestId} | {type, major | minor}</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>GCResult</typename><string>GCResult = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>GCResult</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Pid</anno>
  <anno>RequestId</anno>
</spec>
<spec>
  <name>garbage_collect_message_area</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:garbage_collect_message_area() -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>gather_gc_info_result</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:gather_gc_info_result(Ref) -&gt; {<seetype marker="erlang#number">number()</seetype>, <seetype marker="erlang#number">number()</seetype>, 0}</head>
      <guard>
        <subtype><typename>Ref</typename><string>Ref = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
</spec>
<spec>
  <name>get</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get() -&gt; [{Key, Val}]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get(Key) -&gt; Val | undefined</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_cookie</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:get_cookie() -&gt; Cookie | nocookie</head>
      <guard>
        <subtype><typename>Cookie</typename><string>Cookie = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
</spec>
<spec>
  <name>get_cookie</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:get_cookie(Node) -&gt; Cookie | nocookie</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Cookie</typename><string>Cookie = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>get_keys</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_keys() -&gt; [Key]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
</spec>
<spec>
  <name>get_keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_keys(Val) -&gt; [Key]</head>
      <guard>
        <subtype><typename>Val</typename><string>Val = Key = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Key</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_module_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:get_module_info(Module) -&gt; [{Item, <seetype marker="erlang#term">term()</seetype>}]</head>
      <guard>
        <subtype><typename>Item</typename><string>Item = module | exports | attributes | compile | native | md5</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>get_module_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:get_module_info(Module, Item) -&gt; ModuleInfo</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="#module_info_key">module_info_key()</seetype></string></subtype>
        <subtype><typename>ModuleInfo</typename><string>ModuleInfo = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Module</anno>
  <anno>ModuleInfo</anno>
</spec>
<spec>
  <name>group_leader</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>group_leader() -&gt; <seetype marker="erlang#pid">pid()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>group_leader</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>group_leader(GroupLeader, Pid) -&gt; true</head>
      <guard>
        <subtype><typename>GroupLeader</typename><string>GroupLeader = Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Pid</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>GroupLeader</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>halt</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>halt() -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>halt</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>halt(Status) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Status</typename><string>Status = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | abort | <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Status</anno>
</spec>
<spec>
  <name>halt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>halt(Status, Options) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Status</typename><string>Status = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | abort | <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {flush, <seetype marker="erlang#boolean">boolean()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Status</anno>
</spec>
<spec>
  <name>has_prepared_code_on_load</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:has_prepared_code_on_load(PreparedCode) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>PreparedCode</typename><string>PreparedCode = <seetype marker="#prepared_code">prepared_code()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>PreparedCode</anno>
</spec>
<spec>
  <name>hd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>hd(List) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>List</typename><string>List = [<seetype marker="erlang#term">term()</seetype>, ...]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>hibernate</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:hibernate(Module, Function, Args) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>insert_element</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
        <subtype><typename>Tuple2</typename><string/></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Term</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
</spec>
<spec>
  <name>integer_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_to_binary(Integer) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Integer</anno>
</spec>
<spec>
  <name>integer_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>integer_to_binary(Integer, Base) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>Integer</anno>
</spec>
<spec>
  <name>integer_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_to_list(Integer) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Integer</anno>
</spec>
<spec>
  <name>integer_to_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>integer_to_list(Integer, Base) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>Integer</anno>
</spec>
<spec>
  <name>iolist_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>iolist_size(Item) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Item</typename><string>Item = <seetype marker="erlang#iolist">iolist()</seetype> | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>iolist_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>iolist_to_binary(IoListOrBinary) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>IoListOrBinary</typename><string>IoListOrBinary = <seetype marker="erlang#iolist">iolist()</seetype> | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoListOrBinary</anno>
</spec>
<spec>
  <name>iolist_to_iovec</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:iolist_to_iovec(IoListOrBinary) -&gt; <seetype marker="#iovec">iovec()</seetype></head>
      <guard>
        <subtype><typename>IoListOrBinary</typename><string>IoListOrBinary = <seetype marker="erlang#iolist">iolist()</seetype> | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoListOrBinary</anno>
</spec>
<spec>
  <name>is_alive</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>is_alive() -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>is_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_atom(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_binary(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_bitstring</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_bitstring(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_boolean</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_boolean(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_builtin</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:is_builtin(Module, Function, Arity) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>is_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_float(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_function(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_function(Term, Arity) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_integer(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_list(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_map</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_map(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_map_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_map_key(Key, Map) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Key</typename><string>Key = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Map</typename><string>Map = <seetype marker="erlang#map">map()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map</anno>
</spec>
<spec>
  <name>is_number</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_number(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_pid</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_pid(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_port</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_port(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_process_alive</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_process_alive(Pid) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>is_record</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_record(Term, RecordTag) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>RecordTag</typename><string>RecordTag = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RecordTag</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_record</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>is_record(Term, RecordTag, Size) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>RecordTag</typename><string>RecordTag = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Size</typename><string>Size = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RecordTag</anno>
  <anno>Size</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_reference</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_reference(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_tuple(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>length</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>length(List) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>List</typename><string>List = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>link(PidOrPort) -&gt; true</head>
      <guard>
        <subtype><typename>PidOrPort</typename><string>PidOrPort = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>PidOrPort</anno>
</spec>
<spec>
  <name>list_to_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_atom(String) -&gt; <seetype marker="erlang#atom">atom()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_binary(IoList) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>IoList</typename><string>IoList = <seetype marker="erlang#iolist">iolist()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoList</anno>
</spec>
<spec>
  <name>list_to_bitstring</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_bitstring(BitstringList) -&gt; <seetype marker="erlang#bitstring">bitstring()</seetype></head>
      <guard>
        <subtype><typename>BitstringList</typename><string>BitstringList = <seetype marker="#bitstring_list">bitstring_list()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BitstringList</anno>
</spec>
<spec>
  <name>list_to_existing_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_existing_atom(String) -&gt; <seetype marker="erlang#atom">atom()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_float(String) -&gt; <seetype marker="erlang#float">float()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_integer(String) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_integer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>list_to_integer(String, Base) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_pid</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_pid(String) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_port</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_port(String) -&gt; <seetype marker="erlang#port">port()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_ref</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_ref(String) -&gt; <seetype marker="erlang#reference">reference()</seetype></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_tuple(List) -&gt; <seetype marker="erlang#tuple">tuple()</seetype></head>
      <guard>
        <subtype><typename>List</typename><string>List = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>load_module</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load_module(Module, Binary) -&gt; {module, Module} | {error, Reason}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>badfile | not_purged | on_load |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{features_not_allowed, [<seetype marker="erlang#atom">atom()</seetype>]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>load_nif</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:load_nif(Path, LoadInfo) -&gt; ok | Error</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>LoadInfo</typename><string>LoadInfo = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Error</typename><string>Error = {error, {Reason, Text :: <seetype marker="erlang#string">string()</seetype>}}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>load_failed | bad_lib | load | reload | upgrade | old_code</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>LoadInfo</anno>
  <anno>Path</anno>
  <anno>Reason</anno>
  <anno>Text</anno>
</spec>
<spec>
  <name>loaded</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:loaded() -&gt; [Module]</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>localtime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:localtime() -&gt; DateTime</head>
      <guard>
        <subtype><typename>DateTime</typename><string>DateTime = <seetype marker="calendar#datetime">calendar:datetime()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DateTime</anno>
</spec>
<spec>
  <name>localtime_to_universaltime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:localtime_to_universaltime(Localtime) -&gt; Universaltime</head>
      <guard>
        <subtype><typename>Localtime</typename><string>Localtime = Universaltime = <seetype marker="calendar#datetime">calendar:datetime()</seetype></string></subtype>
        <subtype><typename>Universaltime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Localtime</anno>
  <anno>Universaltime</anno>
</spec>
<spec>
  <name>localtime_to_universaltime</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:localtime_to_universaltime(Localtime, IsDst) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Universaltime</head>
      <guard>
        <subtype><typename>Localtime</typename><string>Localtime = Universaltime = <seetype marker="calendar#datetime">calendar:datetime()</seetype></string></subtype>
        <subtype><typename>Universaltime</typename><string/></subtype>
        <subtype><typename>IsDst</typename><string>IsDst = true | false | undefined</string></subtype>
      </guard></clause>
  </contract>
  <anno>IsDst</anno>
  <anno>Localtime</anno>
  <anno>Universaltime</anno>
</spec>
<spec>
  <name>make_fun</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:make_fun(Module, Function, Arity) -&gt; <seetype marker="erlang#function">function()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>make_ref</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>make_ref() -&gt; <seetype marker="erlang#reference">reference()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>make_tuple</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:make_tuple(Arity, InitialValue) -&gt; <seetype marker="erlang#tuple">tuple()</seetype></head>
      <guard>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
        <subtype><typename>InitialValue</typename><string>InitialValue = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>InitialValue</anno>
</spec>
<spec>
  <name>make_tuple</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:make_tuple(Arity, DefaultValue, InitList) -&gt; <seetype marker="erlang#tuple">tuple()</seetype></head>
      <guard>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
        <subtype><typename>DefaultValue</typename><string>DefaultValue = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>InitList</typename><string>InitList = [{Position :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>, <seetype marker="erlang#term">term()</seetype>}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>DefaultValue</anno>
  <anno>InitList</anno>
  <anno>Position</anno>
</spec>
<spec>
  <name>map_get</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_get(Key, Map) -&gt; Value</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seetype marker="erlang#map">map()</seetype></string></subtype>
        <subtype><typename>Key</typename><string>Key = Value = <seetype marker="erlang#any">any()</seetype></string></subtype>
        <subtype><typename>Value</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>map_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_size(Map) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seetype marker="erlang#map">map()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
</spec>
<spec>
  <name>match_spec_test</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:match_spec_test(MatchAgainst, MatchSpec, Type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TestResult</head>
      <guard>
        <subtype><typename>MatchAgainst</typename><string>MatchAgainst = [<seetype marker="erlang#term">term()</seetype>] | <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = table | trace</string></subtype>
        <subtype><typename>TestResult</typename><string>TestResult = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="erlang#term">term()</seetype>, [return_trace], [{error | warning, <seetype marker="erlang#string">string()</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, [{error | warning, <seetype marker="erlang#string">string()</seetype>}]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>MatchAgainst</anno>
  <anno>MatchSpec</anno>
  <anno>TestResult</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>max</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>max(Term1, Term2) -&gt; Maximum</head>
      <guard>
        <subtype><typename>Term1</typename><string>Term1 = Term2 = Maximum = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Term2</typename><string></string></subtype>
        <subtype><typename>Maximum</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Maximum</anno>
  <anno>Term1</anno>
  <anno>Term2</anno>
</spec>
<spec>
  <name>md5</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:md5(Data) -&gt; Digest</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Digest</typename><string>Digest = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Digest</anno>
</spec>
<spec>
  <name>md5_final</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:md5_final(Context) -&gt; Digest</head>
      <guard>
        <subtype><typename>Context</typename><string>Context = Digest = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Digest</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Context</anno>
  <anno>Digest</anno>
</spec>
<spec>
  <name>md5_init</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:md5_init() -&gt; Context</head>
      <guard>
        <subtype><typename>Context</typename><string>Context = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Context</anno>
</spec>
<spec>
  <name>md5_update</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:md5_update(Context, Data) -&gt; NewContext</head>
      <guard>
        <subtype><typename>Context</typename><string>Context = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>NewContext</typename><string>NewContext = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Context</anno>
  <anno>Data</anno>
  <anno>NewContext</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:memory() -&gt; [{Type, Size}]</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#memory_type">memory_type()</seetype></string></subtype>
        <subtype><typename>Size</typename><string>Size = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:memory(Type :: <seetype marker="#memory_type">memory_type()</seetype>) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:memory(TypeList :: [<seetype marker="#memory_type">memory_type()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="#memory_type">memory_type()</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}]</head></clause>
  </contract>
  <anno>TypeList</anno>
</spec>
<spec>
  <name>min</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>min(Term1, Term2) -&gt; Minimum</head>
      <guard>
        <subtype><typename>Term1</typename><string>Term1 = Term2 = Minimum = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Term2</typename><string></string></subtype>
        <subtype><typename>Minimum</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Minimum</anno>
  <anno>Term1</anno>
  <anno>Term2</anno>
</spec>
<spec>
  <name>module_loaded</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_loaded(Module) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Type :: process, Item :: <seetype marker="#monitor_process_identifier">monitor_process_identifier()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Type :: port, Item :: <seetype marker="#monitor_port_identifier">monitor_port_identifier()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Type :: time_offset, Item :: clock_service) -&gt; MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>monitor(Type :: process,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Item :: <seetype marker="#monitor_process_identifier">monitor_process_identifier()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seetype marker="#monitor_option">monitor_option()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Opts</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>monitor(Type :: port,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Item :: <seetype marker="#monitor_port_identifier">monitor_port_identifier()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seetype marker="#monitor_option">monitor_option()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Opts</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>monitor(Type :: time_offset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Item :: clock_service,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seetype marker="#monitor_option">monitor_option()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Opts</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor_node</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor_node(Node, Flag) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>monitor_node</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:monitor_node(Node, Flag, Options) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = allow_passive_connect</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Node</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>monotonic_time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:monotonic_time() -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>monotonic_time</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:monotonic_time(Unit) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seetype marker="#time_unit">time_unit()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>nif_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:nif_error(Reason) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>nif_error</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:nif_error(Reason, Args) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>node</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>node() -&gt; Node</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>node</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>node(Arg) -&gt; Node</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>nodes</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nodes() -&gt; Nodes</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>nodes</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nodes(Arg) -&gt; Nodes</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = NodeType | [NodeType]</string></subtype>
        <subtype><typename>NodeType</typename><string>NodeType = visible | hidden | connected | this | known</string></subtype>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>NodeType</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>now</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>now() -&gt; Timestamp</head>
      <guard>
        <subtype><typename>Timestamp</typename><string>Timestamp = <seetype marker="#timestamp">timestamp()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Timestamp</anno>
</spec>
<spec>
  <name>open_port</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>open_port(PortName, PortSettings) -&gt; <seetype marker="erlang#port">port()</seetype></head>
      <guard>
        <subtype><typename>PortName</typename><string>PortName = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn, Command :: <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn_driver, Command :: <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn_executable, FileName :: <seetype marker="file#name_all">file:name_all()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fd, In :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, Out :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
        <subtype><typename>PortSettings</typename><string>PortSettings = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet, N :: 1 | 2 | 4} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>stream |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{line, L :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{cd, Dir :: <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{env,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Env ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Name :: <seetype marker="os#env_var_name">os:env_var_name()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Val :: <seetype marker="os#env_var_value">os:env_var_value()</seetype> | false}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{args, [<seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{arg0, <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exit_status | use_stdio | nouse_stdio | stderr_to_stdout |<br/><nbsp/><nbsp/><nbsp/><nbsp/>in | out | binary | eof |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{parallelism, Boolean :: <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>hide |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{busy_limits_port,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} | disabled} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{busy_limits_msgq,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} | disabled}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Command</anno>
  <anno>Dir</anno>
  <anno>Env</anno>
  <anno>FileName</anno>
  <anno>In</anno>
  <anno>L</anno>
  <anno>N</anno>
  <anno>Name</anno>
  <anno>Opt</anno>
  <anno>Out</anno>
  <anno>PortName</anno>
  <anno>PortSettings</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>phash</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:phash(Term, Range) -&gt; Hash</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Range</typename><string>Range = Hash = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Hash</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hash</anno>
  <anno>Range</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>phash2</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:phash2(Term) -&gt; Hash</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Hash</typename><string>Hash = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hash</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>phash2</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:phash2(Term, Range) -&gt; Hash</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Range</typename><string>Range = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Hash</typename><string>Hash = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hash</anno>
  <anno>Range</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>pid_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pid_to_list(Pid) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>port_call</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_call(Port, Data) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:port_call(Port, Operation, Data) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Operation</typename><string>Operation = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Operation</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>port_close(Port) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_command</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>port_command(Port, Data) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_command</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>port_command(Port, Data, OptionList) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = force | nosuspend</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_connect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>port_connect(Port, Pid) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_control</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>port_control(Port, Operation, Data) -&gt; <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Operation</typename><string>Operation = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Operation</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_get_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:port_get_data(Port) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port) -&gt; Result</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>ResultItem</typename><string>ResultItem = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{registered_name, RegisteredName :: <seetype marker="erlang#atom">atom()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{id, Index :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{connected, Pid :: <seetype marker="erlang#pid">pid()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{links, Pids :: [<seetype marker="erlang#pid">pid()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{name, String :: <seetype marker="erlang#string">string()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{input, Bytes :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{output, Bytes :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{os_pid, OsPid :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | undefined}</string></subtype>
        <subtype><typename>Result</typename><string>Result = [ResultItem] | undefined</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Index</anno>
  <anno>OsPid</anno>
  <anno>Pid</anno>
  <anno>Pids</anno>
  <anno>Port</anno>
  <anno>RegisteredName</anno>
  <anno>Result</anno>
  <anno>ResultItem</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: connected) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{connected, Pid} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pid</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: id) -&gt; {id, Index} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Index</typename><string>Index = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: input) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{input, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: links) -&gt; {links, Pids} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Pids</typename><string>Pids = [<seetype marker="erlang#pid">pid()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pids</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: locking) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{locking, Locking} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Locking</typename><string>Locking = false | port_level | driver_level</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Locking</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: memory) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{memory, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: monitors) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{monitors, Monitors} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Monitors</typename><string>Monitors = [{process, <seetype marker="erlang#pid">pid()</seetype>}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Monitors</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: monitored_by) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{monitored_by, MonitoredBy} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>MonitoredBy</typename><string>MonitoredBy = [<seetype marker="erlang#pid">pid()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitoredBy</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: name) -&gt; {name, Name} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Name</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: os_pid) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{os_pid, OsPid} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>OsPid</typename><string>OsPid = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | undefined</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>OsPid</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: output) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{output, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: parallelism) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{parallelism, Boolean} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Boolean</typename><string>Boolean = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: queue_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{queue_size, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: registered_name) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{registered_name, RegisteredName} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>RegisteredName</typename><string>RegisteredName = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Port</anno>
  <anno>RegisteredName</anno>
</spec>
<spec>
  <name>port_set_data</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_set_data(Port, Data) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>port_to_list(Port) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#port">port()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>ports</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:ports() -&gt; [<seetype marker="erlang#port">port()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>posixtime_to_universaltime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:posixtime_to_universaltime(P1) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="calendar#date">calendar:date()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="calendar#time">calendar:time()</seetype>}</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>pre_loaded</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pre_loaded() -&gt; [<seetype marker="erlang#module">module()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>prepare_loading</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:prepare_loading(Module, Code) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>PreparedCode | {error, Reason}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Code</typename><string>Code = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>PreparedCode</typename><string>PreparedCode = <seetype marker="#prepared_code">prepared_code()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = badfile</string></subtype>
      </guard></clause>
  </contract>
  <anno>Code</anno>
  <anno>Module</anno>
  <anno>PreparedCode</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>process_display</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:process_display(Pid, Type) -&gt; true</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = backtrace</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: trap_exit, Boolean) -&gt; OldBoolean</head>
      <guard>
        <subtype><typename>Boolean</typename><string>Boolean = OldBoolean = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>OldBoolean</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Flag</anno>
  <anno>OldBoolean</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: error_handler, Module) -&gt; OldModule</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = OldModule = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>OldModule</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Module</anno>
  <anno>OldModule</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: fullsweep_after, FullsweepAfter) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldFullsweepAfter</head>
      <guard>
        <subtype><typename>FullsweepAfter</typename><string>FullsweepAfter = OldFullsweepAfter = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldFullsweepAfter</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>FullsweepAfter</anno>
  <anno>OldFullsweepAfter</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: min_heap_size, MinHeapSize) -&gt; OldMinHeapSize</head>
      <guard>
        <subtype><typename>MinHeapSize</typename><string>MinHeapSize = OldMinHeapSize = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldMinHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinHeapSize</anno>
  <anno>OldMinHeapSize</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMinBinVHeapSize</head>
      <guard>
        <subtype><typename>MinBinVHeapSize</typename><string>MinBinVHeapSize = OldMinBinVHeapSize = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldMinBinVHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinBinVHeapSize</anno>
  <anno>OldMinBinVHeapSize</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: max_heap_size, MaxHeapSize) -&gt; OldMaxHeapSize</head>
      <guard>
        <subtype><typename>MaxHeapSize</typename><string>MaxHeapSize = OldMaxHeapSize = <seetype marker="#max_heap_size">max_heap_size()</seetype></string></subtype>
        <subtype><typename>OldMaxHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MaxHeapSize</anno>
  <anno>OldMaxHeapSize</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: message_queue_data, MQD) -&gt; OldMQD</head>
      <guard>
        <subtype><typename>MQD</typename><string>MQD = OldMQD = <seetype marker="#message_queue_data">message_queue_data()</seetype></string></subtype>
        <subtype><typename>OldMQD</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MQD</anno>
  <anno>OldMQD</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: priority, Level) -&gt; OldLevel</head>
      <guard>
        <subtype><typename>Level</typename><string>Level = OldLevel = <seetype marker="#priority_level">priority_level()</seetype></string></subtype>
        <subtype><typename>OldLevel</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Level</anno>
  <anno>OldLevel</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: save_calls, N) -&gt; OldN</head>
      <guard>
        <subtype><typename>N</typename><string>N = OldN = 0..10000</string></subtype>
        <subtype><typename>OldN</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>N</anno>
  <anno>OldN</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: sensitive, Boolean) -&gt; OldBoolean</head>
      <guard>
        <subtype><typename>Boolean</typename><string>Boolean = OldBoolean = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>OldBoolean</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Flag</anno>
  <anno>OldBoolean</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: {monitor_nodes, <seetype marker="erlang#term">term()</seetype>}, Value :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: monitor_nodes, Value :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>process_flag(Pid, Flag, Value) -&gt; OldValue</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = save_calls</string></subtype>
        <subtype><typename>Value</typename><string>Value = OldValue = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldValue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldValue</anno>
  <anno>Pid</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>process_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>process_info(Pid) -&gt; Info</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Info</typename><string>Info = [InfoTuple] | undefined</string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <seetype marker="#process_info_result_item">process_info_result_item()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Info</anno>
  <anno>InfoTuple</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>process_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_info(Pid, Item) -&gt; InfoTuple | [] | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="#process_info_item">process_info_item()</seetype></string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <seetype marker="#process_info_result_item">process_info_result_item()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoTuple</anno>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>process_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_info(Pid, ItemList) -&gt; InfoTupleList | [] | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>ItemList</typename><string>ItemList = [Item]</string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="#process_info_item">process_info_item()</seetype></string></subtype>
        <subtype><typename>InfoTupleList</typename><string>InfoTupleList = [InfoTuple]</string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <seetype marker="#process_info_result_item">process_info_result_item()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoTuple</anno>
  <anno>InfoTupleList</anno>
  <anno>Item</anno>
  <anno>ItemList</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>processes</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>processes() -&gt; [<seetype marker="erlang#pid">pid()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>purge_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>purge_module(Module) -&gt; true</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>put</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>put(Key, Val) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>raise</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:raise(Class, Reason, Stacktrace) -&gt; badarg</head>
      <guard>
        <subtype><typename>Class</typename><string>Class = error | exit | throw</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Stacktrace</typename><string>Stacktrace = <seetype marker="#raise_stacktrace">raise_stacktrace()</seetype> | <seetype marker="#stacktrace">stacktrace()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Class</anno>
  <anno>Reason</anno>
  <anno>Stacktrace</anno>
</spec>
<spec>
  <name>read_timer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:read_timer(TimerRef) -&gt; Result</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>read_timer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:read_timer(TimerRef, Options) -&gt; Result | ok</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>Async</typename><string>Async = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = {async, Async}</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Async</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>ref_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ref_to_list(Ref) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>Ref</typename><string>Ref = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
</spec>
<spec>
  <name>register</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>register(RegName, PidOrPort) -&gt; true</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>PidOrPort</typename><string>PidOrPort = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>PidOrPort</anno>
  <anno>RegName</anno>
</spec>
<spec>
  <name>registered</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>registered() -&gt; [RegName]</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RegName</anno>
</spec>
<spec>
  <name>resume_process</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:resume_process(Suspendee) -&gt; true</head>
      <guard>
        <subtype><typename>Suspendee</typename><string>Suspendee = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Suspendee</anno>
</spec>
<spec>
  <name>round</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>round(Number) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Number</typename><string>Number = <seetype marker="erlang#number">number()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>self</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>self() -&gt; <seetype marker="erlang#pid">pid()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:send(Dest, Msg) -&gt; Msg</head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#send_destination">send_destination()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:send(Dest, Msg, Options) -&gt; Res</head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#send_destination">send_destination()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [nosuspend | noconnect]</string></subtype>
        <subtype><typename>Res</typename><string>Res = ok | nosuspend | noconnect</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Options</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>send_after</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:send_after(Time, Dest, Msg) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>send_after</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>erlang:send_after(Time, Dest, Msg, Options) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Abs</typename><string>Abs = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = {abs, Abs}</string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Abs</anno>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>send_nosuspend</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:send_nosuspend(Dest, Msg) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#send_destination">send_destination()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
</spec>
<spec>
  <name>send_nosuspend</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:send_nosuspend(Dest, Msg, Options) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#send_destination">send_destination()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [noconnect]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>seq_trace</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace(P1, P2) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#seq_trace_info_returns">seq_trace_info_returns()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>}</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>P2</typename><string>P2 = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: send) -&gt; {send, <seetype marker="erlang#boolean">boolean()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: 'receive') -&gt; {'receive', <seetype marker="erlang#boolean">boolean()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: print) -&gt; {print, <seetype marker="erlang#boolean">boolean()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: timestamp) -&gt; {timestamp, <seetype marker="erlang#boolean">boolean()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: monotonic_timestamp) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{timestamp, <seetype marker="erlang#boolean">boolean()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: strict_monotonic_timestamp) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{strict_monotonic_timestamp, <seetype marker="erlang#boolean">boolean()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: label) -&gt; [] | {label, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: serial) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{serial,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_print</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_print(P1) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>seq_trace_print</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_print(P1, P2) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>P2</typename><string>P2 = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>set_cookie</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:set_cookie(Cookie) -&gt; true</head>
      <guard>
        <subtype><typename>Cookie</typename><string>Cookie = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
</spec>
<spec>
  <name>set_cookie</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:set_cookie(Node, Cookie) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Cookie</typename><string>Cookie = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_cpu_topology</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>setelement</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>setelement(Index, Tuple1, Value) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
        <subtype><typename>Tuple2</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>setnode</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:setnode(P1, P2) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>P2</typename><string>P2 = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>setnode</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:setnode(Node, DistCtrlr, Opts) -&gt; <seetype marker="#dist_handle">dist_handle()</seetype></head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>DistCtrlr</typename><string>DistCtrlr = <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = {<seetype marker="erlang#integer">integer()</seetype>, <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>DistCtrlr</anno>
  <anno>Node</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Item) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Item</typename><string>Item = <seetype marker="erlang#tuple">tuple()</seetype> | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn(Fun) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn(Node, Fun) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn(Module, Function, Args) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn(Node, Module, Function, Args) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_link(Fun) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_link(Node, Fun) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_link(Module, Function, Args) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_link(Node, Module, Function, Args) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_monitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_monitor(Fun) -&gt; {<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn_monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_monitor(Node, Fun) -&gt; {<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_monitor</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_monitor(Module, Function, Args) -&gt; {<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn_monitor</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_monitor(Node, Module, Function, Args) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_opt(Fun, Options) -&gt; <seetype marker="erlang#pid">pid()</seetype> | {<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#spawn_opt_option">spawn_opt_option()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_opt(Node, Fun, Options) -&gt; <seetype marker="erlang#pid">pid()</seetype> | {<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[monitor | {monitor, [<seetype marker="#monitor_option">monitor_option()</seetype>]} | link | OtherOption]</string></subtype>
        <subtype><typename>OtherOption</typename><string>OtherOption = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>Options</anno>
  <anno>OtherOption</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_opt(Module, Function, Args, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pid | {Pid, MonitorRef}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#spawn_opt_option">spawn_opt_option()</seetype>]</string></subtype>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>MonitorRef</anno>
  <anno>Options</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>spawn_opt(Node, Module, Function, Args, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> | {<seetype marker="erlang#pid">pid()</seetype>, <seetype marker="erlang#reference">reference()</seetype>}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[monitor | {monitor, [<seetype marker="#monitor_option">monitor_option()</seetype>]} | link | OtherOption]</string></subtype>
        <subtype><typename>OtherOption</typename><string>OtherOption = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Options</anno>
  <anno>OtherOption</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_request(Fun) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_request(Fun, Options) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{reply_tag, ReplyTag} | {reply, Reply} | <seetype marker="#spawn_opt_option">spawn_opt_option()</seetype></string></subtype>
        <subtype><typename>ReplyTag</typename><string>ReplyTag = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reply</typename><string>Reply = yes | no | error_only | success_only</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Reply</anno>
  <anno>ReplyTag</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_request(Node, Fun) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_request(Node, Fun, Options) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>monitor |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitor, [<seetype marker="#monitor_option">monitor_option()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reply_tag, ReplyTag} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, Reply} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>OtherOption</string></subtype>
        <subtype><typename>ReplyTag</typename><string>ReplyTag = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reply</typename><string>Reply = yes | no | error_only | success_only</string></subtype>
        <subtype><typename>OtherOption</typename><string>OtherOption = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>OtherOption</anno>
  <anno>Reply</anno>
  <anno>ReplyTag</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_request(Module, Function, Args) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_request(Node, Module, Function, Args) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_request(Module, Function, Args, Options) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{reply_tag, ReplyTag} | {reply, Reply} | <seetype marker="#spawn_opt_option">spawn_opt_option()</seetype></string></subtype>
        <subtype><typename>ReplyTag</typename><string>ReplyTag = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reply</typename><string>Reply = yes | no | error_only | success_only</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Reply</anno>
  <anno>ReplyTag</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>spawn_request(Node, Module, Function, Args, Options) -&gt; ReqId</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>monitor |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitor, [<seetype marker="#monitor_option">monitor_option()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reply_tag, ReplyTag} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, Reply} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>OtherOption</string></subtype>
        <subtype><typename>ReplyTag</typename><string>ReplyTag = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reply</typename><string>Reply = yes | no | error_only | success_only</string></subtype>
        <subtype><typename>OtherOption</typename><string>OtherOption = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>ReqId</typename><string>ReqId = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>OtherOption</anno>
  <anno>Reply</anno>
  <anno>ReplyTag</anno>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>spawn_request_abandon</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_request_abandon(ReqId :: <seetype marker="erlang#reference">reference()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>ReqId</anno>
</spec>
<spec>
  <name>split_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>split_binary(Bin, Pos) -&gt; {<seetype marker="erlang#binary">binary()</seetype>, <seetype marker="erlang#binary">binary()</seetype>}</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pos</typename><string>Pos = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Pos</anno>
</spec>
<spec>
  <name>start_timer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:start_timer(Time, Dest, Msg) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>start_timer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>erlang:start_timer(Time, Dest, Msg, Options) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Abs</typename><string>Abs = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = {abs, Abs}</string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Abs</anno>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: active_tasks) -&gt; [ActiveTasks]</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: active_tasks_all) -&gt; [ActiveTasks]</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: context_switches) -&gt; {ContextSwitches, 0}</head>
      <guard>
        <subtype><typename>ContextSwitches</typename><string>ContextSwitches = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ContextSwitches</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: exact_reductions) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Exact_Reductions,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exact_Reductions_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Exact_Reductions</typename><string>Total_Exact_Reductions = Exact_Reductions_Since_Last_Call = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Exact_Reductions_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Exact_Reductions_Since_Last_Call</anno>
  <anno>Item</anno>
  <anno>Total_Exact_Reductions</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: garbage_collection) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Number_of_GCs, Words_Reclaimed, 0}</head>
      <guard>
        <subtype><typename>Number_of_GCs</typename><string>Number_of_GCs = Words_Reclaimed = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Words_Reclaimed</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Number_of_GCs</anno>
  <anno>Words_Reclaimed</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: io) -&gt; {{input, Input}, {output, Output}}</head>
      <guard>
        <subtype><typename>Input</typename><string>Input = Output = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Output</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Input</anno>
  <anno>Item</anno>
  <anno>Output</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: microstate_accounting) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[MSAcc_Thread] | undefined</head>
      <guard>
        <subtype><typename>MSAcc_Thread</typename><string>MSAcc_Thread = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{type := MSAcc_Thread_Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>id := MSAcc_Thread_Id,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>counters := MSAcc_Counters}</string></subtype>
        <subtype><typename>MSAcc_Thread_Type</typename><string>MSAcc_Thread_Type = <br/><nbsp/><nbsp/><nbsp/><nbsp/>async | aux | dirty_io_scheduler | dirty_cpu_scheduler |<br/><nbsp/><nbsp/><nbsp/><nbsp/>poll | scheduler</string></subtype>
        <subtype><typename>MSAcc_Thread_Id</typename><string>MSAcc_Thread_Id = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>MSAcc_Counters</typename><string>MSAcc_Counters = #{MSAcc_Thread_State =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
        <subtype><typename>MSAcc_Thread_State</typename><string>MSAcc_Thread_State = <br/><nbsp/><nbsp/><nbsp/><nbsp/>alloc | aux | bif | busy_wait | check_io | emulator | ets |<br/><nbsp/><nbsp/><nbsp/><nbsp/>gc | gc_fullsweep | nif | other | port | send | sleep | timers</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MSAcc_Counters</anno>
  <anno>MSAcc_Thread</anno>
  <anno>MSAcc_Thread_Id</anno>
  <anno>MSAcc_Thread_State</anno>
  <anno>MSAcc_Thread_Type</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: reductions) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Reductions, Reductions_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Reductions</typename><string>Total_Reductions = Reductions_Since_Last_Call = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Reductions_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Reductions_Since_Last_Call</anno>
  <anno>Total_Reductions</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: run_queue) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: run_queue_lengths) -&gt; [RunQueueLength]</head>
      <guard>
        <subtype><typename>RunQueueLength</typename><string>RunQueueLength = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>RunQueueLength</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: run_queue_lengths_all) -&gt; [RunQueueLength]</head>
      <guard>
        <subtype><typename>RunQueueLength</typename><string>RunQueueLength = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>RunQueueLength</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: runtime) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Run_Time, Time_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Run_Time</typename><string>Total_Run_Time = Time_Since_Last_Call = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Time_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Time_Since_Last_Call</anno>
  <anno>Total_Run_Time</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: scheduler_wall_time) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{SchedulerId, ActiveTime, TotalTime}] | undefined</head>
      <guard>
        <subtype><typename>SchedulerId</typename><string>SchedulerId = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>ActiveTime</typename><string>ActiveTime = TotalTime = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>TotalTime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTime</anno>
  <anno>Item</anno>
  <anno>SchedulerId</anno>
  <anno>TotalTime</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: scheduler_wall_time_all) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{SchedulerId, ActiveTime, TotalTime}] | undefined</head>
      <guard>
        <subtype><typename>SchedulerId</typename><string>SchedulerId = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>ActiveTime</typename><string>ActiveTime = TotalTime = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>TotalTime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTime</anno>
  <anno>Item</anno>
  <anno>SchedulerId</anno>
  <anno>TotalTime</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_active_tasks) -&gt; ActiveTasks</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_active_tasks_all) -&gt; ActiveTasks</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_run_queue_lengths) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TotalRunQueueLengths</head>
      <guard>
        <subtype><typename>TotalRunQueueLengths</typename><string>TotalRunQueueLengths = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>TotalRunQueueLengths</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_run_queue_lengths_all) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TotalRunQueueLengths</head>
      <guard>
        <subtype><typename>TotalRunQueueLengths</typename><string>TotalRunQueueLengths = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>TotalRunQueueLengths</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: wall_clock) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Wallclock_Time,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Wallclock_Time_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Wallclock_Time</typename><string>Total_Wallclock_Time = Wallclock_Time_Since_Last_Call = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Wallclock_Time_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Total_Wallclock_Time</anno>
  <anno>Wallclock_Time_Since_Last_Call</anno>
</spec>
<spec>
  <name>subtract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:subtract(X1 :: [<seetype marker="erlang#term">term()</seetype>], X2 :: [<seetype marker="erlang#term">term()</seetype>]) -&gt; [<seetype marker="erlang#term">term()</seetype>]</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>suspend_process</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:suspend_process(Suspendee) -&gt; true</head>
      <guard>
        <subtype><typename>Suspendee</typename><string>Suspendee = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Suspendee</anno>
</spec>
<spec>
  <name>suspend_process</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:suspend_process(Suspendee, OptList) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Suspendee</typename><string>Suspendee = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>OptList</typename><string>OptList = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = unless_suspending | asynchronous | {asynchronous, <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Opt</anno>
  <anno>OptList</anno>
  <anno>Suspendee</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: backtrace_depth, Depth) -&gt; OldDepth</head>
      <guard>
        <subtype><typename>Depth</typename><string>Depth = OldDepth = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldDepth</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Flag</anno>
  <anno>OldDepth</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: cpu_topology, CpuTopology) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldCpuTopology</head>
      <guard>
        <subtype><typename>CpuTopology</typename><string>CpuTopology = OldCpuTopology = <seetype marker="#cpu_topology">cpu_topology()</seetype></string></subtype>
        <subtype><typename>OldCpuTopology</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>CpuTopology</anno>
  <anno>Flag</anno>
  <anno>OldCpuTopology</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: dirty_cpu_schedulers_online,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DirtyCPUSchedulersOnline) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldDirtyCPUSchedulersOnline</head>
      <guard>
        <subtype><typename>DirtyCPUSchedulersOnline</typename><string>DirtyCPUSchedulersOnline = OldDirtyCPUSchedulersOnline = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>OldDirtyCPUSchedulersOnline</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DirtyCPUSchedulersOnline</anno>
  <anno>Flag</anno>
  <anno>OldDirtyCPUSchedulersOnline</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: erts_alloc, Value :: {Alloc, F, V}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | notsup</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = F = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>F</typename><string/></subtype>
        <subtype><typename>V</typename><string>V = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>F</anno>
  <anno>Flag</anno>
  <anno>V</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: fullsweep_after, Number) -&gt; OldNumber</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = OldNumber = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldNumber</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Number</anno>
  <anno>OldNumber</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: microstate_accounting, Action) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldState</head>
      <guard>
        <subtype><typename>Action</typename><string>Action = true | false | reset</string></subtype>
        <subtype><typename>OldState</typename><string>OldState = true | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Action</anno>
  <anno>Flag</anno>
  <anno>OldState</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: min_heap_size, MinHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMinHeapSize</head>
      <guard>
        <subtype><typename>MinHeapSize</typename><string>MinHeapSize = OldMinHeapSize = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldMinHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinHeapSize</anno>
  <anno>OldMinHeapSize</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMinBinVHeapSize</head>
      <guard>
        <subtype><typename>MinBinVHeapSize</typename><string>MinBinVHeapSize = OldMinBinVHeapSize = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldMinBinVHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinBinVHeapSize</anno>
  <anno>OldMinBinVHeapSize</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: max_heap_size, MaxHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMaxHeapSize</head>
      <guard>
        <subtype><typename>MaxHeapSize</typename><string>MaxHeapSize = OldMaxHeapSize = <seetype marker="#max_heap_size">max_heap_size()</seetype></string></subtype>
        <subtype><typename>OldMaxHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MaxHeapSize</anno>
  <anno>OldMaxHeapSize</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: multi_scheduling, BlockState) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldBlockState</head>
      <guard>
        <subtype><typename>BlockState</typename><string>BlockState = block | unblock | block_normal | unblock_normal</string></subtype>
        <subtype><typename>OldBlockState</typename><string>OldBlockState = blocked | disabled | enabled</string></subtype>
      </guard></clause>
  </contract>
  <anno>BlockState</anno>
  <anno>Flag</anno>
  <anno>OldBlockState</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: outstanding_system_requests_limit,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewLimit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldLimit</head>
      <guard>
        <subtype><typename>NewLimit</typename><string>NewLimit = OldLimit = 1..134217727</string></subtype>
        <subtype><typename>OldLimit</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>NewLimit</anno>
  <anno>OldLimit</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: scheduler_bind_type, How) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldBindType</head>
      <guard>
        <subtype><typename>How</typename><string>How = <seetype marker="#scheduler_bind_type">scheduler_bind_type()</seetype> | default_bind</string></subtype>
        <subtype><typename>OldBindType</typename><string>OldBindType = <seetype marker="#scheduler_bind_type">scheduler_bind_type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>How</anno>
  <anno>OldBindType</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: scheduler_wall_time, Boolean) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldBoolean</head>
      <guard>
        <subtype><typename>Boolean</typename><string>Boolean = OldBoolean = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>OldBoolean</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Flag</anno>
  <anno>OldBoolean</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: schedulers_online, SchedulersOnline) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldSchedulersOnline</head>
      <guard>
        <subtype><typename>SchedulersOnline</typename><string>SchedulersOnline = OldSchedulersOnline = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>OldSchedulersOnline</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldSchedulersOnline</anno>
  <anno>SchedulersOnline</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: system_logger, Logger) -&gt; PrevLogger</head>
      <guard>
        <subtype><typename>Logger</typename><string>Logger = PrevLogger = logger | undefined | <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>PrevLogger</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Logger</anno>
  <anno>PrevLogger</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: trace_control_word, TCW) -&gt; OldTCW</head>
      <guard>
        <subtype><typename>TCW</typename><string>TCW = OldTCW = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>OldTCW</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldTCW</anno>
  <anno>TCW</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: time_offset, Value :: finalize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldState</head>
      <guard>
        <subtype><typename>OldState</typename><string>OldState = preliminary | final | volatile</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldState</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: internal_cpu_topology, Value :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: sequential_tracer, Tracer) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>PrevTracer | false</head>
      <guard>
        <subtype><typename>Tracer</typename><string>Tracer = PrevTracer = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | {<seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#term">term()</seetype>} | false</string></subtype>
        <subtype><typename>PrevTracer</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>PrevTracer</anno>
  <anno>Tracer</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: reset_seq_trace, Value :: true) -&gt; true</head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: allocated_areas) -&gt; [<seetype marker="erlang#tuple">tuple()</seetype>]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: allocator) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Allocator, Version, Features, Settings}</head>
      <guard>
        <subtype><typename>Allocator</typename><string>Allocator = undefined | glibc</string></subtype>
        <subtype><typename>Version</typename><string>Version = [<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>]</string></subtype>
        <subtype><typename>Features</typename><string>Features = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Settings</typename><string>Settings = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{Subsystem :: <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Parameter :: <seetype marker="erlang#atom">atom()</seetype>, Value :: <seetype marker="erlang#term">term()</seetype>}]}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Allocator</anno>
  <anno>Features</anno>
  <anno>Item</anno>
  <anno>Parameter</anno>
  <anno>Settings</anno>
  <anno>Subsystem</anno>
  <anno>Value</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: {allocator, Alloc}) -&gt; [<seetype marker="erlang#term">term()</seetype>]</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: alloc_util_allocators) -&gt; [Alloc]</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: {allocator_sizes, Alloc}) -&gt; [<seetype marker="erlang#term">term()</seetype>]</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: atom_count) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: atom_limit) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: build_type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>opt | debug | gcov | valgrind | gprof |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>lcnt | frmptr</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: c_compiler_used) -&gt; {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: check_io) -&gt; [<seetype marker="erlang#term">term()</seetype>]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: compat_rel) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: cpu_topology) -&gt; CpuTopology</head>
      <guard>
        <subtype><typename>CpuTopology</typename><string>CpuTopology = <seetype marker="#cpu_topology">cpu_topology()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>CpuTopology</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{cpu_topology, defined | detected | used}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CpuTopology</head>
      <guard>
        <subtype><typename>CpuTopology</typename><string>CpuTopology = <seetype marker="#cpu_topology">cpu_topology()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>CpuTopology</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: creation) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: debug_compiled) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: delayed_node_table_gc) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>infinity | <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dirty_cpu_schedulers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dirty_cpu_schedulers_online) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dirty_io_schedulers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dist) -&gt; <seetype marker="erlang#binary">binary()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dist_buf_busy_limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dist_ctrl) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Node :: <seetype marker="erlang#node">node()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ControllingEntity :: <seetype marker="erlang#port">port()</seetype> | <seetype marker="erlang#pid">pid()</seetype>}</head></clause>
  </contract>
  <anno>ControllingEntity</anno>
  <anno>Item</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: driver_version) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dynamic_trace) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none | dtrace | systemtap</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dynamic_trace_probes) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: eager_check_io) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: emu_flavor) -&gt; emu | jit</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: emu_type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>opt | debug | gcov | valgrind | gprof |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>lcnt | frmptr</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: end_time) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: ets_count) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: ets_limit) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: fullsweep_after) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{fullsweep_after, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: garbage_collection) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#integer">integer()</seetype>}]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: heap_sizes) -&gt; [<seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: heap_type) -&gt; private</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: info) -&gt; <seetype marker="erlang#binary">binary()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: kernel_poll) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: loaded) -&gt; <seetype marker="erlang#binary">binary()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logical_processors |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logical_processors_available |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logical_processors_online) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>unknown | <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: machine) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: max_heap_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MaxHeapSize :: <seetype marker="#max_heap_size">max_heap_size()</seetype>}</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>MaxHeapSize</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: message_queue_data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#message_queue_data">message_queue_data()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: min_heap_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MinHeapSize :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>MinHeapSize</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: min_bin_vheap_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MinBinVHeapSize :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>MinBinVHeapSize</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: modified_timing_level) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#integer">integer()</seetype> | undefined</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: multi_scheduling) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>disabled | blocked | blocked_normal |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>enabled</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: multi_scheduling_blockers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[Pid :: <seetype marker="erlang#pid">pid()</seetype>]</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: nif_version) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: normal_multi_scheduling_blockers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[Pid :: <seetype marker="erlang#pid">pid()</seetype>]</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: otp_release) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: os_monotonic_time_source) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: os_system_time_source) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: outstanding_system_requests_limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>1..134217727</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: port_parallelism) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: port_count) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: port_limit) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: process_count) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: process_limit) -&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: procs) -&gt; <seetype marker="erlang#binary">binary()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: scheduler_bind_type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>spread | processor_spread | thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>thread_no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_thread_spread | no_spread | unbound</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: scheduler_bindings) -&gt; <seetype marker="erlang#tuple">tuple()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: scheduler_id) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SchedulerId :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
  <anno>SchedulerId</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: schedulers | schedulers_online) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: smp_support) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: start_time) -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: system_architecture) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: system_logger) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logger | undefined | <seetype marker="erlang#pid">pid()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: system_version) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: threads) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: thread_pool_size) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: time_correction) -&gt; true | false</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: time_offset) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>preliminary | final | volatile</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: time_warp_mode) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_time_warp | single_time_warp |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>multi_time_warp</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: tolerant_timeofday) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>enabled | disabled</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: trace_control_word) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: update_cpu_info) -&gt; changed | unchanged</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: version) -&gt; <seetype marker="erlang#string">string()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>wordsize |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{wordsize, internal} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{wordsize, external}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>4 | 8</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: overview) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: sequential_tracer) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{sequential_tracer,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | {<seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#term">term()</seetype>} | false}</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_monitor</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:system_monitor() -&gt; MonSettings</head>
      <guard>
        <subtype><typename>MonSettings</typename><string>MonSettings = undefined | {MonitorPid, Options}</string></subtype>
        <subtype><typename>MonitorPid</typename><string>MonitorPid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#system_monitor_option">system_monitor_option()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonSettings</anno>
  <anno>MonitorPid</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>system_monitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_monitor(Arg) -&gt; MonSettings</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = MonSettings = undefined | {MonitorPid, Options}</string></subtype>
        <subtype><typename>MonSettings</typename><string/></subtype>
        <subtype><typename>MonitorPid</typename><string>MonitorPid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#system_monitor_option">system_monitor_option()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>MonSettings</anno>
  <anno>MonitorPid</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>system_monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_monitor(MonitorPid, Options) -&gt; MonSettings</head>
      <guard>
        <subtype><typename>MonitorPid</typename><string>MonitorPid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#system_monitor_option">system_monitor_option()</seetype>]</string></subtype>
        <subtype><typename>MonSettings</typename><string>MonSettings = undefined | {OldMonitorPid, OldOptions}</string></subtype>
        <subtype><typename>OldMonitorPid</typename><string>OldMonitorPid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>OldOptions</typename><string>OldOptions = [<seetype marker="#system_monitor_option">system_monitor_option()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonSettings</anno>
  <anno>MonitorPid</anno>
  <anno>OldMonitorPid</anno>
  <anno>OldOptions</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>system_profile</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:system_profile() -&gt; ProfilerSettings</head>
      <guard>
        <subtype><typename>ProfilerSettings</typename><string>ProfilerSettings = undefined | {ProfilerPid, Options}</string></subtype>
        <subtype><typename>ProfilerPid</typename><string>ProfilerPid = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#system_profile_option">system_profile_option()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>ProfilerPid</anno>
  <anno>ProfilerSettings</anno>
</spec>
<spec>
  <name>system_profile</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_profile(ProfilerPid, Options) -&gt; ProfilerSettings</head>
      <guard>
        <subtype><typename>ProfilerPid</typename><string>ProfilerPid = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | undefined</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="#system_profile_option">system_profile_option()</seetype>]</string></subtype>
        <subtype><typename>ProfilerSettings</typename><string>ProfilerSettings = <br/><nbsp/><nbsp/><nbsp/><nbsp/>undefined | {<seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype>, [<seetype marker="#system_profile_option">system_profile_option()</seetype>]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>ProfilerPid</anno>
  <anno>ProfilerSettings</anno>
</spec>
<spec>
  <name>system_time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:system_time() -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>system_time</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_time(Unit) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seetype marker="#time_unit">time_unit()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>term_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>term_to_binary(Term) -&gt; <seetype marker="#ext_binary">ext_binary()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>term_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>term_to_binary(Term, Options) -&gt; <seetype marker="#ext_binary">ext_binary()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[compressed |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{compressed, Level :: 0..9} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>deterministic |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{minor_version, Version :: 0..2}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Level</anno>
  <anno>Options</anno>
  <anno>Term</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>term_to_iovec</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>term_to_iovec(Term) -&gt; <seetype marker="#ext_iovec">ext_iovec()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>term_to_iovec</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>term_to_iovec(Term, Options) -&gt; <seetype marker="#ext_iovec">ext_iovec()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[compressed |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{compressed, Level :: 0..9} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>deterministic |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{minor_version, Version :: 0..2}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Level</anno>
  <anno>Options</anno>
  <anno>Term</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>throw</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>throw(Any) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Any</typename><string>Any = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Any</anno>
</spec>
<spec>
  <name>time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>time() -&gt; Time</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seetype marker="calendar#time">calendar:time()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Time</anno>
</spec>
<spec>
  <name>time_offset</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:time_offset() -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>time_offset</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:time_offset(Unit) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seetype marker="#time_unit">time_unit()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>timestamp</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:timestamp() -&gt; Timestamp</head>
      <guard>
        <subtype><typename>Timestamp</typename><string>Timestamp = <seetype marker="#timestamp">timestamp()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Timestamp</anno>
</spec>
<spec>
  <name>tl</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tl(List) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>List</typename><string>List = <seetype marker="erlang#nonempty_maybe_improper_list">nonempty_maybe_improper_list()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>trace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace(PidPortSpec, How, FlagList) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>PidPortSpec</typename><string>PidPortSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#port">port()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>all | processes | ports | existing | existing_processes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>existing_ports | new | new_processes | new_ports</string></subtype>
        <subtype><typename>How</typename><string>How = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>FlagList</typename><string>FlagList = [<seetype marker="#trace_flag">trace_flag()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>How</anno>
  <anno>PidPortSpec</anno>
</spec>
<spec>
  <name>trace_delivered</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:trace_delivered(Tracee) -&gt; Ref</head>
      <guard>
        <subtype><typename>Tracee</typename><string>Tracee = <seetype marker="erlang#pid">pid()</seetype> | all</string></subtype>
        <subtype><typename>Ref</typename><string>Ref = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
  <anno>Tracee</anno>
</spec>
<spec>
  <name>trace_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:trace_info(PidPortFuncEvent, Item) -&gt; Res</head>
      <guard>
        <subtype><typename>PidPortFuncEvent</typename><string>PidPortFuncEvent = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#port">port()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new | new_processes | new_ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module, Function, Arity} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>on_load | send | 'receive'</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Arity</typename><string>Arity = <seetype marker="erlang#arity">arity()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <br/><nbsp/><nbsp/><nbsp/><nbsp/>flags | tracer | traced | match_spec | meta |<br/><nbsp/><nbsp/><nbsp/><nbsp/>meta_match_spec | call_count | call_time | all</string></subtype>
        <subtype><typename>Res</typename><string>Res = <seetype marker="#trace_info_return">trace_info_return()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Item</anno>
  <anno>Module</anno>
  <anno>PidPortFuncEvent</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA, MatchSpec) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>MFA</typename><string>MFA = <seetype marker="#trace_pattern_mfa">trace_pattern_mfa()</seetype> | send | 'receive'</string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(MatchSpecList :: <seetype marker="#trace_match_spec">trace_match_spec()</seetype>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>restart | pause</string></subtype>
      </guard></clause>
  </contract>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA :: send, MatchSpec, FlagList :: []) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = (MatchSpecList :: <seetype marker="#trace_match_spec">trace_match_spec()</seetype>) | <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA :: 'receive', MatchSpec, FlagList :: []) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = (MatchSpecList :: <seetype marker="#trace_match_spec">trace_match_spec()</seetype>) | <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA, MatchSpec, FlagList) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>MFA</typename><string>MFA = <seetype marker="#trace_pattern_mfa">trace_pattern_mfa()</seetype></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(MatchSpecList :: <seetype marker="#trace_match_spec">trace_match_spec()</seetype>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>restart | pause</string></subtype>
        <subtype><typename>FlagList</typename><string>FlagList = [<seetype marker="#trace_pattern_flag">trace_pattern_flag()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trunc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>trunc(Number) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>Number</typename><string>Number = <seetype marker="erlang#number">number()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>tuple_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_size(Tuple) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Tuple</typename><string>Tuple = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>tuple_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_to_list(Tuple) -&gt; [<seetype marker="erlang#term">term()</seetype>]</head>
      <guard>
        <subtype><typename>Tuple</typename><string>Tuple = <seetype marker="erlang#tuple">tuple()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>unalias</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unalias(Alias) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Alias</typename><string>Alias = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alias</anno>
</spec>
<spec>
  <name>unique_integer</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:unique_integer() -&gt; <seetype marker="erlang#integer">integer()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>unique_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:unique_integer(ModifierList) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>ModifierList</typename><string>ModifierList = [Modifier]</string></subtype>
        <subtype><typename>Modifier</typename><string>Modifier = positive | monotonic</string></subtype>
      </guard></clause>
  </contract>
  <anno>Modifier</anno>
  <anno>ModifierList</anno>
</spec>
<spec>
  <name>universaltime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:universaltime() -&gt; DateTime</head>
      <guard>
        <subtype><typename>DateTime</typename><string>DateTime = <seetype marker="calendar#datetime">calendar:datetime()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DateTime</anno>
</spec>
<spec>
  <name>universaltime_to_localtime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:universaltime_to_localtime(Universaltime) -&gt; Localtime</head>
      <guard>
        <subtype><typename>Localtime</typename><string>Localtime = Universaltime = <seetype marker="calendar#datetime">calendar:datetime()</seetype></string></subtype>
        <subtype><typename>Universaltime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Localtime</anno>
  <anno>Universaltime</anno>
</spec>
<spec>
  <name>universaltime_to_posixtime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:universaltime_to_posixtime(P1) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = {<seetype marker="calendar#date">calendar:date()</seetype>, <seetype marker="calendar#time">calendar:time()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>unlink</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unlink(Id) -&gt; true</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>unregister</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unregister(RegName) -&gt; true</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RegName</anno>
</spec>
<spec>
  <name>whereis</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>whereis(RegName) -&gt; <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="erlang#port">port()</seetype> | undefined</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RegName</anno>
</spec>
<spec>
  <name>yield</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:yield() -&gt; true</head></clause>
  </contract>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:45:53.</timestamp>
</module>