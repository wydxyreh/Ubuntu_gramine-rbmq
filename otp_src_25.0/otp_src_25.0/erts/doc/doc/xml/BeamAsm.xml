<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">
<chapter>
<header>
<copyright>
<year>2022</year>
<year>2022</year>
<holder>Ericsson AB. All Rights Reserved.</holder>
</copyright>
<legalnotice>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</legalnotice>

<title>BeamAsm, the Erlang JIT</title>
<prepared>emd2exml</prepared>
<responsible>emd2exml</responsible>
<docno>1</docno>
<approved>yes</approved>
<checked>yes</checked>
<date>2022-5-17</date>
<rev>1</rev>
<file>BeamAsm.xml</file>
</header>

<p>
BeamAsm provides load-time conversion of Erlang BEAM instructions into
native code on x86-64 and aarch64. This allows the loader to eliminate any
instruction dispatching overhead and also specialize each instruction on their
argument types.
</p>

<p>
BeamAsm does hardly any cross instruction optimizations and the <c>x</c> and <c>y</c>
register arrays work the same as when interpreting BEAM instructions.
This allows the Erlang run-time system to be largely unchanged except for
places that need to work with loaded BEAM instructions like code loading,
tracing, and a few others.
</p>

<p>
BeamAsm uses <url href="https://github.com/asmjit/asmjit">asmjit</url> to generate native code
in run-time. Only small parts of the
<url href="https://asmjit.com/doc/group__asmjit__assembler.html">Assembler API</url> of
<url href="https://github.com/asmjit/asmjit">asmjit</url> is used. At the moment
<url href="https://github.com/asmjit/asmjit">asmjit</url> only supports x86 32/64 bit and
aarch64 assembler.
</p>

<section>
<marker id="Loading-Code"/>
<title>Loading Code</title>

<p>
The code is loaded very similarly to how it is loaded for the interpreter. Each beam
file is parsed and then optimized through the transformations described in
<seeguide marker="beam_makeops#defining-transformation-rules">beam_makeops</seeguide>. The transformations
used in BeamAsm are much simpler than the interpreter's, as most of the
transformations for the interpreter are done only to eliminate the instruction
dispatch overhead.
</p>

<p>
Then each instruction is encoded using the C++ functions in the
<c>jit/$ARCH/instr_*.cpp</c> files. For example:
</p>

<code type="none">
void BeamModuleAssembler::emit_is_nonempty_list(const ArgVal &amp;Fail, const ArgVal &amp;Src) {
  a.test(getArgRef(Src), imm(_TAG_PRIMARY_MASK - TAG_PRIMARY_LIST));
  a.jne(labels[Fail.getLabel()]);
}
</code>
<p>
<url href="https://github.com/asmjit/asmjit">asmjit</url> provides a fairly straightforward
mapping from a C++ function call to the x86 assembly instruction. The above
instruction tests if the value in the <c>Src</c> register is a non-empty list and if
it is not then it jumps to the fail label.
</p>

<p>
For comparison, the interpreter has 8 combinations and specializations of
this implementation to minimize the instruction dispatch overhead for
common patterns.
</p>

<p>
The original register allocation done by the Erlang compiler is used to manage the
liveness of values and the physical registers are statically allocated to keep
the necessary process state. At the moment this is the static register
allocation on x86-64:
</p>

<code type="none">
rbx: ErtsSchedulerRegisters struct (contains x/float registers and some metadata)
rbp: Current frame pointer when `perf` support is enabled, otherwise this
     is an optional save slot for the Erlang stack pointer when executing C
     code.
r12: Active code index
r13: Current running process
r14: Remaining reductions
r15: Erlang heap pointer
</code>
<p>
Note that all of these are callee save registers under the System V and Windows
ABIs which means that BeamAsm never has to spill any of these when making C
function calls.
</p>

<p>
The caller save registers are used as scratch registers within instructions but
usually do not carry information between them. For some frequent instruction
sequences such as tuple matching cross instruction optimization <em>are</em> done to avoid
fetching the base address of the tuple in every <c>get_tuple_element</c> instruction.
</p>

<section>
<marker id="Loading-Code_Reducing-code-size-and-load-time"/>
<title>Reducing code size and load time</title>

<p>
One of the strengths of the interpreter is that it uses relatively little memory
for loaded code. This is because the implementation of each loaded instruction is
shared and only the arguments to the instructions vary. Using as little memory as
possible has many advantages; less memory is used, loading time decreases,
higher cache hit-rate.
</p>

<p>
In BeamAsm we need to achieve something similar since the load-time of a module
scales almost linearly with the amount of memory it uses. Early BeamAsm prototypes
used about double the amount of memory for code as the interpreter, while current
versions use about 10% more. How was this achieved?
</p>

<p>
In BeamAsm we heavily use shared code fragments to try to emit as much code as
possible as global shared fragments instead of duplicating the code unnecessarily.
For instance, the return instruction looks something like this:
</p>

<code type="none">
Label yield = a.newLabel();

a.dec(FCALLS);           /* Decrement reduction counter */
a.jl(dispatch_return);   /* Check if we should yield */
a.ret();

a.bind(yield);
abs_jmp(ga-&gt;get_dispatch_return());
</code>
<p>
The code above is not exactly what is emitted, but close enough. The thing to note
is that the code for doing the context switch is never emitted. Instead, we jump
to a global fragment that all return instructions share. This greatly reduces
the amount of code that has to be emitted for each module.
</p>

</section>

</section>

<section>
<marker id="Running-Erlang-code"/>
<title>Running Erlang code</title>

<p>
Running BeamAsm code is very similar to running the interpreter, except that
native code is executed instead of interpreted code.
</p>

<p>
We had to tweak the way the Erlang stack works in order to execute native
instructions on it. While the interpreter uses a stack slot for
the current frame's return address (setting it to <c>[]</c> when unused), the
native code merely reserves enough space for it as the x86 <c>call</c> and <c>ret</c>
instructions bump the stack pointer when executed.
</p>

<p>
This only affects the <em>current stack frame</em>, and is functionally identical
aside from two caveats:
</p>

<list type="ordered"><item>
<p>Exceptions must not be thrown when the return address is reserved.
</p>

<p>It's hard to tell where the stack will end up after an exception; the return
address won't be on the stack if we crash in the <em>current stack frame</em>, but
will be if we crash in a function we call. Telling these apart turned out to
rather complicated, so we decided to require the return address to be used
when an exception is thrown.
</p>

<p><c>emit_handle_error</c> handles this for you, and shared fragments that have been
called (rather than jumped to) satisfy this requirement by default.
</p>

</item>
<item>
<p>Garbage collection needs to take return addresses into account.
</p>

<p>If we're about to create a term we have to make sure that there's enough
space for this term <em>and</em> a potential return address, or else the next
<c>call</c> will clobber said term. This is taken care of in <c>emit_gc_test</c> and
you generally don't need to think about it.
</p>
</item></list>
<p>
In addition to the above, we ensure that there's always at least <c>S_REDZONE</c>
free words on the stack so we can make calls to shared fragments or trace
handlers even when we lack a stack frame. This is merely a reservation and has
no effect on how the stack works, and all values stored there must be valid
Erlang terms in case of a garbage collection.
</p>

</section>

<section>
<marker id="Frame-pointers"/>
<title>Frame pointers</title>

<p>
To aid debuggers and sampling profilers, we support running Erlang code with
native frame pointers. At the time of writing, this is only enabled together
with <c>perf</c> support (<c>+JPperf true</c>) to save stack space, but we may add a flag
to explicitly enable it in the future.
</p>

<p>
When enabled, continuation pointers (CP) have both a return address <em>and</em> a
frame pointer that points at the previous CP. CPs must form a valid chain at
all times, and it's illegal to have "half" a CP when the stack is inspected.
</p>

<p>
Frame pointers are pushed when entering an Erlang function and popped before
leaving it, including on tail calls as the callee will immediately push the
frame pointer on entry. This has a slight overhead but saves us the headache of
having multiple entry points for each function depending on whether it's tail-
or body-called, which would get very tricky once breakpoints enter the picture.
</p>

</section>

<section>
<marker id="Running-C-code"/>
<title>Running C code</title>

<p>
As Erlang stacks can be very small, we have to switch over to a different stack
when we need to execute C code (which may expect a much larger stack). This is
done through <c>emit_enter_runtime</c> and <c>emit_leave_runtime</c>, for example:
</p>

<code type="none">
mov_arg(ARG4, NumFree);

/* Move to the C stack and swap out our current reductions, stack-, and
 * heap pointer to the process structure. */
emit_enter_runtime&lt;Update::eReductions | Update::eStack | Update::eHeap&gt;();

a.mov(ARG1, c_p);
load_x_reg_array(ARG2);
make_move_patch(ARG3, lambdas[Fun.getValue()].patches);

/* Call `new_fun`, asserting that we&apos;re on the C stack. */
runtime_call&lt;4&gt;(new_fun);

/* Move back to the C stack, and read the updated values from the process
 * structure */
emit_leave_runtime&lt;Update::eReductions | Update::eStack | Update::eHeap&gt;();

a.mov(getXRef(0), RET);
</code>
<p>
All combinations of the <c>Update</c> constants are legal, but the ones given to
<c>emit_leave_runtime</c> <em>must</em> be the same as those given to <c>emit_enter_runtime</c>.
</p>

</section>

<section>
<marker id="Tracing-and-NIF-Loading"/>
<title>Tracing and NIF Loading</title>

<p>
To make tracing and NIF loading work there needs to be a way to intercept
any function call. In the interpreter, this is done by rewriting the loaded BEAM code,
but this is more complicated in BeamAsm as we want to have a fast and compact way to
do this. This is solved by emitting the code below at the start of each function:
</p>

<code type="none">
0x0: jmp 6
0x2: ERTS_ASM_BP_FLAG_NONE
0x3: relative near call
0x4: &amp;genericBPTramp
0x8: actual code for the function
</code>
<p>
When code starts to execute it will simply see the <c>jmp 6</c> instruction
which skips the prologue and starts to execute the code directly.
</p>

<p>
When we want to enable a certain break point we set the <c>jmp</c> target to
be 1 (which means it will land on the call instruction) and will call
genericBPTramp. genericBPTramp is a label at the top of each module
that contains <url href="https://en.wikipedia.org/wiki/Trampoline_">trampolines</url> for all flag combinations.
</p>


<code type="none">
genericBPTramp:

0x0: ret
0x10: jmp call_nif_early
0x20: call generic_bp_local
0x30: call generic_bp_local
0x35: jmp call_nif_early
</code>
<p>
Note that each target is 16 byte aligned. This is because the call target
in the function prologue is updated to target the correct place when a flag
is updated. So if CALL_NIF_EARLY is set, then it is updated to be
genericBPTramp + 0x10. If BP is set, it is updated to genericBPTramp + 0x20
and the combination makes it to be genericBPTramp + 0x30.
</p>

<section>
<marker id="Tracing-and-NIF-Loading_Updating-code"/>
<title>Updating code</title>

<p>
Because many environments enforce [W^X] it's not always possible to write
directly to the code pages. Because of this we map code twice: once with an
executable page and once with a writable page. Since they're backed by the
same memory, writes to the writable page appear magically in the executable
one.
</p>

<p>
The <c>erts_writable_code_ptr</c> function can be used to get writable pointers,
given a module instance:
</p>

<code type="none">
for (i = 0; i &lt; n; ++i) {
    const ErtsCodeInfo* ci_exec;
    ErtsCodeInfo* ci_rw;
    void *w_ptr;

    ci_exec = code_hdr-&gt;functions[i];
    w_ptr = erts_writable_code_ptr(&amp;modp-&gt;curr, ci_exec);
    ci_rw = (ErtsCodeInfo*)w_ptr;

    uninstall_breakpoint(ci_rw, ci_exec);
    consolidate_bp_data(modp, ci_rw, 1);
    ASSERT(ci_rw-&gt;u.gen_bp == NULL);
}
</code>
<p>
Without the module instance there's no reliable way to figure out the writable
address of a code page, and we rely on <em>address space layout randomization</em>
(ASLR) to make it difficult to guess.
</p>

</section>

<section>
<marker id="Tracing-and-NIF-Loading_Export-tracing"/>
<title>Export tracing</title>

<p>
Unlike the interpreter, we don't execute code inside export entries as that's
very annoying to do in the face of [W^X]. When tracing is enabled, we instead
point to a fragment that looks at the current export entry and decides what to
do.
</p>

<p>
This fragment is shared between all export entries, and the export entry to
operate on is assumed to be in a certain register (<c>RET</c> as of writing). This
means that all remote calls <em>must</em> place the export entry in said register,
even when we don't know beforehand that the call is remote, such as when
calling a fun.
</p>

<p>
This is pretty easy to do in assembler and the <c>emit_setup_dispatchable_call</c>
helper handles it nicely for us, but we can't set registers when trapping out
from C code. When trapping to an export entry from C code one must set
<c>c_p-&gt;current</c> to the <c>ErtsCodeMFA</c> inside the export entry in question, and
then set <c>c_p-&gt;i</c> to <c>beam_bif_export_trap</c>.
</p>

<p>
The <c>BIF_TRAP</c> macros handle this for you, so you generally don't need to
think about it.
</p>


</section>

</section>

<section>
<marker id="Description-of-each-file"/>
<title>Description of each file</title>

<p>
The BeamAsm implementation resides in the <c>$ERL_TOP/erts/emulator/beam/jit</c> folder.
The files are:
</p>

<list type="bulleted"><item>
<c>asm_load.c</c>

<list type="bulleted"><item>
BeamAsm specific functions for loading code

</item></list>
</item>
<item>
<c>beam_asm.h</c>

<list type="bulleted"><item>
Header file describing the C -> C++ api

</item></list>
</item>
<item>
<c>beam_jit_metadata.cpp</c>

<list type="bulleted"><item>
<c>gdb</c> and Linux <c>perf</c> support for BeamAsm

</item></list>
</item>
<item>
<c>load.h</c>

<list type="bulleted"><item>
BeamAsm specific header for loading code

</item></list>
</item>
<item>
<c>$ARCH/beam_asm.hpp</c>

<list type="bulleted"><item>
Header file describing the structs and classes used by BeamAsm.

</item></list>
</item>
<item>
<c>$ARCH/beam_asm.cpp</c>

<list type="bulleted"><item>
The BeamAsm initialization code

</item>
<item>
The C -> C++ interface functions.

</item></list>
</item>
<item>
<c>$ARCH/generators.tab</c>, <c>$ARCH/predicates.tab</c>, <c>$ARCH/ops.tab</c>

<list type="bulleted"><item>
BeamAsm specific transformations for instructions. See
<seeguide marker="beam_makeops">beam_makeops</seeguide> for more details.

</item></list>
</item>
<item>
<c>$ARCH/beam_asm_module.cpp</c>

<list type="bulleted"><item>
The code for the BeamAsm module code generator logic

</item></list>
</item>
<item>
<c>$ARCH/beam_asm_global.cpp</c>

<list type="bulleted"><item>
Global code fragments that are used by multiple instructions, e.g. error
handling code.

</item></list>
</item>
<item>
<c>$ARCH/instr_*.cpp</c>

<list type="bulleted"><item>
Implementation of individual instructions grouped into files by area

</item></list>
</item>
<item>
<c>$ARCH/process_main.cpp</c>

<list type="bulleted"><item>
Implementation of the main process loop

</item></list>
</item></list>
</section>

<section>
<marker id="Linux-perf-support"/>
<title>Linux perf support</title>

<p>
perf can also be instrumented using BeamAsm symbols to provide more information. As with
gdb, only the currently executing function will show up in the stack trace, which means
that perf provides functionality similar to that of <url href="https://erlang.org/doc/man/eprof.html">eprof</url>.
</p>

<p>
You can run perf on BeamAsm like this:
</p>

<code type="none">
perf record erl +JPperf true
</code>
<p>
and then look at the results using <c>perf report</c> as you normally would with
perf.
</p>

<p>
Frame pointers are enabled when the <c>+JPperf true</c> option is passed, so you can
use <c>perf record --call-graph=fp</c> to get more context. This will give you
accurate call graphs for pure Erlang code, but in rare cases it fails to track
transitions from Erlang to C code and back. <url href="https://lwn.net/Articles/680985/">`perf record --call-graph=lbr`</url>
may work better in those cases, but it's worse at tracking in general.
</p>

<p>
For example, you can run perf to analyze dialyzer building a PLT like this:
</p>

<code type="none">
 ERL_FLAGS="+JPperf true +S 1" perf record --call-graph=fp \
   dialyzer --build_plt -Wunknown --apps compiler crypto erts kernel stdlib \
   syntax_tools asn1 edoc et ftp inets mnesia observer public_key \
   sasl runtime_tools snmp ssl tftp wx xmerl tools
</code>
<p>
The above code is run using <c>+S 1</c> to make the perf output easier to understand.
If you then run <c>perf report -f --no-children</c> you may get something similar to this:
</p>

<image file="figures/perf-beamasm.png"><icaption>Linux Perf report: dialyzer PLT build</icaption></image>

<p>
Any Erlang function in the report is prefixed with a <c>$</c> and all C functions have
their normal names. Any Erlang function that has the prefix <c>$global::</c> refers
to a global shared fragment.
</p>

<p>
So in the above, we can see that we spend the most time doing <c>eq</c>, i.e. comparing two terms.
By expanding it and looking at its parents we can see that it is the function
<c>erl_types:t_is_equal/2</c> that contributes the most to this value. Go and have a look
at it in the source code to see if you can figure out why so much time is spent there.
</p>

<p>
After <c>eq</c> we see the function <c>erl_types:t_has_var/1</c> where we spend almost
5% of the entire execution in. A while further down you can see <c>copy_struct_x</c>
which is the function used to copy terms. If we expand it to view the parents
we find that it is mostly <c>ets:lookup_element/3</c> that contributes to this time
via the Erlang function <c>dialyzer_plt:ets_table_lookup/2</c>.
</p>

<section>
<marker id="Linux-perf-support_Flame-Graph"/>
<title>Flame Graph</title>

<p>
You can also create a Flame Graph from the perf output. Flame Graphs are basically
just another way to look at the same data as the <c>perf report</c> output, but can
be more easily shared with others and manipulated to give a graph tailor-made for
your needs. For instance, if we run dialyzer with all schedulers:
</p>

<code type="none">
## Run dialyzer with multiple schedulers
ERL_FLAGS="+JPperf true" perf record --call-graph=fp \
  dialyzer --build_plt -Wunknown --apps compiler crypto erts kernel stdlib \
  syntax_tools asn1 edoc et ftp inets mnesia observer public_key \
  sasl runtime_tools snmp ssl tftp wx xmerl tools --statistics
</code>
<p>
And then use the scripts found at Brendan Gregg's <url href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs">CPU Flame Graphs</url>
web page as follows:
</p>

<code type="none">
## Collect the results
perf script &gt; out.perf
## run stackcollapse
stackcollapse-perf.pl out.perf &gt; out.folded
## Create the svg
flamegraph.pl out.folded &gt; out.svg
</code>
<p>
We get a graph that would look something like this:
</p>

<image file="figures/perf-beamasm.svg"><icaption>Linux Perf FlameGraph: dialyzer PLT build</icaption></image>

<p>
You can view a larger version <seefile marker="figures/perf-beamasm.svg">here</seefile>. It contains
the same information, but it is easier to share with others as it does
not need the symbols in the executable.
</p>

<p>
Using the same data we can also produce a graph where the scheduler profile data
has been merged by using <c>sed</c>:
</p>

<code type="none">
## Strip [0-9]+_ from all scheduler names
sed -e &apos;s/^[0-9]\+_//&apos; out.folded &gt; out.folded_sched
## Create the svg
flamegraph.pl out.folded_sched &gt; out_sched.svg
</code>
<image file="figures/perf-beamasm-merged.svg"><icaption>Linux Perf FlameGraph: dialyzer PLT build</icaption></image>

<p>
You can view a larger version <seefile marker="figures/perf-beamasm-merged.svg">here</seefile>.
There are many different transformations that you can do to make the graph show
you what you want.
</p>

</section>

<section>
<marker id="Linux-perf-support_Annotate-perf-functions"/>
<title>Annotate perf functions</title>

<p>
If you want to be able to use the <c>perf annotate</c> functionality (and in extension
the annotate functionality in the <c>perf report</c> gui) you need to use a monotonic
clock when calling <c>perf record</c>, i.e. <c>perf record -k mono</c>. So for a dialyzer
run you would do this:
</p>

<code type="none">
ERL_FLAGS="+JPperf true +S 1" perf record -k mono --call-graph=fp \
  dialyzer --build_plt -Wunknown --apps compiler crypto erts kernel stdlib \
  syntax_tools asn1 edoc et ftp inets mnesia observer public_key \
  sasl runtime_tools snmp ssl tftp wx xmerl tools
</code>
<p>
In order to use the <c>perf.data</c> produced by this record you need to first call
<c>perf inject --jit</c> like this:
</p>

<code type="none">
perf inject --jit -i perf.data -o perf.jitted.data
</code>
<p>
and then you can view an annotated function like this:
</p>

<code type="none">
perf annotate -M intel -i perf.jitted.data erl_types:t_has_var/1
</code>
<p>
or by pressing <c>a</c> in the <c>perf report</c> ui. Then you get something like this:
</p>

<image file="figures/beamasm-perf-annotate.png"><icaption>Linux Perf FlameGraph: dialyzer PLT build</icaption></image>

<p>
<c>perf annotate</c> will interleave the listing with the original source code
whenever possible. You can use the <c>+{source,Filename}</c> or <c>+absolute_paths</c>
compiler options to tell <c>perf</c> where to find the source code.
</p>

<warning>
<p>
Calling <c>perf inject --jit</c> will create a lot of files in <c>/tmp/</c>
 and in <c>~/.debug/tmp/</c>. So make sure to cleanup in those directories from time to
 time or you may run out of inodes.
</p>
</warning>

</section>

<section>
<marker id="Linux-perf-support_perf-tips-and-tricks"/>
<title>perf tips and tricks</title>

<p>
You can do a lot of neat things with <c>perf</c>. Below is a list of some of the options
we have found useful:
</p>

<list type="bulleted"><item>
<c>perf report --no-children</c>
Do not include the accumulation of all children in a call.

</item>
<item>
<c>perf report  --call-graph callee</c>
Show the callee rather than the caller when expanding a function call.

</item>
<item>
<c>perf archive</c>
Create an archive with all the artifacts needed to inspect the data
on another host. In early version of perf this command does not work,
instead you can use <url href="https://github.com/torvalds/linux/blob/master/tools/perf/perf-archive.sh">this bash script</url>.

</item>
<item>
<c>perf report</c> gives "failed to process sample" and/or "failed to process type: 68"
This probably means that you are running a bugge version of perf. We have
seen this when running Ubuntu 18.04 with kernel version 4. If you update
to Ubuntu 20.04 or use Ubuntu 18.04 with kernel version 5 the problem
should go away.

</item></list>
</section>

</section>

<section>
<marker id="FAQ"/>
<title>FAQ</title>

<section>
<marker id="FAQ_How-do-I-know-that-Im-running-a-JIT-enabled-Erlang"/>
<title>How do I know that I&apos;m running a JIT enabled Erlang?</title>

<p>
You will see a banner containing <c>[jit]</c> shell when you start. You can also use
<c>erlang:system_info(emu_flavor)</c> to check the flavor and it should be <c>jit</c>.
</p>

<p>
There are two major reasons why when building Erlang/OTP you would not get the
JIT.
</p>

<list type="bulleted"><item>
You are not building a 64-bit emulator for x86 or ARM

</item>
<item>
You do not have a C++ compiler that supports C++-17

</item></list>
<p>
If you run <c>./configure --enable-jit</c> configure will abort when it discovers that
your system cannot build the JIT.
</p>

</section>

<section>
<marker id="FAQ_Is-the-interpreter-still-available"/>
<title>Is the interpreter still available?</title>

<p>
Yes, you can still build the interpreter if you want to. In fact, it is what is used
on platforms where BeamAsm does not yet work. You can either completely disable
BeamAsm by passing <c>--disable-jit</c> to configure. Or you can build the
interpreter using <c>make FLAVOR=emu</c> and then run it using <c>erl -emu_flavor emu</c>.
</p>

<p>
It is possible to have both the JIT and interpreter available at the same time.
</p>

</section>

<section>
<marker id="FAQ_How-much-of-a-speedup-should-I-expect-from-BeamAsm-compared-to-the-interpreter"/>
<title>How much of a speedup should I expect from BeamAsm compared to the interpreter?</title>

<p>
It depends a lot on what your application does. Anything from no difference to up to
four times as fast is possible.
</p>

<p>
BeamAsm tries very hard to not be slower than the interpreter, but there can be cases
when that happens. One such could be very short-lived small scripts. If you come across
any scenarios when this happens, please open a bug report at
<url href="https://github.com/erlang/otp/issues">the Erlang/OTP bug tracker</url>.
</p>

</section>

<section>
<marker id="FAQ_Would-it-be-possible-to-add-support-for-BeamAsm-on-other-CPU-architectures"/>
<title>Would it be possible to add support for BeamAsm on other CPU architectures?</title>

<p>
Any new architecture needs support in the assembler as well. Since we use
<url href="https://github.com/asmjit/asmjit">asmjit</url> for this, that means we need support
in <url href="https://github.com/asmjit/asmjit">asmjit</url>. BeamAsm uses relatively few
instructions (mostly, <c>mov</c>, <c>jmp</c>, <c>cmp</c>, <c>sub</c>, <c>add</c>), so it would not need
to have full support of all instructions.
</p>

<p>
Another approach would be to not use <url href="https://github.com/asmjit/asmjit">asmjit</url>
for the new architecture, but instead use something different to assemble code
during load-time.
</p>

</section>

<section>
<marker id="FAQ_Would-it-be-possible-to-add-support-for-BeamAsm-on-another-OS"/>
<title>Would it be possible to add support for BeamAsm on another OS?</title>

<p>
Adding a new OS that runs x86-64 or aarch64 should not need any large changes
if the OS supports mapping of memory as executable. If the ABI used by the
OS is not supported changes related to calling C-functions also have to
be made.
</p>

<p>
As a reference, it took us about 2-3 weeks to implement support for Windows,
and about three months to finish the aarch64 port.
</p>
</section>

</section>

</chapter>

