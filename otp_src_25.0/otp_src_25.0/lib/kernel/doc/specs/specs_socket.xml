<module name="socket">
<type>
  <name>cmsg</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cmsg">cmsg()</marker> = <seetype marker="#cmsg_recv">cmsg_recv()</seetype> | <seetype marker="#cmsg_send">cmsg_send()</seetype></typehead></typedecl>
</type>
<type>
  <name>cmsg_recv</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cmsg_recv">cmsg_recv()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := socket,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := timestamp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#timeval">timeval()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := socket, type := rights, data := <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := socket, type := credentials, data := <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := tos,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#ip_tos">ip_tos()</seetype> | <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := recvtos,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value := <seetype marker="#ip_tos">ip_tos()</seetype> | <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := ttl,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := recvttl,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value := <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := pktinfo,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#ip_pktinfo">ip_pktinfo()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := origdstaddr,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := recverr,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#extended_err">extended_err()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ipv6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := hoplimit,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ipv6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := pktinfo,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#ipv6_pktinfo">ipv6_pktinfo()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ipv6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := recverr,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#extended_err">extended_err()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ipv6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := tclass,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="erlang#integer">integer()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>cmsg_send</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cmsg_send">cmsg_send()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := socket,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := timestamp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data =&gt; <seetype marker="#native_value">native_value()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#timeval">timeval()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := socket, type := rights, data := <seetype marker="#native_value">native_value()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := socket,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := credentials,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="#native_value">native_value()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := tos,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data =&gt; <seetype marker="#native_value">native_value()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="#ip_tos">ip_tos()</seetype> | <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := ttl,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data =&gt; <seetype marker="#native_value">native_value()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := hoplimit,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data =&gt; <seetype marker="#native_value">native_value()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := ipv6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := tclass,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data =&gt; <seetype marker="#native_value">native_value()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>value =&gt; <seetype marker="erlang#integer">integer()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>domain</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-domain">domain()</marker> = inet | inet6 | local | unspec</typehead></typedecl>
</type>
<type>
  <name>ee_origin</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ee_origin">ee_origin()</marker> = none | local | icmp | icmp6</typehead></typedecl>
</type>
<type>
  <name>extended_err</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-extended_err">extended_err()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{error := <seetype marker="#posix">posix()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>origin := icmp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := dest_unreach,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>code := <seetype marker="#icmp_dest_unreach">icmp_dest_unreach()</seetype> | 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>info := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>offender := <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{error := <seetype marker="#posix">posix()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>origin := icmp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := time_exceeded | 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>code := 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>info := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>offender := <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{error := <seetype marker="#posix">posix()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>origin := icmp6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := dest_unreach,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>code := <seetype marker="#icmpv6_dest_unreach">icmpv6_dest_unreach()</seetype> | 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>info := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>offender := <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{error := <seetype marker="#posix">posix()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>origin := icmp6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := pkt_toobig | time_exceeded | 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>code := 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>info := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>offender := <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{error := <seetype marker="#posix">posix()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>origin := <seetype marker="#ee_origin">ee_origin()</seetype> | 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>code := 0..255,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>info := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>offender := <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>hatype</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hatype">hatype()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>netrom | eether | ether | ax25 | pronet | chaos | ieee802 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>arcnet | appletlk | dlci | atm | metricom | ieee1394 | eui64 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>infiniband | tunnel | tunnel6 | loopback | localtlk | none |<br/><nbsp/><nbsp/><nbsp/><nbsp/>void |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></typehead></typedecl>
</type>
<type>
  <name>icmp_dest_unreach</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-icmp_dest_unreach">icmp_dest_unreach()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>net_unreach | host_unreach | port_unreach | frag_needed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>net_unknown | host_unknown</typehead></typedecl>
</type>
<type>
  <name>icmpv6_dest_unreach</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-icmpv6_dest_unreach">icmpv6_dest_unreach()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>noroute | adm_prohibited | not_neighbour | addr_unreach |<br/><nbsp/><nbsp/><nbsp/><nbsp/>port_unreach | policy_fail | reject_route</typehead></typedecl>
</type>
<type>
  <name>in6_addr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-in6_addr">in6_addr()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535}</typehead></typedecl>
</type>
<type>
  <name>in6_flow_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-in6_flow_info">in6_flow_info()</marker> = 0..1048575</typehead></typedecl>
</type>
<type>
  <name>in6_scope_id</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-in6_scope_id">in6_scope_id()</marker> = 0..4294967295</typehead></typedecl>
</type>
<type>
  <name>in_addr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-in_addr">in_addr()</marker> = {0..255, 0..255, 0..255, 0..255}</typehead></typedecl>
</type>
<type>
  <name>info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info">info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{counters := #{<seetype marker="erlang#atom">atom()</seetype> := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>iov_max := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>use_registry := <seetype marker="erlang#boolean">boolean()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>info_keys</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_keys">info_keys()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[domain | type | protocol | fd | owner | local_address |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>remote_address | recv | sent | state]</typehead></typedecl>
</type>
<type>
  <name>invalid</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-invalid">invalid()</marker> = {invalid, What :: <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
  <anno>What</anno>
</type>
<type>
  <name>ioctl_device_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ioctl_device_flag">ioctl_device_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>up | broadcast | debug | loopback | pointopoint | notrailers |<br/><nbsp/><nbsp/><nbsp/><nbsp/>knowsepoch | running | noarp | promisc | allmulti | master |<br/><nbsp/><nbsp/><nbsp/><nbsp/>oactive | slave | simplex | link0 | link1 | link2 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>multicast | portsel | automedia | cantconfig | ppromisc |<br/><nbsp/><nbsp/><nbsp/><nbsp/>dynamic | monitor | staticarp | dying | renaming | nogroup |<br/><nbsp/><nbsp/><nbsp/><nbsp/>lower_up | dormant | echo</typehead></typedecl>
</type>
<type>
  <name>ioctl_device_map</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ioctl_device_map">ioctl_device_map()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{mem_start := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mem_end := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>base_addr := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>irq := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dma := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>port := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</typehead></typedecl>
</type>
<type>
  <name>ip_mreq</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_mreq">ip_mreq()</marker> = #{multiaddr := <seetype marker="#in_addr">in_addr()</seetype>, interface := <seetype marker="#in_addr">in_addr()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>ip_mreq_source</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_mreq_source">ip_mreq_source()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{multiaddr := <seetype marker="#in_addr">in_addr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>interface := <seetype marker="#in_addr">in_addr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sourceaddr := <seetype marker="#in_addr">in_addr()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>ip_msfilter</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_msfilter">ip_msfilter()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{multiaddr := <seetype marker="#in_addr">in_addr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>interface := <seetype marker="#in_addr">in_addr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mode := include | exclude,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>slist := [<seetype marker="#in_addr">in_addr()</seetype>]}</typehead></typedecl>
</type>
<type>
  <name>ip_pktinfo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_pktinfo">ip_pktinfo()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{ifindex := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>spec_dst := <seetype marker="#in_addr">in_addr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>addr := <seetype marker="#in_addr">in_addr()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>ip_pmtudisc</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_pmtudisc">ip_pmtudisc()</marker> = want | dont | do | probe</typehead></typedecl>
</type>
<type>
  <name>ip_tos</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_tos">ip_tos()</marker> = lowdelay | throughput | reliability | mincost</typehead></typedecl>
</type>
<type>
  <name>ipv6_hops</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ipv6_hops">ipv6_hops()</marker> = default | 0..255</typehead></typedecl>
</type>
<type>
  <name>ipv6_mreq</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ipv6_mreq">ipv6_mreq()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{multiaddr := <seetype marker="#in6_addr">in6_addr()</seetype>, interface := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</typehead></typedecl>
</type>
<type>
  <name>ipv6_pktinfo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ipv6_pktinfo">ipv6_pktinfo()</marker> = #{addr := <seetype marker="#in6_addr">in6_addr()</seetype>, ifindex := <seetype marker="erlang#integer">integer()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>ipv6_pmtudisc</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ipv6_pmtudisc">ipv6_pmtudisc()</marker> = want | dont | do | probe</typehead></typedecl>
</type>
<type>
  <name>level</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-level">level()</marker> = socket | <seetype marker="#protocol">protocol()</seetype></typehead></typedecl>
</type>
<type>
  <name>linger</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-linger">linger()</marker> = #{onoff := <seetype marker="erlang#boolean">boolean()</seetype>, linger := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</typehead></typedecl>
</type>
<type>
  <name>msg</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-msg">msg()</marker> = <seetype marker="#msg_send">msg_send()</seetype> | <seetype marker="#msg_recv">msg_recv()</seetype></typehead></typedecl>
</type>
<type>
  <name>msg_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-msg_flag">msg_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>cmsg_cloexec | confirm | ctrunc | dontroute | eor | errqueue |<br/><nbsp/><nbsp/><nbsp/><nbsp/>more | oob | peek | trunc</typehead></typedecl>
</type>
<type>
  <name>msg_recv</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-msg_recv">msg_recv()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{addr =&gt; <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>iov := <seetype marker="erlang#iovec">erlang:iovec()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ctrl :=<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="#cmsg_recv">cmsg_recv()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := <seetype marker="#level">level()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>flags := [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]}</typehead></typedecl>
</type>
<type>
  <name>msg_send</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-msg_send">msg_send()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{addr =&gt; <seetype marker="#sockaddr">sockaddr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>iov := <seetype marker="erlang#iovec">erlang:iovec()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ctrl =&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="#cmsg_send">cmsg_send()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#{level := <seetype marker="#level">level()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>}]}</typehead></typedecl>
</type>
<type>
  <name>native_value</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-native_value">native_value()</marker> = <seetype marker="erlang#integer">integer()</seetype> | <seetype marker="erlang#boolean">boolean()</seetype> | <seetype marker="erlang#binary">binary()</seetype></typehead></typedecl>
</type>
<type>
  <name>otp_socket_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-otp_socket_option">otp_socket_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>debug | iow | controlling_process | rcvbuf | rcvctrlbuf |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sndctrlbuf | meta | use_registry | fd | domain</typehead></typedecl>
</type>
<type>
  <name>packet_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-packet_type">packet_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>host | broadcast | multicast | otherhost | outgoing |<br/><nbsp/><nbsp/><nbsp/><nbsp/>loopback | user | kernel | fastroute |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></typehead></typedecl>
</type>
<type>
  <name>port_number</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-port_number">port_number()</marker> = 0..65535</typehead></typedecl>
</type>
<type>
  <name>posix</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-posix">posix()</marker> = <seetype marker="inet#posix">inet:posix()</seetype></typehead></typedecl>
</type>
<type>
  <name>protocol</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-protocol">protocol()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>sctp_assocparams</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sctp_assocparams">sctp_assocparams()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{assoc_id := <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>asocmaxrxt := 0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>numbe_peer_destinations := 0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>peer_rwnd := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>local_rwnd := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cookie_life := 0..4294967295}</typehead></typedecl>
</type>
<type>
  <name>sctp_event_subscribe</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sctp_event_subscribe">sctp_event_subscribe()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{data_io := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>association := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>address := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>send_failure := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>peer_error := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shutdown := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>partial_delivery := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>adaptation_layer =&gt; <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sender_dry =&gt; <seetype marker="erlang#boolean">boolean()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sctp_initmsg</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sctp_initmsg">sctp_initmsg()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{num_ostreams := 0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>max_instreams := 0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>max_attempts := 0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>max_init_timeo := 0..65535}</typehead></typedecl>
</type>
<type>
  <name>sctp_rtoinfo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sctp_rtoinfo">sctp_rtoinfo()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{assoc_id := <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>initial := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>max := 0..4294967295,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>min := 0..4294967295}</typehead></typedecl>
</type>
<type>
  <name>select_handle</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-select_handle">select_handle()</marker> = <seetype marker="erlang#reference">reference()</seetype></typehead></typedecl>
</type>
<type>
  <name>select_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-select_info">select_info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{select_info,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SelectTag :: <seetype marker="#select_tag">select_tag()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>}</typehead></typedecl>
  <anno>SelectHandle</anno>
  <anno>SelectTag</anno>
</type>
<type>
  <name>select_tag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-select_tag">select_tag()</marker></typehead></typedecl>
</type>
<type>
  <name>sockaddr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr">sockaddr()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_in">sockaddr_in()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_in6">sockaddr_in6()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_un">sockaddr_un()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_ll">sockaddr_ll()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_dl">sockaddr_dl()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_unspec">sockaddr_unspec()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#sockaddr_native">sockaddr_native()</seetype></typehead></typedecl>
</type>
<type>
  <name>sockaddr_dl</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_dl">sockaddr_dl()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{family := link,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>index := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>nlen := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>alen := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>slen := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data := <seetype marker="erlang#binary">binary()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sockaddr_in</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_in">sockaddr_in()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{family := inet,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>port := <seetype marker="#port_number">port_number()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>addr := any | broadcast | loopback | <seetype marker="#in_addr">in_addr()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sockaddr_in6</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_in6">sockaddr_in6()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{family := inet6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>port := <seetype marker="#port_number">port_number()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>addr := any | loopback | <seetype marker="#in6_addr">in6_addr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>flowinfo := <seetype marker="#in6_flow_info">in6_flow_info()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>scope_id := <seetype marker="#in6_scope_id">in6_scope_id()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sockaddr_ll</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_ll">sockaddr_ll()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{family := packet,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>protocol := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ifindex := <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pkttype := <seetype marker="#packet_type">packet_type()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>hatype := <seetype marker="#hatype">hatype()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>addr := <seetype marker="erlang#binary">binary()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sockaddr_native</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_native">sockaddr_native()</marker> = #{family := <seetype marker="erlang#integer">integer()</seetype>, addr := <seetype marker="erlang#binary">binary()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sockaddr_recv</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_recv">sockaddr_recv()</marker> = <seetype marker="#sockaddr">sockaddr()</seetype> | <seetype marker="erlang#binary">binary()</seetype></typehead></typedecl>
</type>
<type>
  <name>sockaddr_un</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_un">sockaddr_un()</marker> = #{family := local, path := <seetype marker="erlang#binary">binary()</seetype> | <seetype marker="erlang#string">string()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>sockaddr_unspec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sockaddr_unspec">sockaddr_unspec()</marker> = #{family := unspec, addr := <seetype marker="erlang#binary">binary()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>socket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket">socket()</marker> = {'$socket', <seetype marker="#socket_handle">socket_handle()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>socket_counters</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_counters">socket_counters()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{read_byte := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>read_fails := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>read_pkg := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>read_pkg_max := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>read_tries := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>read_waits := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>write_byte := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>write_fails := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>write_pkg := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>write_pkg_max := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>write_tries := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>write_waits := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_byte =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_fails =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_max =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_pkg =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_pkg_max =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_tries =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sendfile_waits =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>acc_success := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>acc_fails := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>acc_tries := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>acc_waits := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</typehead></typedecl>
</type>
<type>
  <name>socket_handle</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_handle">socket_handle()</marker></typehead></typedecl>
</type>
<type>
  <name>socket_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_info">socket_info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{domain := <seetype marker="#domain">domain()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type := <seetype marker="#type">type()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>protocol := <seetype marker="#protocol">protocol()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>owner := <seetype marker="erlang#pid">pid()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ctype := normal | fromfd | {fromfd, <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>counters := <seetype marker="#socket_counters">socket_counters()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>num_readers := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>num_writers := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>num_acceptors := <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>writable := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>readable := <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>rstates := [<seetype marker="erlang#atom">atom()</seetype>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>wstates := [<seetype marker="erlang#atom">atom()</seetype>]}</typehead></typedecl>
</type>
<type>
  <name>socket_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_option">socket_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: socket,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opt ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>acceptconn | acceptfilter | bindtodevice | broadcast |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>busy_poll | debug | domain | dontroute | error |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>keepalive | linger | mark | oobinline | passcred |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>peek_off | peercred | priority | protocol | rcvbuf |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>rcvbufforce | rcvlowat | rcvtimeo | reuseaddr |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>reuseport | rxq_ovfl | setfib | sndbuf | sndbufforce |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sndlowat | sndtimeo | timestamp | type} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: ip,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opt ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>add_membership | add_source_membership | block_source |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dontfrag | drop_membership | drop_source_membership |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>freebind | hdrincl | minttl | msfilter | mtu |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mtu_discover | multicast_all | multicast_if |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>multicast_loop | multicast_ttl | nodefrag | options |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pktinfo | recvdstaddr | recverr | recvif | recvopts |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>recvorigdstaddr | recvtos | recvttl | retopts |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>router_alert | sndsrcaddr | tos | transparent | ttl |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>unblock_source} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: ipv6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opt ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>addrform | add_membership | authhdr | auth_level |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>checksum | drop_membership | dstopts | esp_trans_level |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>esp_network_level | faith | flowinfo | hopopts |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ipcomp_level | join_group | leave_group | mtu |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mtu_discover | multicast_hops | multicast_if |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>multicast_loop | portrange | pktoptions | recverr |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>recvhoplimit | hoplimit | recvpktinfo | pktinfo |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>recvtclass | router_alert | rthdr | tclass |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>unicast_hops | use_min_mtu | v6only} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: tcp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opt ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>congestion | cork | info | keepcnt | keepidle |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>keepintvl | maxseg | md5sig | nodelay | noopt | nopush |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>syncnt | user_timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: udp, Opt :: cork} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: sctp,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opt ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>adaption_layer | associnfo | auth_active_key |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>auth_asconf | auth_chunk | auth_key | auth_delete_key |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>autoclose | context | default_send_params |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>delayed_ack_time | disable_fragments | hmac_ident |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>events | explicit_eor | fragment_interleave |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>get_peer_addr_info | initmsg | i_want_mapped_v4_addr |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>local_auth_chunks | maxseg | maxburst | nodelay |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>partial_delivery_point | peer_addr_params |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>peer_auth_chunks | primary_addr | reset_streams |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>rtoinfo | set_peer_primary_addr | status |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>use_ext_recvinfo}</typehead></typedecl>
  <anno>Level</anno>
  <anno>Opt</anno>
</type>
<type>
  <name>timeval</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timeval">timeval()</marker> = #{sec := <seetype marker="erlang#integer">integer()</seetype>, usec := <seetype marker="erlang#integer">integer()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-type">type()</marker> = stream | dgram | raw | rdm | seqpacket</typehead></typedecl>
</type>
<spec>
  <name>accept</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket, Timeout :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>bind</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bind(Socket, Addr) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Addr</typename><string>Addr = <seetype marker="#sockaddr">sockaddr()</seetype> | any | broadcast | loopback</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>bind</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bind(Socket, Addrs, Action) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Addrs</typename><string>Addrs = [<seetype marker="#sockaddr">sockaddr()</seetype>]</string></subtype>
        <subtype><typename>Action</typename><string>Action = add | remove</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>Action</anno>
  <anno>Addrs</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>cancel</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cancel(Socket, SelectInfo) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>cancel_monitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cancel_monitor(MRef) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>MRef</typename><string>MRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>MRef</anno>
</spec>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(Socket) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>connect(Socket) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>connect(Socket, SockAddr) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | already</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Socket, SockAddr, Timeout :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | already</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SelectInfo</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Socket, SockAddr, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | already</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Socket, SockAddr, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | already</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Socket, SockAddr, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | already | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>debug</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>debug(D :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>D</anno>
</spec>
<spec>
  <name>getopt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getopt(X1 :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption :: {Level :: otp, Opt :: <seetype marker="#otp_socket_option">otp_socket_option()</seetype>}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="erlang#term">term()</seetype>} | {error, <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>Opt</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>getopt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getopt(X1 :: <seetype marker="#socket">socket()</seetype>, SocketOption :: <seetype marker="#socket_option">socket_option()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>SocketOption</anno>
  <anno>Value</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>getopt</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>getopt_native</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getopt_native(X1 :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#socket_option">socket_option()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: <seetype marker="#level">level()</seetype> | (NativeLevel :: <seetype marker="erlang#integer">integer()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NativeOpt :: <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueType :: integer) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="erlang#integer">integer()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>NativeLevel</anno>
  <anno>NativeOpt</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
  <anno>ValueType</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>getopt_native</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getopt_native(X1 :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#socket_option">socket_option()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: <seetype marker="#level">level()</seetype> | (NativeLevel :: <seetype marker="erlang#integer">integer()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NativeOpt :: <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueType :: boolean) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>NativeLevel</anno>
  <anno>NativeOpt</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
  <anno>ValueType</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>getopt_native</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getopt_native(X1 :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#socket_option">socket_option()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: <seetype marker="#level">level()</seetype> | (NativeLevel :: <seetype marker="erlang#integer">integer()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NativeOpt :: <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueSize :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>NativeLevel</anno>
  <anno>NativeOpt</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
  <anno>ValueSize</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>getopt_native</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getopt_native(X1 :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#socket_option">socket_option()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: <seetype marker="#level">level()</seetype> | (NativeLevel :: <seetype marker="erlang#integer">integer()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NativeOpt :: <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueSpec :: <seetype marker="erlang#binary">binary()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>NativeLevel</anno>
  <anno>NativeOpt</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
  <anno>ValueSpec</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>i</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>i() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(InfoKeys) -&gt; ok</head>
      <guard>
        <subtype><typename>InfoKeys</typename><string>InfoKeys = <seetype marker="#info_keys">info_keys()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoKeys</anno>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(Domain) -&gt; ok</head>
      <guard>
        <subtype><typename>Domain</typename><string>Domain = inet | inet6 | local</string></subtype>
      </guard></clause>
  </contract>
  <anno>Domain</anno>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(Proto) -&gt; ok</head>
      <guard>
        <subtype><typename>Proto</typename><string>Proto = sctp | tcp | udp</string></subtype>
      </guard></clause>
  </contract>
  <anno>Proto</anno>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(Type) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = dgram | seqpacket | stream</string></subtype>
      </guard></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>i(Domain, InfoKeys) -&gt; ok</head>
      <guard>
        <subtype><typename>Domain</typename><string>Domain = inet | inet6 | local</string></subtype>
        <subtype><typename>InfoKeys</typename><string>InfoKeys = <seetype marker="#info_keys">info_keys()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Domain</anno>
  <anno>InfoKeys</anno>
</spec>
<spec>
  <name>i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>i(Proto, InfoKeys) -&gt; ok</head>
      <guard>
        <subtype><typename>Proto</typename><string>Proto = sctp | tcp | udp</string></subtype>
        <subtype><typename>InfoKeys</typename><string>InfoKeys = <seetype marker="#info_keys">info_keys()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoKeys</anno>
  <anno>Proto</anno>
</spec>
<spec>
  <name>i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>i(Type, InfoKeys) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = dgram | seqpacket | stream</string></subtype>
        <subtype><typename>InfoKeys</typename><string>InfoKeys = <seetype marker="#info_keys">info_keys()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoKeys</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>info</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>info() -&gt; <seetype marker="#info">info()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info(Socket) -&gt; <seetype marker="#socket_info">socket_info()</seetype></head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>ioctl</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ioctl(Socket, GetRequest) -&gt; {ok, IFConf} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>GetRequest</typename><string>GetRequest = gifconf</string></subtype>
        <subtype><typename>IFConf</typename><string>IFConf = [#{name := string, addr := <seetype marker="#sockaddr">sockaddr()</seetype>}]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>GetRequest</anno>
  <anno>IFConf</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>ioctl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ioctl(Socket, GetRequest, NameOrIndex) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Result} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>GetRequest</typename><string>GetRequest = <br/><nbsp/><nbsp/><nbsp/><nbsp/>gifname | gifindex | gifaddr | gifdstaddr | gifbrdaddr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>gifnetmask | gifhwaddr | gifmtu | giftxqlen | gifflags</string></subtype>
        <subtype><typename>NameOrIndex</typename><string>NameOrIndex = <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>GetRequest</anno>
  <anno>NameOrIndex</anno>
  <anno>Reason</anno>
  <anno>Result</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>ioctl</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ioctl(Socket, SetRequest, Name, Value) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SetRequest</typename><string>SetRequest = <br/><nbsp/><nbsp/><nbsp/><nbsp/>sifflags | sifaddr | sifdstaddr | sifbrdaddr | sifnetmask |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sifhwaddr | gifmtu | siftxqlen</string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Reason</anno>
  <anno>SetRequest</anno>
  <anno>Socket</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_supported</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_supported(Key1 :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Key1</anno>
</spec>
<spec>
  <name>is_supported</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_supported(Key1 :: <seetype marker="erlang#term">term()</seetype>, Key2 :: <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
</spec>
<spec>
  <name>is_supported</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>listen</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>listen(Socket) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>listen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>listen(Socket, Backlog) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Backlog</typename><string>Backlog = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>Backlog</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>monitor(Socket) -&gt; <seetype marker="erlang#reference">reference()</seetype></head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>monitored_by</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>monitored_by(Socket) -&gt; [<seetype marker="erlang#reference">reference()</seetype>]</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>number_of</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>number_of() -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>number_of_monitors</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>number_of_monitors() -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>number_of_monitors</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>number_of_monitors(Pid :: <seetype marker="erlang#pid">pid()</seetype>) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>open</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>open(FD) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>FD</typename><string>FD = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | domain | type | protocol</string></subtype>
      </guard></clause>
  </contract>
  <anno>FD</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>open</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>open(FD, Opts) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>FD</typename><string>FD = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{domain =&gt; <seetype marker="#domain">domain()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type =&gt; <seetype marker="#type">type()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>protocol =&gt; default | <seetype marker="#protocol">protocol()</seetype> | <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dup =&gt; <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>debug =&gt; <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>use_registry =&gt; <seetype marker="erlang#boolean">boolean()</seetype>}</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | domain | type | protocol</string></subtype>
      </guard></clause>
  </contract>
  <anno>FD</anno>
  <anno>Opts</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>open</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>open(Domain, Type) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Domain</typename><string>Domain = <seetype marker="#domain">domain()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | protocol</string></subtype>
      </guard></clause>
  </contract>
  <anno>Domain</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>open</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>open(Domain, Type, Opts) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Domain</typename><string>Domain = <seetype marker="#domain">domain()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = <seetype marker="erlang#map">map()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | protocol</string></subtype>
      </guard></clause>
  </contract>
  <anno>Domain</anno>
  <anno>Opts</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>open</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>open(Domain, Type, Protocol) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Domain</typename><string>Domain = <seetype marker="#domain">domain()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Protocol</typename><string>Protocol = default | <seetype marker="#protocol">protocol()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | protocol</string></subtype>
      </guard></clause>
  </contract>
  <anno>Domain</anno>
  <anno>Protocol</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>open</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>open(Domain, Type, Protocol, Opts) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Domain</typename><string>Domain = <seetype marker="#domain">domain()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Protocol</typename><string>Protocol = default | <seetype marker="#protocol">protocol()</seetype> | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{netns =&gt; <seetype marker="erlang#string">string()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>debug =&gt; <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>use_registry =&gt; <seetype marker="erlang#boolean">boolean()</seetype>}</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | protocol</string></subtype>
      </guard></clause>
  </contract>
  <anno>Domain</anno>
  <anno>Opts</anno>
  <anno>Protocol</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>peername</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>peername(Socket) -&gt; {ok, SockAddr} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>recv(Socket) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recv(Socket, Flags) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Flags) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Data} | {error, Reason} | {error, {Reason, Data}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Length</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket) -&gt; {ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, Flags) -&gt; {ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz) -&gt; {ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Flags) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvfrom</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvfrom(Socket, BufSz, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {Source, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Source</typename><string>Source = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Source</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket) -&gt; {ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Flags) -&gt; {ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Timeout :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Flags, Timeout :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz) -&gt; {ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, Flags,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {select, SelectInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>recvmsg</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>recvmsg(Socket, BufSz, CtrlSz, Flags,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Msg} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>BufSz</typename><string>BufSz = CtrlSz = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>CtrlSz</typename><string/></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_recv">msg_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype> | timeout</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSz</anno>
  <anno>CtrlSz</anno>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(Socket, Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Flags) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Cont) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Cont, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Cont, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Cont, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Data, Cont, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>sendfile</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>sendfile</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, Cont, Offset, Count, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, BytesSent}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Cont</anno>
  <anno>Count</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, Cont, Offset, Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, BytesSent}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Cont</anno>
  <anno>Count</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, Cont, Offset, Count, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, BytesSent}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Cont</anno>
  <anno>Count</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, Cont, Offset, Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, BytesSent}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Cont</anno>
  <anno>Count</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, FileHandle, Offset, Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, BytesSent}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>FileHandle</typename><string>FileHandle = <seetype marker="file#fd">file:fd()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Count</anno>
  <anno>FileHandle</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, FileHandle, Offset, Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, BytesSent}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>FileHandle</typename><string>FileHandle = <seetype marker="file#fd">file:fd()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Count</anno>
  <anno>FileHandle</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, FileHandle, Offset, Count, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, BytesSent}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>FileHandle</typename><string>FileHandle = <seetype marker="file#fd">file:fd()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Count</anno>
  <anno>FileHandle</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendfile</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendfile(Socket, FileHandle, Offset, Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, BytesSent} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, BytesSent}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>FileHandle</typename><string>FileHandle = <seetype marker="file#fd">file:fd()</seetype></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Count</typename><string>Count = BytesSent = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>BytesSent</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesSent</anno>
  <anno>Count</anno>
  <anno>FileHandle</anno>
  <anno>Offset</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Flags) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Data, Cont) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Timeout :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Msg, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="#msg_send">msg_send()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Msg</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Data, Cont, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="#msg_send">msg_send()</seetype> | <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Data, Cont, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="#msg_send">msg_send()</seetype> | <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Data, Cont, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="#msg_send">msg_send()</seetype> | <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendmsg</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendmsg(Socket, Data, Cont, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="#msg_send">msg_send()</seetype> | <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#iovec">erlang:iovec()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Cont) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Flags) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Cont, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Cont, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Cont, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Cont, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Cont</typename><string>Cont = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cont</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Flags, SelectHandle :: nowait) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Flags, SelectHandle :: <seetype marker="#select_handle">select_handle()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, SelectInfo} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{select, {SelectInfo, RestData}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>SelectInfo</typename><string>SelectInfo = <seetype marker="#select_info">select_info()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>SelectHandle</anno>
  <anno>SelectInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Flags, Timeout :: infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>sendto</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>sendto(Socket, Data, Dest, Flags, Timeout :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason | timeout} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {Reason | timeout, RestData}}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Data</typename><string>Data = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Dest</typename><string>Dest = <seetype marker="#sockaddr">sockaddr()</seetype></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = [<seetype marker="#msg_flag">msg_flag()</seetype> | <seetype marker="erlang#integer">integer()</seetype>]</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed | <seetype marker="#invalid">invalid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Dest</anno>
  <anno>Flags</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>setopt</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>setopt(Socket :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption :: {Level :: otp, Opt :: <seetype marker="#otp_socket_option">otp_socket_option()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>Opt</anno>
  <anno>Socket</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>setopt</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>setopt(Socket :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption :: <seetype marker="#socket_option">socket_option()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Socket</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>setopt</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>setopt_native</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>setopt_native(Socket :: <seetype marker="#socket">socket()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SocketOption ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#socket_option">socket_option()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Level :: <seetype marker="#level">level()</seetype> | (NativeLevel :: <seetype marker="erlang#integer">integer()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NativeOpt :: <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seetype marker="#native_value">native_value()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seetype marker="#posix">posix()</seetype> | <seetype marker="#invalid">invalid()</seetype> | closed}</head></clause>
  </contract>
  <anno>Level</anno>
  <anno>NativeLevel</anno>
  <anno>NativeOpt</anno>
  <anno>Socket</anno>
  <anno>SocketOption</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>shutdown</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>shutdown(Socket, How) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>How</typename><string>How = read | write | read_write</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>How</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>socket_debug</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>socket_debug(D :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>D</anno>
</spec>
<spec>
  <name>sockname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sockname(Socket) -&gt; {ok, SockAddr} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="#sockaddr_recv">sockaddr_recv()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="#posix">posix()</seetype> | closed</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>supports</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>supports() -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Key1 :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Key2 :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype> | [{Key3 :: <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#boolean">boolean()</seetype>}]}]}]</head></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
  <anno>Key3</anno>
</spec>
<spec>
  <name>supports</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>supports(Key1 :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Key2 :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#boolean">boolean()</seetype> | [{Key3 :: <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#boolean">boolean()</seetype>}]}]</head></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
  <anno>Key3</anno>
</spec>
<spec>
  <name>supports</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>supports(Key1 :: <seetype marker="erlang#term">term()</seetype>, Key2 :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Key3 :: <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#boolean">boolean()</seetype>}]</head></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
  <anno>Key3</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Socket) -&gt; <seetype marker="erlang#list">list()</seetype></head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>use_registry</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>use_registry(D :: <seetype marker="erlang#boolean">boolean()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>D</anno>
</spec>
<spec>
  <name>which_monitors</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_monitors(Pid) -&gt; [<seetype marker="erlang#reference">reference()</seetype>]</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>which_monitors</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_monitors(Socket) -&gt; [<seetype marker="erlang#reference">reference()</seetype>]</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>which_socket_kind</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_socket_kind(Socket :: <seetype marker="#socket">socket()</seetype>) -&gt; plain | compat</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>which_sockets</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>which_sockets() -&gt; [<seetype marker="#socket">socket()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>which_sockets</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_sockets(FilterRule) -&gt; [<seetype marker="#socket">socket()</seetype>]</head>
      <guard>
        <subtype><typename>FilterRule</typename><string>FilterRule = <br/><nbsp/><nbsp/><nbsp/><nbsp/>inet | inet6 | local | stream | dgram | seqpacket | sctp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>tcp | udp |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="#socket_info">socket_info()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype>)</string></subtype>
      </guard></clause>
  </contract>
  <anno>FilterRule</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:36.</timestamp>
</module>