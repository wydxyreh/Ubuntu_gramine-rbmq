<module name="global_group">
<type>
  <name>group_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-group_name">group_name()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>group_tuple</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-group_tuple">group_tuple()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{GroupName :: <seetype marker="#group_name">group_name()</seetype>, [<seetype marker="erlang#node">node()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{GroupName :: <seetype marker="#group_name">group_name()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>PublishType :: <seetype marker="#publish_type">publish_type()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="erlang#node">node()</seetype>]}</typehead></typedecl>
  <anno>GroupName</anno>
  <anno>PublishType</anno>
</type>
<type>
  <name>info_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_item">info_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{state, State :: <seetype marker="#sync_state">sync_state()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{own_group_name, GroupName :: <seetype marker="#group_name">group_name()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{own_group_nodes, Nodes :: [<seetype marker="erlang#node">node()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{synched_nodes, Nodes :: [<seetype marker="erlang#node">node()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sync_error, Nodes :: [<seetype marker="erlang#node">node()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{no_contact, Nodes :: [<seetype marker="erlang#node">node()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{other_groups, Groups :: [<seetype marker="#group_tuple">group_tuple()</seetype>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitoring, Pids :: [<seetype marker="erlang#pid">pid()</seetype>]}</typehead></typedecl>
  <anno>GroupName</anno>
  <anno>Groups</anno>
  <anno>Nodes</anno>
  <anno>Pids</anno>
  <anno>State</anno>
</type>
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>publish_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-publish_type">publish_type()</marker> = hidden | normal</typehead></typedecl>
</type>
<type>
  <name>sync_state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sync_state">sync_state()</marker> = no_conf | synced</typehead></typedecl>
</type>
<type>
  <name>where</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-where">where()</marker> = {node, <seetype marker="erlang#node">node()</seetype>} | {group, <seetype marker="#group_name">group_name()</seetype>}</typehead></typedecl>
</type>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>config_scan</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>config_scan</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>get_own_nodes</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>get_own_nodes_with_errors</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>global_groups</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>global_groups() -&gt; {GroupName, GroupNames} | undefined</head>
      <guard>
        <subtype><typename>GroupName</typename><string>GroupName = <seetype marker="#group_name">group_name()</seetype></string></subtype>
        <subtype><typename>GroupNames</typename><string>GroupNames = [GroupName]</string></subtype>
      </guard></clause>
  </contract>
  <anno>GroupName</anno>
  <anno>GroupNames</anno>
</spec>
<spec>
  <name>global_groups_added</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>global_groups_changed</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>global_groups_removed</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>info</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>info() -&gt; [<seetype marker="#info_item">info_item()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>monitor_nodes</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>monitor_nodes(Flag) -&gt; ok</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
</spec>
<spec>
  <name>ng_add_check</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>ng_add_check</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>own_nodes</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>own_nodes() -&gt; Nodes</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [Node :: <seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>publish_on_nodes</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>registered_names</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>registered_names(Where) -&gt; Names</head>
      <guard>
        <subtype><typename>Where</typename><string>Where = <seetype marker="#where">where()</seetype></string></subtype>
        <subtype><typename>Names</typename><string>Names = [Name :: <seetype marker="#name">name()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Names</anno>
  <anno>Where</anno>
</spec>
<spec>
  <name>registered_names_test</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(Name, Msg) -&gt; <seetype marker="erlang#pid">pid()</seetype> | {badarg, {Name, Msg}}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Where, Name, Msg) -&gt; <seetype marker="erlang#pid">pid()</seetype> | {badarg, {Name, Msg}}</head>
      <guard>
        <subtype><typename>Where</typename><string>Where = <seetype marker="#where">where()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Name</anno>
  <anno>Where</anno>
</spec>
<spec>
  <name>send_test</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>sync</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>sync() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>sync_init</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>sync_init(Type :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Cname :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>PubType :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Nodes :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
  <anno>Cname</anno>
  <anno>Nodes</anno>
  <anno>PubType</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>whereis_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>whereis_name(Name) -&gt; <seetype marker="erlang#pid">pid()</seetype> | undefined</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>whereis_name</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>whereis_name(Where, Name) -&gt; <seetype marker="erlang#pid">pid()</seetype> | undefined</head>
      <guard>
        <subtype><typename>Where</typename><string>Where = <seetype marker="#where">where()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Where</anno>
</spec>
<spec>
  <name>whereis_name_test</name>
  <arity>1</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:34.</timestamp>
</module>