<module name="gen_tcp">
<type>
  <name>connect_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-connect_option">connect_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{fd, Fd :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="inet#address_family">inet:address_family()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ifaddr,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="socket#sockaddr_in">socket:sockaddr_in()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="socket#sockaddr_in6">socket:sockaddr_in6()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="inet#socket_address">inet:socket_address()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ip, <seetype marker="inet#socket_address">inet:socket_address()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{port, <seetype marker="inet#port_number">inet:port_number()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tcp_module, <seetype marker="erlang#module">module()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{netns, <seetype marker="file#filename_all">file:filename_all()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bind_to_device, <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#option">option()</seetype></typehead></typedecl>
  <anno>Fd</anno>
</type>
<type>
  <name>listen_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-listen_option">listen_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{fd, Fd :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="inet#address_family">inet:address_family()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ifaddr,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="socket#sockaddr_in">socket:sockaddr_in()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="socket#sockaddr_in6">socket:sockaddr_in6()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="inet#socket_address">inet:socket_address()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ip, <seetype marker="inet#socket_address">inet:socket_address()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{port, <seetype marker="inet#port_number">inet:port_number()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{backlog, B :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tcp_module, <seetype marker="erlang#module">module()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{netns, <seetype marker="file#filename_all">file:filename_all()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bind_to_device, <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#option">option()</seetype></typehead></typedecl>
  <anno>B</anno>
  <anno>Fd</anno>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{active, true | false | once | -32768..32767} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{buffer, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{delay_send, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{deliver, port | term} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dontroute, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{exit_on_close, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{header, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{high_msgq_watermark, <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{high_watermark, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keepalive, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{linger, {<seetype marker="erlang#boolean">boolean()</seetype>, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{low_msgq_watermark, <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{low_watermark, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mode, list | binary} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>list | binary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{nodelay, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0 | 1 | 2 | 4 | raw | sunrm | asn1 | cdr | fcgi | line |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>tpkt | http | httph | http_bin | httph_bin} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet_size, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{raw,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OptionNum :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueBin :: <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{recbuf, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reuseaddr, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{send_timeout, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | infinity} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{send_timeout_close, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{show_econnreset, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sndbuf, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tos, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tclass, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ttl, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{recvtos, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{recvtclass, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{recvttl, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ipv6_v6only, <seetype marker="erlang#boolean">boolean()</seetype>}</typehead></typedecl>
  <anno>OptionNum</anno>
  <anno>Protocol</anno>
  <anno>ValueBin</anno>
</type>
<type>
  <name>option_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option_name">option_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>active | buffer | delay_send | deliver | dontroute |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exit_on_close | header | high_msgq_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>high_watermark | keepalive | linger | low_msgq_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>low_watermark | mode | nodelay | packet | packet_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>priority |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{raw,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OptionNum :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueSpec ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>(ValueSize :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>) | (ValueBin :: <seetype marker="erlang#binary">binary()</seetype>)} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recbuf | reuseaddr | send_timeout | send_timeout_close |<br/><nbsp/><nbsp/><nbsp/><nbsp/>show_econnreset | sndbuf | tos | tclass | ttl | recvtos |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recvtclass | recvttl | pktoptions | ipv6_v6only</typehead></typedecl>
  <anno>OptionNum</anno>
  <anno>Protocol</anno>
  <anno>ValueBin</anno>
  <anno>ValueSize</anno>
  <anno>ValueSpec</anno>
</type>
<type>
  <name>pktoptions_value</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-pktoptions_value">pktoptions_value()</marker> = {pktoptions, <seetype marker="inet#ancillary_data">inet:ancillary_data()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>socket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket">socket()</marker> = <seetype marker="inet#socket">inet:socket()</seetype></typehead></typedecl>
</type>
<spec>
  <name>accept</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | system_limit | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket, Timeout) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="erlang#timeout">timeout()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | timeout | system_limit | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(Socket) -&gt; ok</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>connect(SockAddr, Opts) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="socket#sockaddr_in">socket:sockaddr_in()</seetype> | <seetype marker="socket#sockaddr_in6">socket:sockaddr_in6()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [<seetype marker="inet#inet_backend">inet:inet_backend()</seetype> | <seetype marker="#connect_option">connect_option()</seetype>]</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Opts</anno>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Address, Port, Opts) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = <seetype marker="inet#socket_address">inet:socket_address()</seetype> | <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seetype marker="inet#port_number">inet:port_number()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [<seetype marker="#connect_option">connect_option()</seetype>]</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(SockAddr, Opts, Timeout) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>SockAddr</typename><string>SockAddr = <seetype marker="socket#sockaddr_in">socket:sockaddr_in()</seetype> | <seetype marker="socket#sockaddr_in6">socket:sockaddr_in6()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [<seetype marker="inet#inet_backend">inet:inet_backend()</seetype> | <seetype marker="#connect_option">connect_option()</seetype>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="erlang#timeout">timeout()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Opts</anno>
  <anno>Reason</anno>
  <anno>SockAddr</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>connect(Address, Port, Opts, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = <seetype marker="inet#socket_address">inet:socket_address()</seetype> | <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seetype marker="inet#port_number">inet:port_number()</seetype></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [<seetype marker="inet#inet_backend">inet:inet_backend()</seetype> | <seetype marker="#connect_option">connect_option()</seetype>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="erlang#timeout">timeout()</seetype></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>controlling_process</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | not_owner | badarg | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>fdopen</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>listen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>listen(Port, Options) -&gt; {ok, ListenSocket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seetype marker="inet#port_number">inet:port_number()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="inet#inet_backend">inet:inet_backend()</seetype> | <seetype marker="#listen_option">listen_option()</seetype>]</string></subtype>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = system_limit | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Options</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length) -&gt; {ok, Packet} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Packet</typename><string>Packet = <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype> | HttpPacket</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
        <subtype><typename>HttpPacket</typename><string>HttpPacket = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>HttpPacket</anno>
  <anno>Length</anno>
  <anno>Packet</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Timeout) -&gt; {ok, Packet} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Length</typename><string>Length = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="erlang#timeout">timeout()</seetype></string></subtype>
        <subtype><typename>Packet</typename><string>Packet = <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#binary">binary()</seetype> | HttpPacket</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | timeout | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
        <subtype><typename>HttpPacket</typename><string>HttpPacket = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>HttpPacket</anno>
  <anno>Length</anno>
  <anno>Packet</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(Socket, Packet) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>Packet</typename><string>Packet = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | {timeout, RestData} | <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Packet</anno>
  <anno>Reason</anno>
  <anno>RestData</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>shutdown</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>shutdown(Socket, How) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seetype marker="#socket">socket()</seetype></string></subtype>
        <subtype><typename>How</typename><string>How = read | write | read_write</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="inet#posix">inet:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>How</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>unrecv</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:34.</timestamp>
</module>