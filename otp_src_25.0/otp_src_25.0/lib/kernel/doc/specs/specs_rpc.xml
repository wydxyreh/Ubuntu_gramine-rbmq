<module name="rpc">
<type>
  <name>key</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-key">key()</marker></typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <seetype marker="erlang#map">map()</seetype></typehead></typedecl>
</type>
<spec>
  <name>abcast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>abcast(Name, Msg) -&gt; abcast</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>abcast</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>abcast(Nodes, Name, Msg) -&gt; abcast</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Name</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>async_call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>async_call(Node, Module, Function, Args) -&gt; Key</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Key</typename><string>Key = <seetype marker="#key">key()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Key</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>block_call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>block_call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Res</typename><string>Res = Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>block_call</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>block_call(Node, Module, Function, Args, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Res | {badrpc, Reason}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Res</typename><string>Res = Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string/></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = 0..4294967295 | infinity</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Res</typename><string>Res = Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>call</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>call(Node, Module, Function, Args, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Res | {badrpc, Reason}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Res</typename><string>Res = Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string/></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = 0..4294967295 | infinity</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>cast</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>cast(Node, Module, Function, Args) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(X1 :: <seetype marker="erlang#term">term()</seetype>, S :: <seetype marker="#state">state()</seetype>, X3 :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>S</anno>
  <anno>X1</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>eval_everywhere</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>eval_everywhere(Module, Function, Args) -&gt; abcast</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>eval_everywhere</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>eval_everywhere(Nodes, Module, Function, Args) -&gt; abcast</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>To :: <seetype marker="gen_server#from">gen_server:from()</seetype> | {rex, <seetype marker="erlang#term">term()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="#state">state()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seetype marker="#state">state()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, <seetype marker="erlang#term">term()</seetype>, <seetype marker="#state">state()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{stop, normal, stopped, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>S</anno>
  <anno>To</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: <seetype marker="erlang#term">term()</seetype>, S :: <seetype marker="#state">state()</seetype>) -&gt; {noreply, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>S</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(X1 :: <seetype marker="erlang#term">term()</seetype>, S :: <seetype marker="#state">state()</seetype>) -&gt; {noreply, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>S</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: []) -&gt; {ok, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>multi_server_call</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multi_server_call(Name, Msg) -&gt; {Replies, BadNodes}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Replies</typename><string>Replies = [Reply :: <seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>BadNodes</typename><string>BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>BadNodes</anno>
  <anno>Msg</anno>
  <anno>Name</anno>
  <anno>Replies</anno>
  <anno>Reply</anno>
</spec>
<spec>
  <name>multi_server_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multi_server_call(Nodes, Name, Msg) -&gt; {Replies, BadNodes}</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Replies</typename><string>Replies = [Reply :: <seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>BadNodes</typename><string>BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>BadNodes</anno>
  <anno>Msg</anno>
  <anno>Name</anno>
  <anno>Nodes</anno>
  <anno>Replies</anno>
  <anno>Reply</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multicall(Module, Function, Args) -&gt; {ResL, BadNodes}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>ResL</typename><string>ResL = [Res :: <seetype marker="erlang#term">term()</seetype> | {badrpc, Reason :: <seetype marker="erlang#term">term()</seetype>}]</string></subtype>
        <subtype><typename>BadNodes</typename><string>BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>BadNodes</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>ResL</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multicall(Nodes, Module, Function, Args) -&gt; {ResL, BadNodes}</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>ResL</typename><string>ResL = [Res :: <seetype marker="erlang#term">term()</seetype> | {badrpc, Reason :: <seetype marker="erlang#term">term()</seetype>}]</string></subtype>
        <subtype><typename>BadNodes</typename><string>BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>BadNodes</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Nodes</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>ResL</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multicall(Module, Function, Args, Timeout) -&gt; {ResL, BadNodes}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = 0..4294967295 | infinity</string></subtype>
        <subtype><typename>ResL</typename><string>ResL = [Res :: <seetype marker="erlang#term">term()</seetype> | {badrpc, Reason :: <seetype marker="erlang#term">term()</seetype>}]</string></subtype>
        <subtype><typename>BadNodes</typename><string>BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>BadNodes</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>ResL</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>multicall(Nodes, Module, Function, Args, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ResL, BadNodes}</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = 0..4294967295 | infinity</string></subtype>
        <subtype><typename>ResL</typename><string>ResL = [Res :: <seetype marker="erlang#term">term()</seetype> | {badrpc, Reason :: <seetype marker="erlang#term">term()</seetype>}]</string></subtype>
        <subtype><typename>BadNodes</typename><string>BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>BadNodes</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Nodes</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>ResL</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>nb_yield</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nb_yield(Key) -&gt; {value, Val} | timeout</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = <seetype marker="#key">key()</seetype></string></subtype>
        <subtype><typename>Val</typename><string>Val = (Res :: <seetype marker="erlang#term">term()</seetype>) | {badrpc, Reason :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>nb_yield</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>nb_yield(Key, Timeout) -&gt; {value, Val} | timeout</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = <seetype marker="#key">key()</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = 0..4294967295 | infinity</string></subtype>
        <subtype><typename>Val</typename><string>Val = (Res :: <seetype marker="erlang#term">term()</seetype>) | {badrpc, Reason :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
  <anno>Timeout</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>parallel_eval</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parallel_eval(FuncCalls) -&gt; ResL</head>
      <guard>
        <subtype><typename>FuncCalls</typename><string>FuncCalls = [{Module, Function, Args}]</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = ResL = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>ResL</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>FuncCalls</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>ResL</anno>
</spec>
<spec>
  <name>pinfo</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pinfo(Pid) -&gt; [{Item, Info}] | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Info</typename><string>Info = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Info</anno>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>pinfo</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pinfo(Pid, Item) -&gt; {Item, Info} | undefined | []</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Info</typename><string>Info = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Info</anno>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>pinfo</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pinfo(Pid, ItemList) -&gt; [{Item, Info}] | undefined | []</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>ItemList</typename><string>ItemList = [Item]</string></subtype>
        <subtype><typename>Info</typename><string>Info = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Info</anno>
  <anno>Item</anno>
  <anno>ItemList</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>pmap</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pmap(FuncSpec, ExtraArgs, List1) -&gt; List2</head>
      <guard>
        <subtype><typename>FuncSpec</typename><string>FuncSpec = {Module, Function}</string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>ExtraArgs</typename><string>ExtraArgs = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>List1</typename><string>List1 = [Elem :: <seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>List2</typename><string>List2 = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Elem</anno>
  <anno>ExtraArgs</anno>
  <anno>FuncSpec</anno>
  <anno>Function</anno>
  <anno>List1</anno>
  <anno>List2</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>proxy_user_flush</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>proxy_user_flush() -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>sbcast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sbcast(Name, Msg) -&gt; {GoodNodes, BadNodes}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>GoodNodes</typename><string>GoodNodes = BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>BadNodes</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BadNodes</anno>
  <anno>GoodNodes</anno>
  <anno>Msg</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>sbcast</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sbcast(Nodes, Name, Msg) -&gt; {GoodNodes, BadNodes}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Nodes</typename><string>Nodes = GoodNodes = BadNodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>GoodNodes</typename><string></string></subtype>
        <subtype><typename>BadNodes</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BadNodes</anno>
  <anno>GoodNodes</anno>
  <anno>Msg</anno>
  <anno>Name</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>server_call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>server_call(Node, Name, ReplyWrapper, Msg) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reply | {error, Reason}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>ReplyWrapper</typename><string>ReplyWrapper = Msg = Reply = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Msg</typename><string/></subtype>
        <subtype><typename>Reply</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = nodedown</string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
  <anno>Reply</anno>
  <anno>ReplyWrapper</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; {ok, <seetype marker="erlang#pid">pid()</seetype>} | ignore | {error, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; {ok, <seetype marker="erlang#pid">pid()</seetype>} | ignore | {error, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stop() -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(X1 :: <seetype marker="erlang#term">term()</seetype>, S :: <seetype marker="#state">state()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>S</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>yield</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>yield(Key) -&gt; Res | {badrpc, Reason}</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = <seetype marker="#key">key()</seetype></string></subtype>
        <subtype><typename>Res</typename><string>Res = Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Reason</anno>
  <anno>Res</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:36.</timestamp>
</module>