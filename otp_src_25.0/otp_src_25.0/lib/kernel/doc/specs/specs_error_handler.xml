<module name="error_handler">
<spec>
  <name>breakpoint</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>breakpoint(Module :: <seetype marker="erlang#atom">atom()</seetype>, Function :: <seetype marker="erlang#atom">atom()</seetype>, Args :: [<seetype marker="erlang#term">term()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#any">any()</seetype></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>raise_undef_exception</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>raise_undef_exception(Module, Function, Args) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#list">list()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>stub_function</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>stub_function(Mod :: <seetype marker="erlang#atom">atom()</seetype>, Func :: <seetype marker="erlang#atom">atom()</seetype>, Args :: [<seetype marker="erlang#term">term()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Func</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>undefined_function</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>undefined_function(Module, Function, Args) -&gt; <seetype marker="erlang#any">any()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#list">list()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>undefined_lambda</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>undefined_lambda(Module, Fun, Args) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#list">list()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Fun</anno>
  <anno>Module</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:34.</timestamp>
</module>