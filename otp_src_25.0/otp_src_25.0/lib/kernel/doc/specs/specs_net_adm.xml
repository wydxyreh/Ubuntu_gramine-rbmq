<module name="net_adm">
<type>
  <name>verbosity</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-verbosity">verbosity()</marker> = silent | verbose</typehead></typedecl>
</type>
<spec>
  <name>dns_hostname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dns_hostname(Host) -&gt; {ok, Name} | {error, Host}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>host_file</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>host_file() -&gt; Hosts | {error, Reason}</head>
      <guard>
        <subtype><typename>Hosts</typename><string>Hosts = [Host :: <seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="file#posix">file:posix()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>badarg | terminated | system_limit |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Line :: <seetype marker="erlang#integer">integer()</seetype>, Mod :: <seetype marker="erlang#module">module()</seetype>, Term :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Hosts</anno>
  <anno>Line</anno>
  <anno>Mod</anno>
  <anno>Reason</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>localhost</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>localhost() -&gt; Name</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>names</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>names() -&gt; {ok, [{Name, Port}]} | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = address | <seetype marker="file#posix">file:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>names</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>names(Host) -&gt; {ok, [{Name, Port}]} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#string">string()</seetype> | <seetype marker="inet#ip_address">inet:ip_address()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = address | <seetype marker="file#posix">file:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>ping</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ping(Node) -&gt; pong | pang</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>ping_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ping_list(Nodelist :: [<seetype marker="erlang#atom">atom()</seetype>]) -&gt; [<seetype marker="erlang#atom">atom()</seetype>]</head></clause>
  </contract>
  <anno>Nodelist</anno>
</spec>
<spec>
  <name>world</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>world() -&gt; [<seetype marker="erlang#node">node()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>world</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>world(Arg) -&gt; [<seetype marker="erlang#node">node()</seetype>]</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = <seetype marker="#verbosity">verbosity()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
</spec>
<spec>
  <name>world_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>world_list(Hosts) -&gt; [<seetype marker="erlang#node">node()</seetype>]</head>
      <guard>
        <subtype><typename>Hosts</typename><string>Hosts = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Hosts</anno>
</spec>
<spec>
  <name>world_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>world_list(Hosts, Arg) -&gt; [<seetype marker="erlang#node">node()</seetype>]</head>
      <guard>
        <subtype><typename>Hosts</typename><string>Hosts = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Arg</typename><string>Arg = <seetype marker="#verbosity">verbosity()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>Hosts</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:35.</timestamp>
</module>