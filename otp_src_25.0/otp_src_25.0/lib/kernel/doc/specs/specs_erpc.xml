<module name="erpc">
<type>
  <name>caught_call_exception</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-caught_call_exception">caught_call_exception()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{throw, Throw :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{exit, {exception, Reason :: <seetype marker="erlang#term">term()</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{exception, Reason :: <seetype marker="erlang#term">term()</seetype>, StackTrace :: [<seetype marker="#stack_item">stack_item()</seetype>]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{exit, {signal, Reason :: <seetype marker="erlang#term">term()</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {erpc, Reason :: <seetype marker="erlang#term">term()</seetype>}}</typehead></typedecl>
  <anno>Reason</anno>
  <anno>StackTrace</anno>
  <anno>Throw</anno>
</type>
<type>
  <name>request_id</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-request_id">request_id()</marker></typehead></typedecl>
</type>
<type>
  <name>request_id_collection</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-request_id_collection">request_id_collection()</marker></typehead></typedecl>
</type>
<type>
  <name>stack_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stack_item">stack_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Function :: <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: <seetype marker="erlang#arity">arity()</seetype> | (Args :: [<seetype marker="erlang#term">term()</seetype>]),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Location ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{file, Filename :: <seetype marker="erlang#string">string()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{line, Line :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}]}</typehead></typedecl>
  <anno>Args</anno>
  <anno>Arity</anno>
  <anno>Filename</anno>
  <anno>Function</anno>
  <anno>Line</anno>
  <anno>Location</anno>
  <anno>Module</anno>
</type>
<type>
  <name>timeout_time</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timeout_time">timeout_time()</marker> = 0..4294967295 | infinity | {abs, <seetype marker="erlang#integer">integer()</seetype>}</typehead></typedecl>
</type>
<spec>
  <name>call</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>call(Node, Fun) -&gt; Result</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>call(Node, Fun, Timeout) -&gt; Result</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>call(Node, Module, Function, Args) -&gt; Result</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>call</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>call(Node, Module, Function, Args, Timeout) -&gt; Result</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>call_result</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cast(Node, Fun) -&gt; ok</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>cast</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>cast(Node, Module, Function, Args) -&gt; ok</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>check_response</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>check_response(Message, RequestId) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{response, Result} | no_response</head>
      <guard>
        <subtype><typename>Message</typename><string>Message = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Message</anno>
  <anno>RequestId</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>check_response</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>check_response(Message, RequestIdCollection, Delete) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{{response, Result},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Label, NewRequestIdCollection} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_response | no_request</head>
      <guard>
        <subtype><typename>Message</typename><string>Message = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>RequestIdCollection</typename><string>RequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
        <subtype><typename>Delete</typename><string>Delete = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = Label = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Label</typename><string/></subtype>
        <subtype><typename>NewRequestIdCollection</typename><string>NewRequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Delete</anno>
  <anno>Label</anno>
  <anno>Message</anno>
  <anno>NewRequestIdCollection</anno>
  <anno>RequestIdCollection</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>execute_call</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>execute_call</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>execute_cast</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>is_arg_error</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>multicall</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multicall(Nodes, Fun) -&gt; Result</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Nodes</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multicall(Nodes, Fun, Timeout) -&gt; Result</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Nodes</anno>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multicall(Nodes, Module, Function, Args) -&gt; Result</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{ok, ReturnValue :: <seetype marker="erlang#term">term()</seetype>} | <seetype marker="#caught_call_exception">caught_call_exception()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Nodes</anno>
  <anno>Result</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>multicall</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>multicall(Nodes, Module, Function, Args, Timeout) -&gt; Result</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{ok, ReturnValue :: <seetype marker="erlang#term">term()</seetype>} | <seetype marker="#caught_call_exception">caught_call_exception()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Nodes</anno>
  <anno>Result</anno>
  <anno>ReturnValue</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>multicast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multicast(Nodes, Fun) -&gt; ok</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>multicast</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multicast(Nodes, Module, Function, Args) -&gt; ok</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>receive_response</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_response(RequestId) -&gt; Result</head>
      <guard>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RequestId</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>receive_response</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>receive_response(RequestId, Timeout) -&gt; Result</head>
      <guard>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RequestId</anno>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>receive_response</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>receive_response(RequestIdCollection, Timeout, Delete) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Result, Label, NewRequestIdCollection} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_request</head>
      <guard>
        <subtype><typename>RequestIdCollection</typename><string>RequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Delete</typename><string>Delete = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = Label = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Label</typename><string/></subtype>
        <subtype><typename>NewRequestIdCollection</typename><string>NewRequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Delete</anno>
  <anno>Label</anno>
  <anno>NewRequestIdCollection</anno>
  <anno>RequestIdCollection</anno>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>reqids_add</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>reqids_add(RequestId :: <seetype marker="#request_id">request_id()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Label :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>RequestIdCollection :: <seetype marker="#request_id_collection">request_id_collection()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewRequestIdCollection :: <seetype marker="#request_id_collection">request_id_collection()</seetype></head></clause>
  </contract>
  <anno>Label</anno>
  <anno>NewRequestIdCollection</anno>
  <anno>RequestId</anno>
  <anno>RequestIdCollection</anno>
</spec>
<spec>
  <name>reqids_new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>reqids_new() -&gt; NewRequestIdCollection :: <seetype marker="#request_id_collection">request_id_collection()</seetype></head></clause>
  </contract>
  <anno>NewRequestIdCollection</anno>
</spec>
<spec>
  <name>reqids_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>reqids_size(RequestIdCollection :: <seetype marker="#request_id_collection">request_id_collection()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>RequestIdCollection</anno>
</spec>
<spec>
  <name>reqids_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>reqids_to_list(RequestIdCollection :: <seetype marker="#request_id_collection">request_id_collection()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{RequestId :: <seetype marker="#request_id">request_id()</seetype>, Label :: <seetype marker="erlang#term">term()</seetype>}]</head></clause>
  </contract>
  <anno>Label</anno>
  <anno>RequestId</anno>
  <anno>RequestIdCollection</anno>
</spec>
<spec>
  <name>send_request</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send_request(Node, Fun) -&gt; RequestId</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>RequestId</anno>
</spec>
<spec>
  <name>send_request</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send_request(Node, Module, Function, Args) -&gt; RequestId</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>RequestId</anno>
</spec>
<spec>
  <name>send_request</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send_request(Node, Fun, Label, RequestIdCollection) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewRequestIdCollection</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#function">function()</seetype></string></subtype>
        <subtype><typename>Label</typename><string>Label = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>RequestIdCollection</typename><string>RequestIdCollection = NewRequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
        <subtype><typename>NewRequestIdCollection</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Label</anno>
  <anno>NewRequestIdCollection</anno>
  <anno>Node</anno>
  <anno>RequestIdCollection</anno>
</spec>
<spec>
  <name>send_request</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>send_request(Node, Module, Function, Args, Label,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>RequestIdCollection) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewRequestIdCollection</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = Function = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Label</typename><string>Label = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>RequestIdCollection</typename><string>RequestIdCollection = NewRequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
        <subtype><typename>NewRequestIdCollection</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Label</anno>
  <anno>Module</anno>
  <anno>NewRequestIdCollection</anno>
  <anno>Node</anno>
  <anno>RequestIdCollection</anno>
</spec>
<spec>
  <name>trim_stack</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>wait_response</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>wait_response(RequestId) -&gt; {response, Result} | no_response</head>
      <guard>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RequestId</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>wait_response</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>wait_response(RequestId, WaitTime) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{response, Result} | no_response</head>
      <guard>
        <subtype><typename>RequestId</typename><string>RequestId = <seetype marker="#request_id">request_id()</seetype></string></subtype>
        <subtype><typename>WaitTime</typename><string>WaitTime = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RequestId</anno>
  <anno>Result</anno>
  <anno>WaitTime</anno>
</spec>
<spec>
  <name>wait_response</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>wait_response(RequestIdCollection, WaitTime, Delete) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{{response, Result},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Label, NewRequestIdCollection} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_response | no_request</head>
      <guard>
        <subtype><typename>RequestIdCollection</typename><string>RequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
        <subtype><typename>WaitTime</typename><string>WaitTime = <seetype marker="#timeout_time">timeout_time()</seetype></string></subtype>
        <subtype><typename>Delete</typename><string>Delete = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Label</typename><string>Label = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>NewRequestIdCollection</typename><string>NewRequestIdCollection = <seetype marker="#request_id_collection">request_id_collection()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Delete</anno>
  <anno>Label</anno>
  <anno>NewRequestIdCollection</anno>
  <anno>RequestIdCollection</anno>
  <anno>Result</anno>
  <anno>WaitTime</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:34.</timestamp>
</module>