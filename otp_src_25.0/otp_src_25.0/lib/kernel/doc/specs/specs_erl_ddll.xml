<module name="erl_ddll">
<type>
  <name>driver</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-driver">driver()</marker> = <seetype marker="erlang#iolist">iolist()</seetype> | <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>path</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-path">path()</marker> = <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<spec>
  <name>demonitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>demonitor(MonitorRef) -&gt; ok</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>MonitorRef</anno>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(ErrorDesc) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
</spec>
<spec>
  <name>format_error_int</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error_int(ErrSpec) -&gt; <seetype marker="erlang#string">string()</seetype></head>
      <guard>
        <subtype><typename>ErrSpec</typename><string>ErrSpec = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrSpec</anno>
</spec>
<spec>
  <name>info</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>info() -&gt; AllInfoList</head>
      <guard>
        <subtype><typename>AllInfoList</typename><string>AllInfoList = [DriverInfo]</string></subtype>
        <subtype><typename>DriverInfo</typename><string>DriverInfo = {DriverName, InfoList}</string></subtype>
        <subtype><typename>DriverName</typename><string>DriverName = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>InfoList</typename><string>InfoList = [InfoItem]</string></subtype>
        <subtype><typename>InfoItem</typename><string>InfoItem = {Tag :: <seetype marker="erlang#atom">atom()</seetype>, Value :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>AllInfoList</anno>
  <anno>DriverInfo</anno>
  <anno>DriverName</anno>
  <anno>InfoItem</anno>
  <anno>InfoList</anno>
  <anno>Tag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info(Name) -&gt; InfoList</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>InfoList</typename><string>InfoList = [InfoItem, ...]</string></subtype>
        <subtype><typename>InfoItem</typename><string>InfoItem = {Tag :: <seetype marker="erlang#atom">atom()</seetype>, Value :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoItem</anno>
  <anno>InfoList</anno>
  <anno>Name</anno>
  <anno>Tag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>info(Name, Tag) -&gt; Value</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>Tag</typename><string>Tag = <br/><nbsp/><nbsp/><nbsp/><nbsp/>processes | driver_options | port_count | linked_in_driver |<br/><nbsp/><nbsp/><nbsp/><nbsp/>permanent | awaiting_load | awaiting_unload</string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Tag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>load</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load(Path, Name) -&gt; ok | {error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="#path">path()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
  <anno>Name</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>load_driver</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load_driver(Path, Name) -&gt; ok | {error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="#path">path()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
  <anno>Name</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>loaded_drivers</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>loaded_drivers() -&gt; {ok, Drivers}</head>
      <guard>
        <subtype><typename>Drivers</typename><string>Drivers = [Driver]</string></subtype>
        <subtype><typename>Driver</typename><string>Driver = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Driver</anno>
  <anno>Drivers</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Tag, Item) -&gt; MonitorRef</head>
      <guard>
        <subtype><typename>Tag</typename><string>Tag = driver</string></subtype>
        <subtype><typename>Item</typename><string>Item = {Name, When}</string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>When</typename><string>When = loaded | unloaded | unloaded_only</string></subtype>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Name</anno>
  <anno>Tag</anno>
  <anno>When</anno>
</spec>
<spec>
  <name>reload</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reload(Path, Name) -&gt; ok | {error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="#path">path()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = pending_process | OpaqueError</string></subtype>
        <subtype><typename>OpaqueError</typename><string>OpaqueError = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
  <anno>Name</anno>
  <anno>OpaqueError</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>reload_driver</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reload_driver(Path, Name) -&gt; ok | {error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="#path">path()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = pending_process | OpaqueError</string></subtype>
        <subtype><typename>OpaqueError</typename><string>OpaqueError = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
  <anno>Name</anno>
  <anno>OpaqueError</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; {error, {already_started, undefined}}</head></clause>
  </contract>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stop() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>try_load</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>try_load(Path, Name, OptionList) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Status} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, PendingStatus, Ref} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="#path">path()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{driver_options, DriverOptionList} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitor, MonitorOption} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reload, ReloadOption}</string></subtype>
        <subtype><typename>DriverOptionList</typename><string>DriverOptionList = [DriverOption]</string></subtype>
        <subtype><typename>DriverOption</typename><string>DriverOption = kill_ports</string></subtype>
        <subtype><typename>MonitorOption</typename><string>MonitorOption = ReloadOption = pending_driver | pending</string></subtype>
        <subtype><typename>ReloadOption</typename><string/></subtype>
        <subtype><typename>Status</typename><string>Status = loaded | already_loaded | PendingStatus</string></subtype>
        <subtype><typename>PendingStatus</typename><string>PendingStatus = pending_driver | pending_process</string></subtype>
        <subtype><typename>Ref</typename><string>Ref = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = ErrorAtom | OpaqueError</string></subtype>
        <subtype><typename>ErrorAtom</typename><string>ErrorAtom = <br/><nbsp/><nbsp/><nbsp/><nbsp/>linked_in_driver | inconsistent | permanent |<br/><nbsp/><nbsp/><nbsp/><nbsp/>not_loaded_by_this_process | not_loaded | pending_reload |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pending_process</string></subtype>
        <subtype><typename>OpaqueError</typename><string>OpaqueError = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>DriverOption</anno>
  <anno>DriverOptionList</anno>
  <anno>ErrorAtom</anno>
  <anno>ErrorDesc</anno>
  <anno>MonitorOption</anno>
  <anno>Name</anno>
  <anno>OpaqueError</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Path</anno>
  <anno>PendingStatus</anno>
  <anno>Ref</anno>
  <anno>ReloadOption</anno>
  <anno>Status</anno>
</spec>
<spec>
  <name>try_unload</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>try_unload(Name, OptionList) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Status} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, PendingStatus, Ref} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, ErrorAtom}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {monitor, MonitorOption} | kill_ports</string></subtype>
        <subtype><typename>MonitorOption</typename><string>MonitorOption = pending_driver | pending</string></subtype>
        <subtype><typename>Status</typename><string>Status = unloaded | PendingStatus</string></subtype>
        <subtype><typename>PendingStatus</typename><string>PendingStatus = pending_driver | pending_process</string></subtype>
        <subtype><typename>Ref</typename><string>Ref = <seetype marker="erlang#reference">reference()</seetype></string></subtype>
        <subtype><typename>ErrorAtom</typename><string>ErrorAtom = <br/><nbsp/><nbsp/><nbsp/><nbsp/>linked_in_driver | not_loaded | not_loaded_by_this_process |<br/><nbsp/><nbsp/><nbsp/><nbsp/>permanent</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorAtom</anno>
  <anno>MonitorOption</anno>
  <anno>Name</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>PendingStatus</anno>
  <anno>Ref</anno>
  <anno>Status</anno>
</spec>
<spec>
  <name>unload</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unload(Name) -&gt; ok | {error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>unload_driver</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unload_driver(Name) -&gt; ok | {error, ErrorDesc}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#driver">driver()</seetype></string></subtype>
        <subtype><typename>ErrorDesc</typename><string>ErrorDesc = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDesc</anno>
  <anno>Name</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:33.</timestamp>
</module>