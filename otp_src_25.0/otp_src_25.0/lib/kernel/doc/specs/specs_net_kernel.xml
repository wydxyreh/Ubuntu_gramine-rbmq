<module name="net_kernel">
<type>
  <name>connection_state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-connection_state">connection_state()</marker> = pending | up | up_pending</typehead></typedecl>
</type>
<type>
  <name>connection_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-connection_type">connection_type()</marker> = normal | hidden</typehead></typedecl>
</type>
<type>
  <name>node_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-node_info">node_info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{address, #net_address{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, <seetype marker="#connection_type">connection_type()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{in, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{out, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{owner, <seetype marker="erlang#pid">pid()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{state, <seetype marker="#connection_state">connection_state()</seetype>}</typehead></typedecl>
</type>
<spec>
  <name>allow</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>allow(Nodes) -&gt; ok | error</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>allowed</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>aux_ticker</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>connect_node</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>connect_node(Node) -&gt; <seetype marker="erlang#boolean">boolean()</seetype> | ignored</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>connecttime</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>dflag_unicode_io</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dflag_unicode_io(X1 :: <seetype marker="erlang#pid">pid()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>disconnect</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>dist_listen</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>do_spawn</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>epmd_module</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>get_net_ticktime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_net_ticktime() -&gt; Res</head>
      <guard>
        <subtype><typename>Res</typename><string>Res = NetTicktime | {ongoing_change_to, NetTicktime} | ignored</string></subtype>
        <subtype><typename>NetTicktime</typename><string>NetTicktime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>NetTicktime</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>get_state</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_state() -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#{started =&gt; no | static | dynamic,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>name =&gt; <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>name_type =&gt; static | dynamic,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>name_domain =&gt; shortnames | longnames}</head></clause>
  </contract>
</spec>
<spec>
  <name>getopts</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getopts(Node, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, OptionValues} | {error, Reason} | ignored</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="inet#socket_getopt">inet:socket_getopt()</seetype>]</string></subtype>
        <subtype><typename>OptionValues</typename><string>OptionValues = [<seetype marker="inet#socket_setopt">inet:socket_setopt()</seetype>]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="inet#posix">inet:posix()</seetype> | noconnection</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
  <anno>OptionValues</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>hidden_connect_node</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>i</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>kernel_apply</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>longnames</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>monitor_nodes</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>monitor_nodes(Flag) -&gt; ok | Error</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Error</typename><string>Error = error | {error, <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Flag</anno>
</spec>
<spec>
  <name>monitor_nodes</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor_nodes(Flag, Options) -&gt; ok | Error</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {node_type, NodeType} | nodedown_reason</string></subtype>
        <subtype><typename>NodeType</typename><string>NodeType = visible | hidden | all</string></subtype>
        <subtype><typename>Error</typename><string>Error = error | {error, <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Flag</anno>
  <anno>NodeType</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>node_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>node_info(Node :: <seetype marker="erlang#node">node()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [<seetype marker="#node_info">node_info()</seetype>]} | {error, bad_node}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>node_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>node_info(Node :: <seetype marker="erlang#node">node()</seetype>, Key :: address) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Address} | {error, bad_node}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = #net_address{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Key</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>node_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>node_info(Node :: <seetype marker="erlang#node">node()</seetype>, Key :: type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Type} | {error, bad_node}</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#connection_type">connection_type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Node</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>node_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>node_info(Node :: <seetype marker="erlang#node">node()</seetype>, Key :: in | out) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Bytes} | {error, bad_node}</head>
      <guard>
        <subtype><typename>Bytes</typename><string>Bytes = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Key</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>node_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>node_info(Node :: <seetype marker="erlang#node">node()</seetype>, Key :: owner) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Owner} | {error, bad_node}</head>
      <guard>
        <subtype><typename>Owner</typename><string>Owner = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Node</anno>
  <anno>Owner</anno>
</spec>
<spec>
  <name>node_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>node_info(Node :: <seetype marker="erlang#node">node()</seetype>, Key :: state) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, State} | {error, bad_node}</head>
      <guard>
        <subtype><typename>State</typename><string>State = <seetype marker="#connection_state">connection_state()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Node</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>nodename</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>nodes_info</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nodes_info() -&gt; {ok, [{<seetype marker="erlang#node">node()</seetype>, [<seetype marker="#node_info">node_info()</seetype>]}]}</head></clause>
  </contract>
</spec>
<spec>
  <name>passive_cnct</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>passive_connect_monitor</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>protocol_childspecs</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>publish_on_node</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>set_net_ticktime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>set_net_ticktime(NetTicktime) -&gt; Res</head>
      <guard>
        <subtype><typename>NetTicktime</typename><string>NetTicktime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Res</typename><string>Res = <br/><nbsp/><nbsp/><nbsp/><nbsp/>unchanged | change_initiated |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ongoing_change_to, NewNetTicktime}</string></subtype>
        <subtype><typename>NewNetTicktime</typename><string>NewNetTicktime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>NetTicktime</anno>
  <anno>NewNetTicktime</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>set_net_ticktime</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_net_ticktime(NetTicktime, TransitionPeriod) -&gt; Res</head>
      <guard>
        <subtype><typename>NetTicktime</typename><string>NetTicktime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>TransitionPeriod</typename><string>TransitionPeriod = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Res</typename><string>Res = <br/><nbsp/><nbsp/><nbsp/><nbsp/>unchanged | change_initiated |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ongoing_change_to, NewNetTicktime}</string></subtype>
        <subtype><typename>NewNetTicktime</typename><string>NewNetTicktime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>NetTicktime</anno>
  <anno>NewNetTicktime</anno>
  <anno>Res</anno>
  <anno>TransitionPeriod</anno>
</spec>
<spec>
  <name>setopts</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>setopts(Node, Options) -&gt; ok | {error, Reason} | ignored</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype> | new</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="inet#socket_setopt">inet:socket_setopt()</seetype>]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="inet#posix">inet:posix()</seetype> | noconnection</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>spawn_func</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Options) -&gt; {ok, <seetype marker="erlang#pid">pid()</seetype>} | {error, Reason}</head>
      <guard>
        <subtype><typename>Options</typename><string>Options = [Name | NameDomain | TickTime, ...]</string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>NameDomain</typename><string>NameDomain = shortnames | longnames</string></subtype>
        <subtype><typename>TickTime</typename><string>TickTime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = {already_started, <seetype marker="erlang#pid">pid()</seetype>} | <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>NameDomain</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
  <anno>TickTime</anno>
</spec>
<spec>
  <name>start</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start(Name, Options) -&gt; {ok, <seetype marker="erlang#pid">pid()</seetype>} | {error, Reason}</head>
      <guard>
        <subtype><typename>Options</typename><string>Options = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{name_domain =&gt; NameDomain,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>net_ticktime =&gt; NetTickTime,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>net_tickintensity =&gt; NetTickIntensity}</string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>NameDomain</typename><string>NameDomain = shortnames | longnames</string></subtype>
        <subtype><typename>NetTickTime</typename><string>NetTickTime = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>NetTickIntensity</typename><string>NetTickIntensity = 4..1000</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = {already_started, <seetype marker="erlang#pid">pid()</seetype>} | <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>NameDomain</anno>
  <anno>NetTickIntensity</anno>
  <anno>NetTickTime</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stop() -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = not_allowed | not_found</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>ticker</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>ticker_loop</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>update_publish_nodes</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>verbose</name>
  <arity>1</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:35.</timestamp>
</module>