<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">
<chapter>
<header>
<copyright>
<year>2022</year>
<year>2022</year>
<holder>Ericsson AB. All Rights Reserved.</holder>
</copyright>
<legalnotice>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</legalnotice>

<title>Invariants on the Structure and Format of BEAM SSA</title>
<prepared>emd2exml</prepared>
<responsible>emd2exml</responsible>
<docno>1</docno>
<approved>yes</approved>
<checked>yes</checked>
<date>2022-5-17</date>
<rev>1</rev>
<file>beam_ssa.xml</file>
</header>

<section>
<marker id="Exception-Handling"/>
<title>Exception Handling</title>

<p>
The translation of a <c>try</c>-<c>catch</c> expression into BEAM SSA has the
following structure:
</p>

<code type="none">
@tag = new_try_tag `try`
br @tag, ^protected_block0, ^landing_pad_block

protected_block0:
  @success0 = ... % Something that could raise an exception
  br @success0, ^protected_block1, ^landing_pad_block

...

protected_blockN:
  % The end of the protected code
  @ignored0 = kill_try_tag @tag
  br ^after_try_catch

landing_pad_block:
  @aggregate = landingpad try, @tag
  @class  = extract @aggregate, `0` % The error class
  @reason = extract @aggregate, `1` % The reason
  @stk    = extract @aggregate, `2` % The stack trace
  @ignored1 = kill_try_tag @tag
  %% Pattern matching on @class, @reason, and @stk is done here
  %% to send control to the appropriate catch clause
  br ^after_try_catch

after_try_catch:
  % Normal execution continues
</code>
<p>
The following invariants must hold for the SSA:
</p>

<list type="bulleted"><item>
All code that can cause an exception in one of the protected blocks
must have explicit control flow edges to the landing pad block. If
there are no edges to the landing pad block except from the block
containing the <c>new_try_tag</c>, the compiler will remove the
redundant exception handler.

</item>
<item>
The extraction of the class, reason and stack trace from the result
of the <c>landingpad</c> instruction must be done in that
order. Omitting the extraction of elements which are unused is
allowed.

</item>
<item>
Both the landing pad block and the final protected block must end
with a <c>kill_try_tag</c> instruction. Trying to share the
<c>kill_try_tag</c> epilogue between the last protected block and the
landing pad is unlikely to work.

</item></list>
<p>
The translation of an old-style <c>catch</c> expression into BEAM SSA has
the following structure:
</p>

<code type="none">
@tag = new_try_tag `try`
br @tag, ^protected_block0, ^landing_pad_block

protected_block0:
  @success0 = ... % Something that could raise an exception
  br @success0, ^protected_block1, ^landing_pad_block

...

protected_blockN:
  % The end of the protected code
  @successful_result = .... % The result of a successful computation
  br ^common_end_of_catch

landing_pad_block:
   @aggregate = landingpad catch, @tag
   @catched_val = extract @ssa_agg, `0`
   br ^common_end_of_catch

common_end_of_catch:
  @tmp = phi { @catched_val, ^landing_pad_block },
             { @successful_result, ^protected_blockN }
  @result_of_catch_expr = catch_end @tag, @tmp
</code>
<p>
Just as for a <c>try</c>-<c>catch</c> expression all code that can cause an
exception in one of the protected blocks must have explicit control
flow edges to the landing pad block.
</p>

</section>

<section>
<marker id="Exception-Reissuing"/>
<title>Exception Re-issuing</title>

<p>
A typical user-written <c>try</c>-<c>catch</c> expression will catch a subset of
all possible exception classes and reasons and leave unhandled
exceptions to a handler further up the call stack. Re-issuing an
exception is done with the <c>resume</c> instruction. The <c>resume</c> must
come after the <c>kill_try_tag</c> instruction in the program flow. For
example, if the <seeguide marker="#Exception-Handling">example in the Exception Handling Section</seeguide>
was to only handle user <c>throws</c>, the relevant blocks would look like this:
</p>

<code type="none">
landing_pad_block:
  @aggregate = landingpad `try`, @tag
  @class  = extract @aggregate, `0` % The error class
  @reason = extract @aggregate, `1` % The reason
  @stk    = extract @aggregate, `2` % The stack trace
  @ignored1 = kill_try_tag @tag
  @is_throw = bif:&apos;=:=&apos; @class, `throw`
  br @is_throw ^first_block_of_throw_handler, ^reissue

first_block_of_throw_handler:
  %% Handle the user-defined throw

reissue:
  @tmp = resume @stk, @reason
  ret @tmp
</code>
</section>

<section>
<marker id="Function-Calls"/>
<title>Function Calls</title>

<p>
All function calls not in a tail call position must be followed by a
succeeded:body-instruction unless one of the following exceptions
apply:
</p>

<list type="bulleted"><item>
<p>The function call can statically be proven to always fail.
</p>

</item>
<item>
<p>The function call is to the <c>erlang</c>-module and can statically be
proven to always succeed or fail.
</p>
</item></list>
</section>

<section>
<marker id="Variable-Naming"/>
<title>Variable Naming</title>

<p>
A variable name in BEAM SSA is either an atom, a non-negative integer
or a tuple: <c>atom() | non_neg_integer() | {atom() | non_neg_integer(),
non_neg_integer()}</c>. In order to generate fresh unused variable names,
all compiler transforms maintain a counter, the <c>cnt</c>-field in the
<c>opt_st</c>-record, which is incremented each time a new variable or
label is created. In the following description the value of the
<c>cnt</c>-field is called <c>Cnt</c>.
</p>

<p>
Due to peculiarities in the BEAM SSA code generator, a compiler
transformation unfortunately cannot just use the <c>cnt</c>-value directly
as a fresh name. There are three basic strategies for creating fresh
variable names which can by used by a compiler pass:
</p>

<p>
1) A name can be derived from an existing name of the form <c>V ::
  atom() | non_neg_integer()</c> by selecting an atom, which is unique to
  the compiler pass, to form a new name <c>{A, V}</c>. The same <c>A</c> cannot
  be used by strategy 3) below.
</p>

<p>
2) A name can be derived from an existing name of the form <c>V ::
  non_neg_integer()</c> by combining it with the <c>cnt</c>-field into <c>{V,
  Cnt}</c>.
</p>

<p>
3) A fresh name can be created by selecting an atom <c>A</c>, which is
  unique to the compiler pass, to form the new name <c>{A, Cnt}</c>. The
  same <c>A</c> cannot be used by strategy 1) above.
</p>
</section>

</chapter>

