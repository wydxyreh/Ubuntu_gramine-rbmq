<module name="c">
<type>
  <name>h_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-h_return">h_return()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, missing | {unknown_format, <seetype marker="unicode#chardata">unicode:chardata()</seetype>}}</typehead></typedecl>
</type>
<type>
  <name>hcb_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hcb_return">hcb_return()</marker> = <seetype marker="#h_return">h_return()</seetype> | {error, callback_missing}</typehead></typedecl>
</type>
<type>
  <name>hf_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hf_return">hf_return()</marker> = <seetype marker="#h_return">h_return()</seetype> | {error, function_missing}</typehead></typedecl>
</type>
<type>
  <name>ht_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ht_return">ht_return()</marker> = <seetype marker="#h_return">h_return()</seetype> | {error, type_missing}</typehead></typedecl>
</type>
<spec>
  <name>appcall</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>bi</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>bt</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bt(Pid) -&gt; ok | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>c</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c(Module) -&gt; {ok, ModuleName} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="file#name">file:name()</seetype></string></subtype>
        <subtype><typename>ModuleName</typename><string>ModuleName = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>ModuleName</anno>
</spec>
<spec>
  <name>c</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c(Module, Options) -&gt; {ok, ModuleName} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="file#name">file:name()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="compile#option">compile:option()</seetype>] | <seetype marker="compile#option">compile:option()</seetype></string></subtype>
        <subtype><typename>ModuleName</typename><string>ModuleName = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>ModuleName</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>c</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c(Module, Options, Filter) -&gt; {ok, ModuleName} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seetype marker="compile#option">compile:option()</seetype>]</string></subtype>
        <subtype><typename>Filter</typename><string>Filter = fun((<seetype marker="compile#option">compile:option()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype>)</string></subtype>
        <subtype><typename>ModuleName</typename><string>ModuleName = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filter</anno>
  <anno>Module</anno>
  <anno>ModuleName</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>cd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cd(Dir) -&gt; ok</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seetype marker="file#name">file:name()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>display_info</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>erlangrc</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlangrc() -&gt; {ok, <seetype marker="file#filename">file:filename()</seetype>} | {error, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
</spec>
<spec>
  <name>erlangrc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlangrc(PathList) -&gt; {ok, <seetype marker="file#filename">file:filename()</seetype>} | {error, <seetype marker="erlang#term">term()</seetype>}</head>
      <guard>
        <subtype><typename>PathList</typename><string>PathList = [Dir :: <seetype marker="file#name">file:name()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>PathList</anno>
</spec>
<spec>
  <name>flush</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>flush() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>h</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>h(Module :: <seetype marker="erlang#module">module()</seetype>) -&gt; <seetype marker="#h_return">h_return()</seetype></head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>h</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>h(Module :: <seetype marker="erlang#module">module()</seetype>, Function :: <seetype marker="erlang#function">function()</seetype>) -&gt; <seetype marker="#hf_return">hf_return()</seetype></head></clause>
  </contract>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>h</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>h(Module :: <seetype marker="erlang#module">module()</seetype>, Function :: <seetype marker="erlang#function">function()</seetype>, Arity :: <seetype marker="erlang#arity">arity()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#hf_return">hf_return()</seetype></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>hcb</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>hcb(Module :: <seetype marker="erlang#module">module()</seetype>) -&gt; <seetype marker="#h_return">h_return()</seetype></head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>hcb</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>hcb(Module :: <seetype marker="erlang#module">module()</seetype>, Callback :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="#hcb_return">hcb_return()</seetype></head></clause>
  </contract>
  <anno>Callback</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>hcb</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>hcb(Module :: <seetype marker="erlang#module">module()</seetype>, Callback :: <seetype marker="erlang#atom">atom()</seetype>, Arity :: <seetype marker="erlang#arity">arity()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#hcb_return">hcb_return()</seetype></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Callback</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>help</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>help() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>ht</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ht(Module :: <seetype marker="erlang#module">module()</seetype>) -&gt; <seetype marker="#h_return">h_return()</seetype></head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>ht</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ht(Module :: <seetype marker="erlang#module">module()</seetype>, Type :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="#ht_return">ht_return()</seetype></head></clause>
  </contract>
  <anno>Module</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>ht</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ht(Module :: <seetype marker="erlang#module">module()</seetype>, Type :: <seetype marker="erlang#atom">atom()</seetype>, Arity :: <seetype marker="erlang#arity">arity()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#ht_return">ht_return()</seetype></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Module</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>i</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>i() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(Ps :: [<seetype marker="erlang#pid">pid()</seetype>]) -&gt; ok</head></clause>
  </contract>
  <anno>Ps</anno>
</spec>
<spec>
  <name>i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>i(X, Y, Z) -&gt; [{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}]</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>l</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>l(Module) -&gt; <seetype marker="code#load_ret">code:load_ret()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>lc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lc(Files) -&gt; ok | error</head>
      <guard>
        <subtype><typename>Files</typename><string>Files = [File :: <seetype marker="erl_compile#cmd_line_arg">erl_compile:cmd_line_arg()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Files</anno>
</spec>
<spec>
  <name>lc_batch</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>lc_batch() -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>lc_batch</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lc_batch(Args :: [<seetype marker="erl_compile#cmd_line_arg">erl_compile:cmd_line_arg()</seetype>]) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
  <anno>Args</anno>
</spec>
<spec>
  <name>lm</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>lm() -&gt; [<seetype marker="code#load_ret">code:load_ret()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>ls</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>ls() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>ls</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ls(Dir) -&gt; ok</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seetype marker="file#name">file:name()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>m</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>m() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>m</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>m(Module) -&gt; ok</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>memory() -&gt; [{Type, Size}]</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Size</typename><string>Size = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>memory(Type) -&gt; Size</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Size</typename><string>Size = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>memory(Types) -&gt; [{Type, Size}]</head>
      <guard>
        <subtype><typename>Types</typename><string>Types = [Type]</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Size</typename><string>Size = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Types</anno>
</spec>
<spec>
  <name>mm</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>mm() -&gt; [<seetype marker="erlang#module">module()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>nc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nc(File) -&gt; {ok, Module} | error</head>
      <guard>
        <subtype><typename>File</typename><string>File = <seetype marker="file#name">file:name()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>nc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>nc(File, Options) -&gt; {ok, Module} | error</head>
      <guard>
        <subtype><typename>File</typename><string>File = <seetype marker="file#name">file:name()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option] | Option</string></subtype>
        <subtype><typename>Option</typename><string>Option = <seetype marker="compile#option">compile:option()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>ni</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>ni() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>nl</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nl(Module) -&gt; abcast | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>nregs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nregs() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>pid</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pid(X, Y, Z) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>pwd</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pwd() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>q</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>q() -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>regs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>regs() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>uptime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>uptime() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>xm</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>y</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>y</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:16.</timestamp>
</module>