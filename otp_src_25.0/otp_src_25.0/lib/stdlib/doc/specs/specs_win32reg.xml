<module name="win32reg">
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = <seetype marker="erlang#string">string()</seetype> | default</typehead></typedecl>
</type>
<type>
  <name>reg_handle</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reg_handle">reg_handle()</marker></typehead></typedecl>
</type>
<type>
  <name>value</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-value">value()</marker> = <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#integer">integer()</seetype> | <seetype marker="erlang#binary">binary()</seetype></typehead></typedecl>
</type>
<spec>
  <name>change_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>change_key(RegHandle, Key) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>Key</typename><string>Key = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = ok | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>Key</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>change_key_create</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>change_key_create(RegHandle, Key) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>Key</typename><string>Key = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = ok | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>Key</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(RegHandle) -&gt; ok</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RegHandle</anno>
</spec>
<spec>
  <name>current_key</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>current_key(RegHandle) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = {ok, <seetype marker="erlang#string">string()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>delete_key</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete_key(RegHandle) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = ok | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>delete_value</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_value(RegHandle, Name) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = ok | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>Name</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>expand</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>expand(String) -&gt; ExpandedString</head>
      <guard>
        <subtype><typename>String</typename><string>String = ExpandedString = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>ExpandedString</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ExpandedString</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(ErrorId) -&gt; ErrorString</head>
      <guard>
        <subtype><typename>ErrorId</typename><string>ErrorId = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>ErrorString</typename><string>ErrorString = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>ErrorString</anno>
</spec>
<spec>
  <name>open</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>open(OpenModeList) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>OpenModeList</typename><string>OpenModeList = [OpenMode]</string></subtype>
        <subtype><typename>OpenMode</typename><string>OpenMode = read | write</string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = {ok, RegHandle} | {error, ErrorId :: enotsup}</string></subtype>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>OpenMode</anno>
  <anno>OpenModeList</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
</spec>
<spec>
  <name>set_value</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>set_value(RegHandle, Name, Value) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = ok | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>Name</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sub_keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sub_keys(RegHandle) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = {ok, [SubKey]} | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
        <subtype><typename>SubKey</typename><string>SubKey = <seetype marker="erlang#string">string()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
  <anno>SubKey</anno>
</spec>
<spec>
  <name>value</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>value(RegHandle, Name) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Value :: <seetype marker="#value">value()</seetype>} | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>Name</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>values</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>values(RegHandle) -&gt; ReturnValue</head>
      <guard>
        <subtype><typename>RegHandle</typename><string>RegHandle = <seetype marker="#reg_handle">reg_handle()</seetype></string></subtype>
        <subtype><typename>ReturnValue</typename><string>ReturnValue = {ok, [ValuePair]} | {error, ErrorId :: <seetype marker="erlang#atom">atom()</seetype>}</string></subtype>
        <subtype><typename>ValuePair</typename><string>ValuePair = {Name :: <seetype marker="#name">name()</seetype>, Value :: <seetype marker="#value">value()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorId</anno>
  <anno>Name</anno>
  <anno>RegHandle</anno>
  <anno>ReturnValue</anno>
  <anno>Value</anno>
  <anno>ValuePair</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:21.</timestamp>
</module>