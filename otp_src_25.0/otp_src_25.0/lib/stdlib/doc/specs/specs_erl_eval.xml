<module name="erl_eval">
<type>
  <name>binding_struct</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-binding_struct">binding_struct()</marker> = <seetype marker="orddict#orddict">orddict:orddict()</seetype> | <seetype marker="erlang#map">map()</seetype></typehead></typedecl>
</type>
<type>
  <name>bindings</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bindings">bindings()</marker> = [{<seetype marker="#name">name()</seetype>, <seetype marker="#value">value()</seetype>}]</typehead></typedecl>
</type>
<type>
  <name>clauses</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-clauses">clauses()</marker> = [<seetype marker="erl_parse#abstract_clause">erl_parse:abstract_clause()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>expression</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-expression">expression()</marker> = <seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype></typehead></typedecl>
</type>
<type>
  <name>expression_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-expression_list">expression_list()</marker> = [<seetype marker="#expression">expression()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>expressions</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-expressions">expressions()</marker> = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>func_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-func_spec">func_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: <seetype marker="erlang#module">module()</seetype>, Function :: <seetype marker="erlang#atom">atom()</seetype>} | <seetype marker="erlang#function">function()</seetype></typehead></typedecl>
  <anno>Function</anno>
  <anno>Module</anno>
</type>
<type>
  <name>lfun_eval_handler</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-lfun_eval_handler">lfun_eval_handler()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Name :: <seetype marker="erlang#atom">atom()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: <seetype marker="#expression_list">expression_list()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Bindings :: <seetype marker="#binding_struct">binding_struct()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{value,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seetype marker="#value">value()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewBindings :: <seetype marker="#binding_struct">binding_struct()</seetype>})</typehead></typedecl>
  <anno>Arguments</anno>
  <anno>Bindings</anno>
  <anno>Name</anno>
  <anno>NewBindings</anno>
  <anno>Value</anno>
</type>
<type>
  <name>lfun_value_handler</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-lfun_value_handler">lfun_value_handler()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Name :: <seetype marker="erlang#atom">atom()</seetype>, Arguments :: [<seetype marker="erlang#term">term()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seetype marker="#value">value()</seetype>)</typehead></typedecl>
  <anno>Arguments</anno>
  <anno>Name</anno>
  <anno>Value</anno>
</type>
<type>
  <name>local_function_handler</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-local_function_handler">local_function_handler()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{value, <seetype marker="#lfun_value_handler">lfun_value_handler()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{eval, <seetype marker="#lfun_eval_handler">lfun_eval_handler()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>none</typehead></typedecl>
</type>
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
</type>
<type>
  <name>nlfun_handler</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nlfun_handler">nlfun_handler()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((FuncSpec :: <seetype marker="#func_spec">func_spec()</seetype>, Arguments :: [<seetype marker="erlang#term">term()</seetype>]) -&gt; <seetype marker="erlang#term">term()</seetype>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Anno :: <seetype marker="erl_anno#anno">erl_anno:anno()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>FuncSpec :: <seetype marker="#func_spec">func_spec()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seetype marker="erlang#term">term()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype>)</typehead></typedecl>
  <anno>Anno</anno>
  <anno>Arguments</anno>
  <anno>FuncSpec</anno>
</type>
<type>
  <name>non_local_function_handler</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-non_local_function_handler">non_local_function_handler()</marker> = {value, <seetype marker="#nlfun_handler">nlfun_handler()</seetype>} | none</typehead></typedecl>
</type>
<type>
  <name>value</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-value">value()</marker> = <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
</type>
<spec>
  <name>add_binding</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>add_binding(Name, Value, BindingStruct) -&gt; <seetype marker="#binding_struct">binding_struct()</seetype></head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>BindingStruct</typename><string>BindingStruct = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BindingStruct</anno>
  <anno>Name</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>binding</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binding(Name, BindingStruct) -&gt; {value, <seetype marker="#value">value()</seetype>} | unbound</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>BindingStruct</typename><string>BindingStruct = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BindingStruct</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>bindings</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bindings(BindingStruct :: <seetype marker="#binding_struct">binding_struct()</seetype>) -&gt; <seetype marker="#bindings">bindings()</seetype></head></clause>
  </contract>
  <anno>BindingStruct</anno>
</spec>
<spec>
  <name>check_command</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>del_binding</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>del_binding(Name, BindingStruct) -&gt; <seetype marker="#binding_struct">binding_struct()</seetype></head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#name">name()</seetype></string></subtype>
        <subtype><typename>BindingStruct</typename><string>BindingStruct = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BindingStruct</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>eval_str</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>eval_str(Str :: <seetype marker="erlang#string">string()</seetype> | <seetype marker="unicode#latin1_binary">unicode:latin1_binary()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="erlang#string">string()</seetype>} | {error, <seetype marker="erlang#string">string()</seetype>}</head></clause>
  </contract>
  <anno>Str</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>expr(Expression, Bindings) -&gt; {value, Value, NewBindings}</head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="#expression">expression()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expression</anno>
  <anno>NewBindings</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>expr(Expression, Bindings, LocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{value, Value, NewBindings}</head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="#expression">expression()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expression</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>expr(Expression, Bindings, LocalFunctionHandler,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NonLocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{value, Value, NewBindings}</head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="#expression">expression()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>NonLocalFunctionHandler</typename><string>NonLocalFunctionHandler = <seetype marker="#non_local_function_handler">non_local_function_handler()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expression</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>NonLocalFunctionHandler</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>expr(Expression, Bindings, LocalFunctionHandler,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NonLocalFunctionHandler, ReturnFormat) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{value, Value, NewBindings} | Value</head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="#expression">expression()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>NonLocalFunctionHandler</typename><string>NonLocalFunctionHandler = <seetype marker="#non_local_function_handler">non_local_function_handler()</seetype></string></subtype>
        <subtype><typename>ReturnFormat</typename><string>ReturnFormat = none | value</string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expression</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>NonLocalFunctionHandler</anno>
  <anno>ReturnFormat</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>expr_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>expr_list(ExpressionList, Bindings) -&gt; {ValueList, NewBindings}</head>
      <guard>
        <subtype><typename>ExpressionList</typename><string>ExpressionList = <seetype marker="#expression_list">expression_list()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>ValueList</typename><string>ValueList = [<seetype marker="#value">value()</seetype>]</string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>ExpressionList</anno>
  <anno>NewBindings</anno>
  <anno>ValueList</anno>
</spec>
<spec>
  <name>expr_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>expr_list(ExpressionList, Bindings, LocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ValueList, NewBindings}</head>
      <guard>
        <subtype><typename>ExpressionList</typename><string>ExpressionList = <seetype marker="#expression_list">expression_list()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>ValueList</typename><string>ValueList = [<seetype marker="#value">value()</seetype>]</string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>ExpressionList</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>ValueList</anno>
</spec>
<spec>
  <name>expr_list</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>expr_list(ExpressionList, Bindings, LocalFunctionHandler,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NonLocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ValueList, NewBindings}</head>
      <guard>
        <subtype><typename>ExpressionList</typename><string>ExpressionList = <seetype marker="#expression_list">expression_list()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>NonLocalFunctionHandler</typename><string>NonLocalFunctionHandler = <seetype marker="#non_local_function_handler">non_local_function_handler()</seetype></string></subtype>
        <subtype><typename>ValueList</typename><string>ValueList = [<seetype marker="#value">value()</seetype>]</string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>ExpressionList</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>NonLocalFunctionHandler</anno>
  <anno>ValueList</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Bindings) -&gt; {value, Value, NewBindings}</head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = <seetype marker="#expressions">expressions()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expressions</anno>
  <anno>NewBindings</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Bindings, LocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{value, Value, NewBindings}</head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = <seetype marker="#expressions">expressions()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expressions</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Bindings, LocalFunctionHandler,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NonLocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{value, Value, NewBindings}</head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = <seetype marker="#expressions">expressions()</seetype></string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>NonLocalFunctionHandler</typename><string>NonLocalFunctionHandler = <seetype marker="#non_local_function_handler">non_local_function_handler()</seetype></string></subtype>
        <subtype><typename>Value</typename><string>Value = <seetype marker="#value">value()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Expressions</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>NonLocalFunctionHandler</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>extended_parse_exprs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>extended_parse_exprs(Tokens) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, ExprList} | {error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seetype marker="erl_scan#token">erl_scan:token()</seetype>]</string></subtype>
        <subtype><typename>ExprList</typename><string>ExprList = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seetype marker="erl_parse#error_info">erl_parse:error_info()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorInfo</anno>
  <anno>ExprList</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>extended_parse_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>extended_parse_term(Tokens) -&gt; {ok, Term} | {error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seetype marker="erl_scan#token">erl_scan:token()</seetype>]</string></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seetype marker="erl_parse#error_info">erl_parse:error_info()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorInfo</anno>
  <anno>Term</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>fun_data</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>is_constant_expr</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>match_clause</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>match_clause(Clauses, ValueList, Bindings, LocalFunctionHandler) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Body, NewBindings} | nomatch</head>
      <guard>
        <subtype><typename>Clauses</typename><string>Clauses = <seetype marker="#clauses">clauses()</seetype></string></subtype>
        <subtype><typename>ValueList</typename><string>ValueList = [<seetype marker="#value">value()</seetype>]</string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
        <subtype><typename>LocalFunctionHandler</typename><string>LocalFunctionHandler = <seetype marker="#local_function_handler">local_function_handler()</seetype></string></subtype>
        <subtype><typename>Body</typename><string>Body = <seetype marker="#expression_list">expression_list()</seetype></string></subtype>
        <subtype><typename>NewBindings</typename><string>NewBindings = <seetype marker="#binding_struct">binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>Body</anno>
  <anno>Clauses</anno>
  <anno>LocalFunctionHandler</anno>
  <anno>NewBindings</anno>
  <anno>ValueList</anno>
</spec>
<spec>
  <name>new_bindings</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new_bindings() -&gt; <seetype marker="#binding_struct">binding_struct()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>partial_eval</name>
  <arity>1</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:16.</timestamp>
</module>