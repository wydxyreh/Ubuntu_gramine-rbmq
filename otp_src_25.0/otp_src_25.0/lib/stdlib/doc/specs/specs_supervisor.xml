<module name="supervisor">
<type>
  <name>auto_shutdown</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-auto_shutdown">auto_shutdown()</marker> = never | any_significant | all_significant</typehead></typedecl>
</type>
<type>
  <name>call</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-call">call()</marker> = which_children | count_children | {<seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>child</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child">child()</marker> = undefined | <seetype marker="erlang#pid">pid()</seetype></typehead></typedecl>
</type>
<type>
  <name>child_id</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child_id">child_id()</marker> = <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
</type>
<type>
  <name>child_rec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child_rec">child_rec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#child{pid =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#child">child()</seetype> | {restarting, <seetype marker="erlang#pid">pid()</seetype> | undefined} | [<seetype marker="erlang#pid">pid()</seetype>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>id = <seetype marker="#child_id">child_id()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mfargs = <seetype marker="#mfargs">mfargs()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>restart_type = <seetype marker="#restart">restart()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>significant = <seetype marker="#significant">significant()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shutdown = <seetype marker="#shutdown">shutdown()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>child_type = <seetype marker="#worker">worker()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>modules = <seetype marker="#modules">modules()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>child_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child_spec">child_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{id := <seetype marker="#child_id">child_id()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>start := <seetype marker="#mfargs">mfargs()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>restart =&gt; <seetype marker="#restart">restart()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>significant =&gt; <seetype marker="#significant">significant()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shutdown =&gt; <seetype marker="#shutdown">shutdown()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type =&gt; <seetype marker="#worker">worker()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>modules =&gt; <seetype marker="#modules">modules()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Id :: <seetype marker="#child_id">child_id()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>StartFunc :: <seetype marker="#mfargs">mfargs()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Restart :: <seetype marker="#restart">restart()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Shutdown :: <seetype marker="#shutdown">shutdown()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seetype marker="#worker">worker()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Modules :: <seetype marker="#modules">modules()</seetype>}</typehead></typedecl>
  <anno>Id</anno>
  <anno>Modules</anno>
  <anno>Restart</anno>
  <anno>Shutdown</anno>
  <anno>StartFunc</anno>
  <anno>Type</anno>
</type>
<type>
  <name>children</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-children">children()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Ids :: [<seetype marker="#child_id">child_id()</seetype>], Db :: #{<seetype marker="#child_id">child_id()</seetype> =&gt; <seetype marker="#child_rec">child_rec()</seetype>}}</typehead></typedecl>
  <anno>Db</anno>
  <anno>Ids</anno>
</type>
<type>
  <name>init_sup_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-init_sup_name">init_sup_name()</marker> = <seetype marker="#sup_name">sup_name()</seetype> | self</typehead></typedecl>
</type>
<type>
  <name>mfargs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mfargs">mfargs()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{M :: <seetype marker="erlang#module">module()</seetype>, F :: <seetype marker="erlang#atom">atom()</seetype>, A :: [<seetype marker="erlang#term">term()</seetype>] | undefined}</typehead></typedecl>
  <anno>A</anno>
  <anno>F</anno>
  <anno>M</anno>
</type>
<type>
  <name>modules</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-modules">modules()</marker> = [<seetype marker="erlang#module">module()</seetype>] | dynamic</typehead></typedecl>
</type>
<type>
  <name>restart</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-restart">restart()</marker> = permanent | transient | temporary</typehead></typedecl>
</type>
<type>
  <name>shutdown</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-shutdown">shutdown()</marker> = brutal_kill | <seetype marker="erlang#timeout">timeout()</seetype></typehead></typedecl>
</type>
<type>
  <name>significant</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-significant">significant()</marker> = <seetype marker="erlang#boolean">boolean()</seetype></typehead></typedecl>
</type>
<type>
  <name>startchild_err</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startchild_err">startchild_err()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>already_present | {already_started, Child :: <seetype marker="#child">child()</seetype>} | <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
  <anno>Child</anno>
</type>
<type>
  <name>startchild_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startchild_ret">startchild_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seetype marker="#child">child()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seetype marker="#child">child()</seetype>, Info :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="#startchild_err">startchild_err()</seetype>}</typehead></typedecl>
  <anno>Child</anno>
  <anno>Info</anno>
</type>
<type>
  <name>startlink_err</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startlink_err">startlink_err()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{already_started, <seetype marker="erlang#pid">pid()</seetype>} | {shutdown, <seetype marker="erlang#term">term()</seetype>} | <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
</type>
<type>
  <name>startlink_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startlink_ret">startlink_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="erlang#pid">pid()</seetype>} | ignore | {error, <seetype marker="#startlink_err">startlink_err()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{name = <seetype marker="erlang#any">any()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>strategy = <seetype marker="#strategy">strategy()</seetype> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>children = <seetype marker="#children">children()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dynamics =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{maps, #{<seetype marker="erlang#pid">pid()</seetype> =&gt; <seetype marker="erlang#list">list()</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{mapsets, #{<seetype marker="erlang#pid">pid()</seetype> =&gt; []}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>intensity = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>period = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>restarts = <seetype marker="erlang#any">any()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dynamic_restarts = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>auto_shutdown = <seetype marker="#auto_shutdown">auto_shutdown()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>module = <seetype marker="erlang#any">any()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>args = <seetype marker="erlang#any">any()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>stop_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stop_rsn">stop_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{shutdown, <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bad_return, {<seetype marker="erlang#module">module()</seetype>, init, <seetype marker="erlang#term">term()</seetype>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bad_start_spec, <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{start_spec, <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{supervisor_data, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>strategy</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-strategy">strategy()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>one_for_all | one_for_one | rest_for_one | simple_one_for_one</typehead></typedecl>
</type>
<type>
  <name>sup_flags</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sup_flags">sup_flags()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{strategy =&gt; <seetype marker="#strategy">strategy()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>intensity =&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>period =&gt; <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>auto_shutdown =&gt; <seetype marker="#auto_shutdown">auto_shutdown()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{RestartStrategy :: <seetype marker="#strategy">strategy()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Intensity :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Period :: <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}</typehead></typedecl>
  <anno>Intensity</anno>
  <anno>Period</anno>
  <anno>RestartStrategy</anno>
</type>
<type>
  <name>sup_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sup_name">sup_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{local, Name :: <seetype marker="erlang#atom">atom()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, Name :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, Module :: <seetype marker="erlang#module">module()</seetype>, Name :: <seetype marker="erlang#any">any()</seetype>}</typehead></typedecl>
  <anno>Module</anno>
  <anno>Name</anno>
</type>
<type>
  <name>sup_ref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sup_ref">sup_ref()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(Name :: <seetype marker="erlang#atom">atom()</seetype>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Name :: <seetype marker="erlang#atom">atom()</seetype>, Node :: <seetype marker="erlang#node">node()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, Name :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, Module :: <seetype marker="erlang#module">module()</seetype>, Name :: <seetype marker="erlang#any">any()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pid">pid()</seetype></typehead></typedecl>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>Node</anno>
</type>
<type>
  <name>worker</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-worker">worker()</marker> = worker | supervisor</typehead></typedecl>
</type>
<spec>
  <name>check_childspecs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>check_childspecs(ChildSpecs) -&gt; Result</head>
      <guard>
        <subtype><typename>ChildSpecs</typename><string>ChildSpecs = [<seetype marker="#child_spec">child_spec()</seetype>]</string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ChildSpecs</anno>
  <anno>Error</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>check_childspecs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>check_childspecs(ChildSpecs, AutoShutdown) -&gt; Result</head>
      <guard>
        <subtype><typename>ChildSpecs</typename><string>ChildSpecs = [<seetype marker="#child_spec">child_spec()</seetype>]</string></subtype>
        <subtype><typename>AutoShutdown</typename><string>AutoShutdown = undefined | <seetype marker="#auto_shutdown">auto_shutdown()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error :: <seetype marker="erlang#term">term()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>AutoShutdown</anno>
  <anno>ChildSpecs</anno>
  <anno>Error</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(X1 :: <seetype marker="erlang#term">term()</seetype>, State :: <seetype marker="#state">state()</seetype>, X3 :: <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#state">state()</seetype>} | {error, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>count_children</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>count_children(SupRef) -&gt; PropListOfCounts</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>PropListOfCounts</typename><string>PropListOfCounts = [Count]</string></subtype>
        <subtype><typename>Count</typename><string>Count = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{specs, ChildSpecCount :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{active, ActiveProcessCount :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{supervisors, ChildSupervisorCount :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{workers, ChildWorkerCount :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveProcessCount</anno>
  <anno>ChildSpecCount</anno>
  <anno>ChildSupervisorCount</anno>
  <anno>ChildWorkerCount</anno>
  <anno>Count</anno>
  <anno>PropListOfCounts</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>delete_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_child(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seetype marker="#child_id">child_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = running | restarting | not_found | simple_one_for_one</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>format_log</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>format_log</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>format_status</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>get_callback_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_callback_module(Pid) -&gt; Module</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>get_childspec</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_childspec(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="#child_id">child_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = {ok, <seetype marker="#child_spec">child_spec()</seetype>} | {error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = not_found</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: <seetype marker="#call">call()</seetype>, From :: <seetype marker="erlang#term">term()</seetype>, State :: <seetype marker="#state">state()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, <seetype marker="erlang#term">term()</seetype>, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>From</anno>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{try_again_restart,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#child_id">child_id()</seetype> | {restarting, <seetype marker="erlang#pid">pid()</seetype>}},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seetype marker="#state">state()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seetype marker="#state">state()</seetype>} | {stop, shutdown, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Msg :: <seetype marker="erlang#term">term()</seetype>, State :: <seetype marker="#state">state()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seetype marker="#state">state()</seetype>} | {stop, shutdown, <seetype marker="#state">state()</seetype>}</head></clause>
  </contract>
  <anno>Msg</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: {<seetype marker="#init_sup_name">init_sup_name()</seetype>, <seetype marker="erlang#module">module()</seetype>, [<seetype marker="erlang#term">term()</seetype>]}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#state">state()</seetype>} | ignore | {stop, <seetype marker="#stop_rsn">stop_rsn()</seetype>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>restart_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>restart_child(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seetype marker="#child_id">child_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seetype marker="#child">child()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seetype marker="#child">child()</seetype>, Info :: <seetype marker="erlang#term">term()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = <br/><nbsp/><nbsp/><nbsp/><nbsp/>running | restarting | not_found | simple_one_for_one | <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Child</anno>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Info</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>start_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_child(SupRef, ChildSpec) -&gt; <seetype marker="#startchild_ret">startchild_ret()</seetype></head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>ChildSpec</typename><string>ChildSpec = <seetype marker="#child_spec">child_spec()</seetype> | (List :: [<seetype marker="erlang#term">term()</seetype>])</string></subtype>
      </guard></clause>
  </contract>
  <anno>ChildSpec</anno>
  <anno>List</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(Module, Args) -&gt; <seetype marker="#startlink_ret">startlink_ret()</seetype></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(SupName, Module, Args) -&gt; <seetype marker="#startlink_ret">startlink_ret()</seetype></head>
      <guard>
        <subtype><typename>SupName</typename><string>SupName = <seetype marker="#sup_name">sup_name()</seetype></string></subtype>
        <subtype><typename>Module</typename><string>Module = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
  <anno>SupName</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: <seetype marker="erlang#term">term()</seetype>, State :: <seetype marker="#state">state()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>terminate_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate_child(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seetype marker="erlang#pid">pid()</seetype> | <seetype marker="#child_id">child_id()</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = not_found | simple_one_for_one</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>which_children</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_children(SupRef) -&gt; [{Id, Child, Type, Modules}]</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seetype marker="#sup_ref">sup_ref()</seetype></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seetype marker="#child_id">child_id()</seetype> | undefined</string></subtype>
        <subtype><typename>Child</typename><string>Child = <seetype marker="#child">child()</seetype> | restarting</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#worker">worker()</seetype></string></subtype>
        <subtype><typename>Modules</typename><string>Modules = <seetype marker="#modules">modules()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Child</anno>
  <anno>Id</anno>
  <anno>Modules</anno>
  <anno>SupRef</anno>
  <anno>Type</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:21.</timestamp>
</module>