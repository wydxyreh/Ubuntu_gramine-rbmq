<module name="binary">
<type>
  <name>cp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cp">cp()</marker></typehead></typedecl>
</type>
<type>
  <name>part</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-part">part()</marker> = {Start :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>, Length :: <seetype marker="erlang#integer">integer()</seetype>}</typehead></typedecl>
  <anno>Length</anno>
  <anno>Start</anno>
</type>
<spec>
  <name>at</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>at(Subject, Pos) -&gt; <seetype marker="erlang#byte">byte()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pos</typename><string>Pos = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pos</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>bin_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bin_to_list(Subject) -&gt; [<seetype marker="erlang#byte">byte()</seetype>]</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Subject</anno>
</spec>
<spec>
  <name>bin_to_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bin_to_list(Subject, PosLen) -&gt; [<seetype marker="erlang#byte">byte()</seetype>]</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>PosLen</typename><string>PosLen = <seetype marker="#part">part()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>PosLen</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>bin_to_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bin_to_list(Subject, Pos, Len) -&gt; [<seetype marker="erlang#byte">byte()</seetype>]</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pos</typename><string>Pos = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Len</typename><string>Len = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Len</anno>
  <anno>Pos</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>compile_pattern</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>compile_pattern(Pattern) -&gt; <seetype marker="#cp">cp()</seetype></head>
      <guard>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pattern</anno>
</spec>
<spec>
  <name>copy</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>copy(Subject) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Subject</anno>
</spec>
<spec>
  <name>copy</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copy(Subject, N) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>N</typename><string>N = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>decode_hex</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>decode_hex(Bin) -&gt; Bin2</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = &lt;&lt;_:_*16&gt;&gt;</string></subtype>
        <subtype><typename>Bin2</typename><string>Bin2 = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Bin2</anno>
</spec>
<spec>
  <name>decode_unsigned</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>decode_unsigned(Subject) -&gt; Unsigned</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Unsigned</typename><string>Unsigned = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Subject</anno>
  <anno>Unsigned</anno>
</spec>
<spec>
  <name>decode_unsigned</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>decode_unsigned(Subject, Endianness) -&gt; Unsigned</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Endianness</typename><string>Endianness = big | little</string></subtype>
        <subtype><typename>Unsigned</typename><string>Unsigned = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Endianness</anno>
  <anno>Subject</anno>
  <anno>Unsigned</anno>
</spec>
<spec>
  <name>encode_hex</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>encode_hex(Bin) -&gt; Bin2</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Bin2</typename><string>Bin2 = &lt;&lt;_:_*16&gt;&gt;</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Bin2</anno>
</spec>
<spec>
  <name>encode_unsigned</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>encode_unsigned(Unsigned) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Unsigned</typename><string>Unsigned = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unsigned</anno>
</spec>
<spec>
  <name>encode_unsigned</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>encode_unsigned(Unsigned, Endianness) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Unsigned</typename><string>Unsigned = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Endianness</typename><string>Endianness = big | little</string></subtype>
      </guard></clause>
  </contract>
  <anno>Endianness</anno>
  <anno>Unsigned</anno>
</spec>
<spec>
  <name>first</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>first(Subject) -&gt; <seetype marker="erlang#byte">byte()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Subject</anno>
</spec>
<spec>
  <name>last</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>last(Subject) -&gt; <seetype marker="erlang#byte">byte()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Subject</anno>
</spec>
<spec>
  <name>list_to_bin</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_bin(ByteList) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>ByteList</typename><string>ByteList = <seetype marker="erlang#iolist">iolist()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ByteList</anno>
</spec>
<spec>
  <name>longest_common_prefix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>longest_common_prefix(Binaries) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Binaries</typename><string>Binaries = [<seetype marker="erlang#binary">binary()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binaries</anno>
</spec>
<spec>
  <name>longest_common_suffix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>longest_common_suffix(Binaries) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Binaries</typename><string>Binaries = [<seetype marker="erlang#binary">binary()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binaries</anno>
</spec>
<spec>
  <name>match</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match(Subject, Pattern) -&gt; Found | nomatch</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Found</typename><string>Found = <seetype marker="#part">part()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Found</anno>
  <anno>Pattern</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>match</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>match(Subject, Pattern, Options) -&gt; Found | nomatch</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Found</typename><string>Found = <seetype marker="#part">part()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {scope, <seetype marker="#part">part()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Found</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Pattern</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>matches</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>matches(Subject, Pattern) -&gt; Found</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Found</typename><string>Found = [<seetype marker="#part">part()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Found</anno>
  <anno>Pattern</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>matches</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>matches(Subject, Pattern, Options) -&gt; Found</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Found</typename><string>Found = [<seetype marker="#part">part()</seetype>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {scope, <seetype marker="#part">part()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Found</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Pattern</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>part</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>part(Subject, PosLen) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>PosLen</typename><string>PosLen = <seetype marker="#part">part()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>PosLen</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>part</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>part(Subject, Pos, Len) -&gt; <seetype marker="erlang#binary">binary()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pos</typename><string>Pos = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Len</typename><string>Len = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Len</anno>
  <anno>Pos</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>referenced_byte_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>referenced_byte_size(Binary) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>replace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>replace(Subject, Pattern, Replacement) -&gt; Result</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Replacement</typename><string>Replacement = Result = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Result</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pattern</anno>
  <anno>Replacement</anno>
  <anno>Result</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>replace</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>replace(Subject, Pattern, Replacement, Options) -&gt; Result</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Replacement</typename><string>Replacement = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = global | {scope, <seetype marker="#part">part()</seetype>} | {insert_replaced, InsPos}</string></subtype>
        <subtype><typename>InsPos</typename><string>InsPos = OnePos | [OnePos]</string></subtype>
        <subtype><typename>OnePos</typename><string>OnePos = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>InsPos</anno>
  <anno>OnePos</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Pattern</anno>
  <anno>Replacement</anno>
  <anno>Result</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>split</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>split(Subject, Pattern) -&gt; Parts</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Parts</typename><string>Parts = [<seetype marker="erlang#binary">binary()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Parts</anno>
  <anno>Pattern</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>split</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>split(Subject, Pattern, Options) -&gt; Parts</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seetype marker="erlang#binary">binary()</seetype> | [<seetype marker="erlang#binary">binary()</seetype>] | <seetype marker="#cp">cp()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {scope, <seetype marker="#part">part()</seetype>} | trim | global | trim_all</string></subtype>
        <subtype><typename>Parts</typename><string>Parts = [<seetype marker="erlang#binary">binary()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Parts</anno>
  <anno>Pattern</anno>
  <anno>Subject</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:16.</timestamp>
</module>