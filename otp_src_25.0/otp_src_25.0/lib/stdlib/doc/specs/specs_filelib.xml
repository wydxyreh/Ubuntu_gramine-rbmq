<module name="filelib">
<type>
  <name>dirname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dirname">dirname()</marker> = <seetype marker="#filename">filename()</seetype></typehead></typedecl>
</type>
<type>
  <name>dirname_all</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dirname_all">dirname_all()</marker> = <seetype marker="#filename_all">filename_all()</seetype></typehead></typedecl>
</type>
<type>
  <name>filename</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-filename">filename()</marker> = <seetype marker="file#name">file:name()</seetype></typehead></typedecl>
</type>
<type>
  <name>filename_all</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-filename_all">filename_all()</marker> = <seetype marker="file#name_all">file:name_all()</seetype></typehead></typedecl>
</type>
<type>
  <name>find_file_rule</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-find_file_rule">find_file_rule()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ObjDirSuffix :: <seetype marker="erlang#string">string()</seetype>, SrcDirSuffix :: <seetype marker="erlang#string">string()</seetype>}</typehead></typedecl>
  <anno>ObjDirSuffix</anno>
  <anno>SrcDirSuffix</anno>
</type>
<type>
  <name>find_source_rule</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-find_source_rule">find_source_rule()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ObjExtension :: <seetype marker="erlang#string">string()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SrcExtension :: <seetype marker="erlang#string">string()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="#find_file_rule">find_file_rule()</seetype>]}</typehead></typedecl>
  <anno>ObjExtension</anno>
  <anno>SrcExtension</anno>
</type>
<spec>
  <name>compile_wildcard</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>ensure_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_dir(Name) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#filename_all">filename_all()</seetype> | <seetype marker="#dirname_all">dirname_all()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="file#posix">file:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>ensure_path</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_path(Path) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seetype marker="#dirname_all">dirname_all()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="file#posix">file:posix()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Path</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>file_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>file_size(Filename) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seetype marker="#filename_all">filename_all()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>file_size</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>file_size(File :: <seetype marker="file#name">file:name()</seetype>, Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>find_file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find_file(Filename :: <seetype marker="#filename">filename()</seetype>, Dir :: <seetype marker="#filename">filename()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#filename">filename()</seetype>} | {error, not_found}</head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>find_file</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>find_file(Filename :: <seetype marker="#filename">filename()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Dir :: <seetype marker="#filename">filename()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Rules :: [<seetype marker="#find_file_rule">find_file_rule()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#filename">filename()</seetype>} | {error, not_found}</head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
  <anno>Rules</anno>
</spec>
<spec>
  <name>find_source</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>find_source(FilePath :: <seetype marker="#filename">filename()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#filename">filename()</seetype>} | {error, not_found}</head></clause>
  </contract>
  <anno>FilePath</anno>
</spec>
<spec>
  <name>find_source</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find_source(Filename :: <seetype marker="#filename">filename()</seetype>, Dir :: <seetype marker="#filename">filename()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#filename">filename()</seetype>} | {error, not_found}</head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>find_source</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>find_source(Filename :: <seetype marker="#filename">filename()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Dir :: <seetype marker="#filename">filename()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Rules :: [<seetype marker="#find_source_rule">find_source_rule()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seetype marker="#filename">filename()</seetype>} | {error, not_found}</head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
  <anno>Rules</anno>
</spec>
<spec>
  <name>fold_files</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>fold_files(Dir, RegExp, Recursive, Fun, AccIn) -&gt; AccOut</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seetype marker="#dirname">dirname()</seetype></string></subtype>
        <subtype><typename>RegExp</typename><string>RegExp = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Recursive</typename><string>Recursive = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = fun((F :: <seetype marker="file#filename">file:filename()</seetype>, AccIn) -&gt; AccOut)</string></subtype>
        <subtype><typename>AccIn</typename><string>AccIn = AccOut = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>AccOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Dir</anno>
  <anno>F</anno>
  <anno>Fun</anno>
  <anno>Recursive</anno>
  <anno>RegExp</anno>
</spec>
<spec>
  <name>fold_files</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>fold_files(Dir :: <seetype marker="file#name">file:name()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>RegExp :: <seetype marker="erlang#string">string()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Recursive :: <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Fun :: fun((<seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Acc :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Dir</anno>
  <anno>Fun</anno>
  <anno>Mod</anno>
  <anno>Recursive</anno>
  <anno>RegExp</anno>
</spec>
<spec>
  <name>is_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_dir(Name) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#filename_all">filename_all()</seetype> | <seetype marker="#dirname_all">dirname_all()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>is_dir</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_dir(Dir :: <seetype marker="file#name_all">file:name_all()</seetype>, Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>is_file</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_file(Name) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#filename_all">filename_all()</seetype> | <seetype marker="#dirname_all">dirname_all()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>is_file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_file(File :: <seetype marker="file#name_all">file:name_all()</seetype>, Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>is_regular</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_regular(Name) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#filename_all">filename_all()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>is_regular</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_regular(File :: <seetype marker="file#name_all">file:name_all()</seetype>, Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>last_modified</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>last_modified(Name) -&gt; <seetype marker="file#date_time">file:date_time()</seetype> | 0</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="#filename_all">filename_all()</seetype> | <seetype marker="#dirname_all">dirname_all()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>last_modified</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>last_modified(File :: <seetype marker="file#name_all">file:name_all()</seetype>, Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="file#date_time">file:date_time()</seetype> | 0</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>safe_relative_path</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>safe_relative_path(Filename, Cwd) -&gt; unsafe | SafeFilename</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = Cwd = SafeFilename = <seetype marker="#filename_all">filename_all()</seetype></string></subtype>
        <subtype><typename>Cwd</typename><string></string></subtype>
        <subtype><typename>SafeFilename</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cwd</anno>
  <anno>Filename</anno>
  <anno>SafeFilename</anno>
</spec>
<spec>
  <name>wildcard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>wildcard(Wildcard) -&gt; [<seetype marker="file#filename">file:filename()</seetype>]</head>
      <guard>
        <subtype><typename>Wildcard</typename><string>Wildcard = <seetype marker="#filename">filename()</seetype> | <seetype marker="#dirname">dirname()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Wildcard</anno>
</spec>
<spec>
  <name>wildcard</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>wildcard(Wildcard, Cwd) -&gt; [<seetype marker="file#filename">file:filename()</seetype>]</head>
      <guard>
        <subtype><typename>Wildcard</typename><string>Wildcard = <seetype marker="#filename">filename()</seetype> | <seetype marker="#dirname">dirname()</seetype></string></subtype>
        <subtype><typename>Cwd</typename><string>Cwd = <seetype marker="#dirname">dirname()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cwd</anno>
  <anno>Wildcard</anno>
</spec>
<spec>
  <name>wildcard</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>wildcard(Pattern :: <seetype marker="file#name">file:name()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Cwd :: <seetype marker="file#name">file:name()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Mod :: <seetype marker="erlang#atom">atom()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="file#filename">file:filename()</seetype>]</head></clause>
  </contract>
  <anno>Cwd</anno>
  <anno>Mod</anno>
  <anno>Pattern</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:18.</timestamp>
</module>