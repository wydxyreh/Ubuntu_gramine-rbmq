<module name="ms_transform">
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(Error) -&gt; Chars</head>
      <guard>
        <subtype><typename>Error</typename><string>Error = {error, <seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#term">term()</seetype>}</string></subtype>
        <subtype><typename>Chars</typename><string>Chars = <seetype marker="io_lib#chars">io_lib:chars()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Chars</anno>
  <anno>Error</anno>
</spec>
<spec>
  <name>parse_transform</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>parse_transform(Forms, Options) -&gt; Forms2 | Errors | Warnings</head>
      <guard>
        <subtype><typename>Forms</typename><string>Forms = Forms2 = [<seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype> | <seetype marker="erl_parse#form_info">erl_parse:form_info()</seetype>]</string></subtype>
        <subtype><typename>Forms2</typename><string/></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Errors</typename><string>Errors = {error, ErrInfo :: [<seetype marker="erlang#tuple">tuple()</seetype>], WarnInfo :: []}</string></subtype>
        <subtype><typename>Warnings</typename><string>Warnings = {warning, Forms2, WarnInfo :: [<seetype marker="erlang#tuple">tuple()</seetype>]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrInfo</anno>
  <anno>Errors</anno>
  <anno>Forms</anno>
  <anno>Forms2</anno>
  <anno>Options</anno>
  <anno>WarnInfo</anno>
  <anno>Warnings</anno>
</spec>
<spec>
  <name>parse_transform_info</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>parse_transform_info() -&gt; #{error_location =&gt; column}</head></clause>
  </contract>
</spec>
<spec>
  <name>transform_from_shell</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>transform_from_shell(Dialect, Clauses, BoundEnvironment) -&gt; <seetype marker="erlang#term">term()</seetype></head>
      <guard>
        <subtype><typename>Dialect</typename><string>Dialect = ets | dbg</string></subtype>
        <subtype><typename>Clauses</typename><string>Clauses = [<seetype marker="erl_parse#abstract_clause">erl_parse:abstract_clause()</seetype>]</string></subtype>
        <subtype><typename>BoundEnvironment</typename><string>BoundEnvironment = <seetype marker="erl_eval#binding_struct">erl_eval:binding_struct()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BoundEnvironment</anno>
  <anno>Clauses</anno>
  <anno>Dialect</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:19.</timestamp>
</module>