<module name="sofs">
<type>
  <name>a_function</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-a_function">a_function()</marker> = <seetype marker="#relation">relation()</seetype></typehead></typedecl>
</type>
<type>
  <name>a_set</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-a_set">a_set()</marker></typehead></typedecl>
</type>
<type>
  <name>anyset</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-anyset">anyset()</marker> = <seetype marker="#ordset">ordset()</seetype> | <seetype marker="#a_set">a_set()</seetype></typehead></typedecl>
</type>
<type>
  <name>binary_relation</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-binary_relation">binary_relation()</marker> = <seetype marker="#relation">relation()</seetype></typehead></typedecl>
</type>
<type>
  <name>external_set</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-external_set">external_set()</marker> = <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
</type>
<type>
  <name>family</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-family">family()</marker> = <seetype marker="#a_function">a_function()</seetype></typehead></typedecl>
</type>
<type>
  <name>ordset</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ordset">ordset()</marker></typehead></typedecl>
</type>
<type>
  <name>relation</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-relation">relation()</marker> = <seetype marker="#a_set">a_set()</seetype></typehead></typedecl>
</type>
<type>
  <name>set_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-set_fun">set_fun()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{external, fun((<seetype marker="#external_set">external_set()</seetype>) -&gt; <seetype marker="#external_set">external_set()</seetype>)} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="#anyset">anyset()</seetype>) -&gt; <seetype marker="#anyset">anyset()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>set_of_sets</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-set_of_sets">set_of_sets()</marker> = <seetype marker="#a_set">a_set()</seetype></typehead></typedecl>
</type>
<type>
  <name>spec_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-spec_fun">spec_fun()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{external, fun((<seetype marker="#external_set">external_set()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype>)} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="#anyset">anyset()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>tuple_of</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-tuple_of">tuple_of(_T)</marker> = <seetype marker="erlang#tuple">tuple()</seetype></typehead></typedecl>
  <anno>_T</anno>
</type>
<type>
  <name>type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-type">type()</marker> = <seetype marker="erlang#term">term()</seetype></typehead></typedecl>
</type>
<spec>
  <name>a_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>a_function(Tuples) -&gt; Function</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seetype marker="#a_function">a_function()</seetype></string></subtype>
        <subtype><typename>Tuples</typename><string>Tuples = [<seetype marker="erlang#tuple">tuple()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
  <anno>Tuples</anno>
</spec>
<spec>
  <name>a_function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>a_function(Tuples, Type) -&gt; Function</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seetype marker="#a_function">a_function()</seetype></string></subtype>
        <subtype><typename>Tuples</typename><string>Tuples = [<seetype marker="erlang#tuple">tuple()</seetype>]</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
  <anno>Tuples</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>canonical_relation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>canonical_relation(SetOfSets) -&gt; BinRel</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>SetOfSets</typename><string>SetOfSets = <seetype marker="#set_of_sets">set_of_sets()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>SetOfSets</anno>
</spec>
<spec>
  <name>composite</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>composite(Function1, Function2) -&gt; Function3</head>
      <guard>
        <subtype><typename>Function1</typename><string>Function1 = Function2 = Function3 = <seetype marker="#a_function">a_function()</seetype></string></subtype>
        <subtype><typename>Function2</typename><string></string></subtype>
        <subtype><typename>Function3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function1</anno>
  <anno>Function2</anno>
  <anno>Function3</anno>
</spec>
<spec>
  <name>constant_function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>constant_function(Set, AnySet) -&gt; Function</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Function</typename><string>Function = <seetype marker="#a_function">a_function()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>Function</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>converse</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>converse(BinRel1) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
</spec>
<spec>
  <name>difference</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>difference(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>digraph_to_family</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>digraph_to_family(Graph) -&gt; Family</head>
      <guard>
        <subtype><typename>Graph</typename><string>Graph = <seetype marker="digraph#graph">digraph:graph()</seetype></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Graph</anno>
</spec>
<spec>
  <name>digraph_to_family</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>digraph_to_family(Graph, Type) -&gt; Family</head>
      <guard>
        <subtype><typename>Graph</typename><string>Graph = <seetype marker="digraph#graph">digraph:graph()</seetype></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Graph</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>domain</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>domain(BinRel) -&gt; Set</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>drestriction</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>drestriction(BinRel1, Set) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string/></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>drestriction</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>drestriction(SetFun, Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>empty_set</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>empty_set() -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
</spec>
<spec>
  <name>extension</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>extension(BinRel1, Set, AnySet) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string/></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>fam2rel</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fam2rel(Family) -&gt; BinRel</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Family</anno>
</spec>
<spec>
  <name>family</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family(Tuples) -&gt; Family</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Tuples</typename><string>Tuples = [<seetype marker="erlang#tuple">tuple()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Tuples</anno>
</spec>
<spec>
  <name>family</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family(Tuples, Type) -&gt; Family</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Tuples</typename><string>Tuples = [<seetype marker="erlang#tuple">tuple()</seetype>]</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Tuples</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>family_difference</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family_difference(Family1, Family2) -&gt; Family3</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = Family3 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
        <subtype><typename>Family3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
  <anno>Family3</anno>
</spec>
<spec>
  <name>family_domain</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_domain(Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
</spec>
<spec>
  <name>family_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_field(Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
</spec>
<spec>
  <name>family_intersection</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_intersection(Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
</spec>
<spec>
  <name>family_intersection</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family_intersection(Family1, Family2) -&gt; Family3</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = Family3 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
        <subtype><typename>Family3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
  <anno>Family3</anno>
</spec>
<spec>
  <name>family_projection</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family_projection(SetFun, Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>family_range</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_range(Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
</spec>
<spec>
  <name>family_specification</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family_specification(Fun, Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="#spec_fun">spec_fun()</seetype></string></subtype>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
  <anno>Fun</anno>
</spec>
<spec>
  <name>family_to_digraph</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_to_digraph(Family) -&gt; Graph</head>
      <guard>
        <subtype><typename>Graph</typename><string>Graph = <seetype marker="digraph#graph">digraph:graph()</seetype></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Graph</anno>
</spec>
<spec>
  <name>family_to_digraph</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family_to_digraph(Family, GraphType) -&gt; Graph</head>
      <guard>
        <subtype><typename>Graph</typename><string>Graph = <seetype marker="digraph#graph">digraph:graph()</seetype></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>GraphType</typename><string>GraphType = [<seetype marker="digraph#d_type">digraph:d_type()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Graph</anno>
  <anno>GraphType</anno>
</spec>
<spec>
  <name>family_to_relation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_to_relation(Family) -&gt; BinRel</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Family</anno>
</spec>
<spec>
  <name>family_union</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>family_union(Family1) -&gt; Family2</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
</spec>
<spec>
  <name>family_union</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>family_union(Family1, Family2) -&gt; Family3</head>
      <guard>
        <subtype><typename>Family1</typename><string>Family1 = Family2 = Family3 = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Family2</typename><string></string></subtype>
        <subtype><typename>Family3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family1</anno>
  <anno>Family2</anno>
  <anno>Family3</anno>
</spec>
<spec>
  <name>field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>field(BinRel) -&gt; Set</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>from_external</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_external(ExternalSet, Type) -&gt; AnySet</head>
      <guard>
        <subtype><typename>ExternalSet</typename><string>ExternalSet = <seetype marker="#external_set">external_set()</seetype></string></subtype>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>ExternalSet</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>from_sets</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_sets(ListOfSets) -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>ListOfSets</typename><string>ListOfSets = [<seetype marker="#anyset">anyset()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>ListOfSets</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>from_sets</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_sets(TupleOfSets) -&gt; Ordset</head>
      <guard>
        <subtype><typename>Ordset</typename><string>Ordset = <seetype marker="#ordset">ordset()</seetype></string></subtype>
        <subtype><typename>TupleOfSets</typename><string>TupleOfSets = <seetype marker="#tuple_of">tuple_of</seetype>(<seetype marker="#anyset">anyset()</seetype>)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ordset</anno>
  <anno>TupleOfSets</anno>
</spec>
<spec>
  <name>from_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_term(Term) -&gt; AnySet</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>from_term</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_term(Term, Type) -&gt; AnySet</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>Term</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>image</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>image(BinRel, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>intersection</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>intersection(SetOfSets) -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>SetOfSets</typename><string>SetOfSets = <seetype marker="#set_of_sets">set_of_sets()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
  <anno>SetOfSets</anno>
</spec>
<spec>
  <name>intersection</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>intersection(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>intersection_of_family</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>intersection_of_family(Family) -&gt; Set</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>inverse</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>inverse(Function1) -&gt; Function2</head>
      <guard>
        <subtype><typename>Function1</typename><string>Function1 = Function2 = <seetype marker="#a_function">a_function()</seetype></string></subtype>
        <subtype><typename>Function2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function1</anno>
  <anno>Function2</anno>
</spec>
<spec>
  <name>inverse_image</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>inverse_image(BinRel, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>is_a_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_a_function(BinRel) -&gt; Bool</head>
      <guard>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Bool</anno>
</spec>
<spec>
  <name>is_disjoint</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_disjoint(Set1, Set2) -&gt; Bool</head>
      <guard>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bool</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>is_empty_set</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_empty_set(AnySet) -&gt; Bool</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>Bool</anno>
</spec>
<spec>
  <name>is_equal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_equal(AnySet1, AnySet2) -&gt; Bool</head>
      <guard>
        <subtype><typename>AnySet1</typename><string>AnySet1 = AnySet2 = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>AnySet2</typename><string/></subtype>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet1</anno>
  <anno>AnySet2</anno>
  <anno>Bool</anno>
</spec>
<spec>
  <name>is_set</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_set(AnySet) -&gt; Bool</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>Bool</anno>
</spec>
<spec>
  <name>is_sofs_set</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_sofs_set(Term) -&gt; Bool</head>
      <guard>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bool</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_subset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_subset(Set1, Set2) -&gt; Bool</head>
      <guard>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bool</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>is_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_type(Term) -&gt; Bool</head>
      <guard>
        <subtype><typename>Bool</typename><string>Bool = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bool</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>join</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>join(Relation1, I, Relation2, J) -&gt; Relation3</head>
      <guard>
        <subtype><typename>Relation1</typename><string>Relation1 = Relation2 = Relation3 = <seetype marker="#relation">relation()</seetype></string></subtype>
        <subtype><typename>Relation2</typename><string/></subtype>
        <subtype><typename>Relation3</typename><string/></subtype>
        <subtype><typename>I</typename><string>I = J = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></string></subtype>
        <subtype><typename>J</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>I</anno>
  <anno>J</anno>
  <anno>Relation1</anno>
  <anno>Relation2</anno>
  <anno>Relation3</anno>
</spec>
<spec>
  <name>multiple_relative_product</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiple_relative_product(TupleOfBinRels, BinRel1) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>TupleOfBinRels</typename><string>TupleOfBinRels = <seetype marker="#tuple_of">tuple_of</seetype>(BinRel)</string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel1</typename><string></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>TupleOfBinRels</anno>
</spec>
<spec>
  <name>no_elements</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>no_elements(ASet) -&gt; NoElements</head>
      <guard>
        <subtype><typename>ASet</typename><string>ASet = <seetype marker="#a_set">a_set()</seetype> | <seetype marker="#ordset">ordset()</seetype></string></subtype>
        <subtype><typename>NoElements</typename><string>NoElements = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ASet</anno>
  <anno>NoElements</anno>
</spec>
<spec>
  <name>partition</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>partition(SetOfSets) -&gt; Partition</head>
      <guard>
        <subtype><typename>SetOfSets</typename><string>SetOfSets = <seetype marker="#set_of_sets">set_of_sets()</seetype></string></subtype>
        <subtype><typename>Partition</typename><string>Partition = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Partition</anno>
  <anno>SetOfSets</anno>
</spec>
<spec>
  <name>partition</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>partition(SetFun, Set) -&gt; Partition</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Partition</typename><string>Partition = Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Partition</anno>
  <anno>Set</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>partition</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>partition(SetFun, Set1, Set2) -&gt; {Set3, Set4}</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = Set4 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
        <subtype><typename>Set4</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
  <anno>Set4</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>partition_family</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>partition_family(SetFun, Set) -&gt; Family</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Set</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>product</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>product(TupleOfSets) -&gt; Relation</head>
      <guard>
        <subtype><typename>Relation</typename><string>Relation = <seetype marker="#relation">relation()</seetype></string></subtype>
        <subtype><typename>TupleOfSets</typename><string>TupleOfSets = <seetype marker="#tuple_of">tuple_of</seetype>(<seetype marker="#a_set">a_set()</seetype>)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Relation</anno>
  <anno>TupleOfSets</anno>
</spec>
<spec>
  <name>product</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>product(Set1, Set2) -&gt; BinRel</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>projection</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>projection(SetFun, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>range</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>range(BinRel) -&gt; Set</head>
      <guard>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>rel2fam</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rel2fam(BinRel) -&gt; Family</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Family</anno>
</spec>
<spec>
  <name>relation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relation(Tuples) -&gt; Relation</head>
      <guard>
        <subtype><typename>Relation</typename><string>Relation = <seetype marker="#relation">relation()</seetype></string></subtype>
        <subtype><typename>Tuples</typename><string>Tuples = [<seetype marker="erlang#tuple">tuple()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Relation</anno>
  <anno>Tuples</anno>
</spec>
<spec>
  <name>relation</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>relation(Tuples, Type) -&gt; Relation</head>
      <guard>
        <subtype><typename>N</typename><string>N = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = N | <seetype marker="#type">type()</seetype></string></subtype>
        <subtype><typename>Relation</typename><string>Relation = <seetype marker="#relation">relation()</seetype></string></subtype>
        <subtype><typename>Tuples</typename><string>Tuples = [<seetype marker="erlang#tuple">tuple()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
  <anno>Relation</anno>
  <anno>Tuples</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>relation_to_family</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relation_to_family(BinRel) -&gt; Family</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>Family</anno>
</spec>
<spec>
  <name>relative_product</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relative_product(ListOfBinRels) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>ListOfBinRels</typename><string>ListOfBinRels = [BinRel, ...]</string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>BinRel2</anno>
  <anno>ListOfBinRels</anno>
</spec>
<spec>
  <name>relative_product</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>relative_product(ListOfBinRels, BinRel1) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>ListOfBinRels</typename><string>ListOfBinRels = [BinRel, ...]</string></subtype>
        <subtype><typename>BinRel</typename><string>BinRel = BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel1</typename><string></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel</anno>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>ListOfBinRels</anno>
</spec>
<spec>
  <name>relative_product</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>relative_product(BinRel1, BinRel2) -&gt; BinRel3</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = BinRel3 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
        <subtype><typename>BinRel3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>BinRel3</anno>
</spec>
<spec>
  <name>relative_product1</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>relative_product1(BinRel1, BinRel2) -&gt; BinRel3</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = BinRel3 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
        <subtype><typename>BinRel3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>BinRel3</anno>
</spec>
<spec>
  <name>restriction</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>restriction(BinRel1, Set) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string/></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>restriction</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>restriction(SetFun, Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>set</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>set(Terms) -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Terms</typename><string>Terms = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
  <anno>Terms</anno>
</spec>
<spec>
  <name>set</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set(Terms, Type) -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Terms</typename><string>Terms = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
  <anno>Terms</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>specification</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>specification(Fun, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="#spec_fun">spec_fun()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>strict_relation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strict_relation(BinRel1) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
</spec>
<spec>
  <name>substitution</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>substitution(SetFun, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>SetFun</typename><string>SetFun = <seetype marker="#set_fun">set_fun()</seetype></string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>SetFun</anno>
</spec>
<spec>
  <name>symdiff</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>symdiff(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>symmetric_partition</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>symmetric_partition(Set1, Set2) -&gt; {Set3, Set4, Set5}</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = Set4 = Set5 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
        <subtype><typename>Set4</typename><string></string></subtype>
        <subtype><typename>Set5</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
  <anno>Set4</anno>
  <anno>Set5</anno>
</spec>
<spec>
  <name>to_external</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_external(AnySet) -&gt; ExternalSet</head>
      <guard>
        <subtype><typename>ExternalSet</typename><string>ExternalSet = <seetype marker="#external_set">external_set()</seetype></string></subtype>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>ExternalSet</anno>
</spec>
<spec>
  <name>to_sets</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_sets(ASet) -&gt; Sets</head>
      <guard>
        <subtype><typename>ASet</typename><string>ASet = <seetype marker="#a_set">a_set()</seetype> | <seetype marker="#ordset">ordset()</seetype></string></subtype>
        <subtype><typename>Sets</typename><string>Sets = <seetype marker="#tuple_of">tuple_of</seetype>(AnySet) | [AnySet]</string></subtype>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>ASet</anno>
  <anno>AnySet</anno>
  <anno>Sets</anno>
</spec>
<spec>
  <name>type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type(AnySet) -&gt; Type</head>
      <guard>
        <subtype><typename>AnySet</typename><string>AnySet = <seetype marker="#anyset">anyset()</seetype></string></subtype>
        <subtype><typename>Type</typename><string>Type = <seetype marker="#type">type()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>AnySet</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>union</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>union(SetOfSets) -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>SetOfSets</typename><string>SetOfSets = <seetype marker="#set_of_sets">set_of_sets()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
  <anno>SetOfSets</anno>
</spec>
<spec>
  <name>union</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>union(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#a_set">a_set()</seetype></string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>union_of_family</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>union_of_family(Family) -&gt; Set</head>
      <guard>
        <subtype><typename>Family</typename><string>Family = <seetype marker="#family">family()</seetype></string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#a_set">a_set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>weak_relation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weak_relation(BinRel1) -&gt; BinRel2</head>
      <guard>
        <subtype><typename>BinRel1</typename><string>BinRel1 = BinRel2 = <seetype marker="#binary_relation">binary_relation()</seetype></string></subtype>
        <subtype><typename>BinRel2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BinRel1</anno>
  <anno>BinRel2</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:21.</timestamp>
</module>