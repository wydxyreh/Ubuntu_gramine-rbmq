<module name="re">
<type>
  <name>compile_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-compile_option">compile_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>unicode | anchored | caseless | dollar_endonly | dotall |<br/><nbsp/><nbsp/><nbsp/><nbsp/>extended | firstline | multiline | no_auto_capture |<br/><nbsp/><nbsp/><nbsp/><nbsp/>dupnames | ungreedy |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{newline, <seetype marker="#nl_spec">nl_spec()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bsr_anycrlf | bsr_unicode | no_start_optimize | ucp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>never_utf</typehead></typedecl>
</type>
<type>
  <name>mp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mp">mp()</marker> = {re_pattern, <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>nl_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-nl_spec">nl_spec()</marker> = cr | crlf | lf | anycrlf | any</typehead></typedecl>
</type>
<spec>
  <name>compile</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>compile(Regexp) -&gt; {ok, MP} | {error, ErrSpec}</head>
      <guard>
        <subtype><typename>Regexp</typename><string>Regexp = <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>MP</typename><string>MP = <seetype marker="#mp">mp()</seetype></string></subtype>
        <subtype><typename>ErrSpec</typename><string>ErrSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ErrString :: <seetype marker="erlang#string">string()</seetype>, Position :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrSpec</anno>
  <anno>ErrString</anno>
  <anno>MP</anno>
  <anno>Position</anno>
  <anno>Regexp</anno>
</spec>
<spec>
  <name>compile</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>compile(Regexp, Options) -&gt; {ok, MP} | {error, ErrSpec}</head>
      <guard>
        <subtype><typename>Regexp</typename><string>Regexp = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <seetype marker="#compile_option">compile_option()</seetype></string></subtype>
        <subtype><typename>MP</typename><string>MP = <seetype marker="#mp">mp()</seetype></string></subtype>
        <subtype><typename>ErrSpec</typename><string>ErrSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ErrString :: <seetype marker="erlang#string">string()</seetype>, Position :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrSpec</anno>
  <anno>ErrString</anno>
  <anno>MP</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Position</anno>
  <anno>Regexp</anno>
</spec>
<spec>
  <name>grun</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>inspect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>inspect(MP, Item) -&gt; {namelist, [<seetype marker="erlang#binary">binary()</seetype>]}</head>
      <guard>
        <subtype><typename>MP</typename><string>MP = <seetype marker="#mp">mp()</seetype></string></subtype>
        <subtype><typename>Item</typename><string>Item = namelist</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MP</anno>
</spec>
<spec>
  <name>internal_run</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>internal_run(Subject, RE, Options, FirstCall) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{match, Captured} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>match | nomatch |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, ErrType}</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>anchored | global | notbol | noteol | notempty |<br/><nbsp/><nbsp/><nbsp/><nbsp/>notempty_atstart | report_errors |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{offset, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit_recursion, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{newline, NLSpec :: <seetype marker="#nl_spec">nl_spec()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bsr_anycrlf | bsr_unicode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{capture, ValueSpec} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{capture, ValueSpec, Type} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>CompileOpt</string></subtype>
        <subtype><typename>Type</typename><string>Type = index | list | binary</string></subtype>
        <subtype><typename>ValueSpec</typename><string>ValueSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>all | all_but_first | all_names | first | none | ValueList</string></subtype>
        <subtype><typename>ValueList</typename><string>ValueList = [ValueID]</string></subtype>
        <subtype><typename>ValueID</typename><string>ValueID = <seetype marker="erlang#integer">integer()</seetype> | <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>CompileOpt</typename><string>CompileOpt = <seetype marker="#compile_option">compile_option()</seetype></string></subtype>
        <subtype><typename>Captured</typename><string>Captured = [CaptureData] | [[CaptureData]]</string></subtype>
        <subtype><typename>CaptureData</typename><string>CaptureData = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#integer">integer()</seetype>, <seetype marker="erlang#integer">integer()</seetype>} | ListConversionData | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>ListConversionData</typename><string>ListConversionData = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#string">string()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="erlang#string">string()</seetype>, <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, <seetype marker="erlang#string">string()</seetype>, <seetype marker="erlang#binary">binary()</seetype>}</string></subtype>
        <subtype><typename>ErrType</typename><string>ErrType = <br/><nbsp/><nbsp/><nbsp/><nbsp/>match_limit | match_limit_recursion | {compile, CompileErr}</string></subtype>
        <subtype><typename>CompileErr</typename><string>CompileErr = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ErrString :: <seetype marker="erlang#string">string()</seetype>, Position :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
        <subtype><typename>FirstCall</typename><string>FirstCall = <seetype marker="erlang#boolean">boolean()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>CaptureData</anno>
  <anno>Captured</anno>
  <anno>CompileErr</anno>
  <anno>CompileOpt</anno>
  <anno>ErrString</anno>
  <anno>ErrType</anno>
  <anno>FirstCall</anno>
  <anno>ListConversionData</anno>
  <anno>NLSpec</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Position</anno>
  <anno>RE</anno>
  <anno>Subject</anno>
  <anno>Type</anno>
  <anno>ValueID</anno>
  <anno>ValueList</anno>
  <anno>ValueSpec</anno>
</spec>
<spec>
  <name>replace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>replace(Subject, RE, Replacement) -&gt; <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Replacement</typename><string>Replacement = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>RE</anno>
  <anno>Replacement</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>replace</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>replace(Subject, RE, Replacement, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>Replacement</typename><string>Replacement = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>anchored | global | notbol | noteol | notempty |<br/><nbsp/><nbsp/><nbsp/><nbsp/>notempty_atstart |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{offset, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{newline, NLSpec} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bsr_anycrlf |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit_recursion, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bsr_unicode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{return, ReturnType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>CompileOpt</string></subtype>
        <subtype><typename>ReturnType</typename><string>ReturnType = iodata | list | binary</string></subtype>
        <subtype><typename>CompileOpt</typename><string>CompileOpt = <seetype marker="#compile_option">compile_option()</seetype></string></subtype>
        <subtype><typename>NLSpec</typename><string>NLSpec = cr | crlf | lf | anycrlf | any</string></subtype>
      </guard></clause>
  </contract>
  <anno>CompileOpt</anno>
  <anno>NLSpec</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>RE</anno>
  <anno>Replacement</anno>
  <anno>ReturnType</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>run</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>run(Subject, RE) -&gt; {match, Captured} | nomatch</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>Captured</typename><string>Captured = [CaptureData]</string></subtype>
        <subtype><typename>CaptureData</typename><string>CaptureData = {<seetype marker="erlang#integer">integer()</seetype>, <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>CaptureData</anno>
  <anno>Captured</anno>
  <anno>RE</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>run</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>run(Subject, RE, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{match, Captured} | match | nomatch | {error, ErrType}</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>anchored | global | notbol | noteol | notempty |<br/><nbsp/><nbsp/><nbsp/><nbsp/>notempty_atstart | report_errors |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{offset, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit_recursion, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{newline, NLSpec :: <seetype marker="#nl_spec">nl_spec()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bsr_anycrlf | bsr_unicode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{capture, ValueSpec} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{capture, ValueSpec, Type} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>CompileOpt</string></subtype>
        <subtype><typename>Type</typename><string>Type = index | list | binary</string></subtype>
        <subtype><typename>ValueSpec</typename><string>ValueSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>all | all_but_first | all_names | first | none | ValueList</string></subtype>
        <subtype><typename>ValueList</typename><string>ValueList = [ValueID]</string></subtype>
        <subtype><typename>ValueID</typename><string>ValueID = <seetype marker="erlang#integer">integer()</seetype> | <seetype marker="erlang#string">string()</seetype> | <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>CompileOpt</typename><string>CompileOpt = <seetype marker="#compile_option">compile_option()</seetype></string></subtype>
        <subtype><typename>Captured</typename><string>Captured = [CaptureData] | [[CaptureData]]</string></subtype>
        <subtype><typename>CaptureData</typename><string>CaptureData = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#integer">integer()</seetype>, <seetype marker="erlang#integer">integer()</seetype>} | ListConversionData | <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>ListConversionData</typename><string>ListConversionData = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#string">string()</seetype> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seetype marker="erlang#string">string()</seetype>, <seetype marker="erlang#binary">binary()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, <seetype marker="erlang#string">string()</seetype>, <seetype marker="erlang#binary">binary()</seetype>}</string></subtype>
        <subtype><typename>ErrType</typename><string>ErrType = <br/><nbsp/><nbsp/><nbsp/><nbsp/>match_limit | match_limit_recursion | {compile, CompileErr}</string></subtype>
        <subtype><typename>CompileErr</typename><string>CompileErr = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ErrString :: <seetype marker="erlang#string">string()</seetype>, Position :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>CaptureData</anno>
  <anno>Captured</anno>
  <anno>CompileErr</anno>
  <anno>CompileOpt</anno>
  <anno>ErrString</anno>
  <anno>ErrType</anno>
  <anno>ListConversionData</anno>
  <anno>NLSpec</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Position</anno>
  <anno>RE</anno>
  <anno>Subject</anno>
  <anno>Type</anno>
  <anno>ValueID</anno>
  <anno>ValueList</anno>
  <anno>ValueSpec</anno>
</spec>
<spec>
  <name>split</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>split(Subject, RE) -&gt; SplitList</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype></string></subtype>
        <subtype><typename>SplitList</typename><string>SplitList = [<seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>RE</anno>
  <anno>SplitList</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>split</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>split(Subject, RE, Options) -&gt; SplitList</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>RE</typename><string>RE = <seetype marker="#mp">mp()</seetype> | <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>anchored | notbol | noteol | notempty | notempty_atstart |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{offset, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{newline, <seetype marker="#nl_spec">nl_spec()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_limit_recursion, <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bsr_anycrlf | bsr_unicode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{return, ReturnType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{parts, NumParts} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>group | trim | CompileOpt</string></subtype>
        <subtype><typename>NumParts</typename><string>NumParts = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype> | infinity</string></subtype>
        <subtype><typename>ReturnType</typename><string>ReturnType = iodata | list | binary</string></subtype>
        <subtype><typename>CompileOpt</typename><string>CompileOpt = <seetype marker="#compile_option">compile_option()</seetype></string></subtype>
        <subtype><typename>SplitList</typename><string>SplitList = [RetData] | [GroupedRetData]</string></subtype>
        <subtype><typename>GroupedRetData</typename><string>GroupedRetData = [RetData]</string></subtype>
        <subtype><typename>RetData</typename><string>RetData = <seetype marker="erlang#iodata">iodata()</seetype> | <seetype marker="unicode#charlist">unicode:charlist()</seetype> | <seetype marker="erlang#binary">binary()</seetype> | <seetype marker="erlang#list">list()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>CompileOpt</anno>
  <anno>GroupedRetData</anno>
  <anno>NumParts</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>RE</anno>
  <anno>RetData</anno>
  <anno>ReturnType</anno>
  <anno>SplitList</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>ucompile</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>urun</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>version</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>version() -&gt; <seetype marker="erlang#binary">binary()</seetype></head></clause>
  </contract>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:20.</timestamp>
</module>