<module name="erl_error">
<type>
  <name>column</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-column">column()</marker> = <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype></typehead></typedecl>
</type>
<type>
  <name>format_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-format_fun">format_fun()</marker> = fun((<seetype marker="erlang#term">term()</seetype>, <seetype marker="#column">column()</seetype>) -&gt; <seetype marker="erlang#iolist">iolist()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>format_options</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-format_options">format_options()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{column =&gt; <seetype marker="#column">column()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>stack_trim_fun =&gt; <seetype marker="#stack_trim_fun">stack_trim_fun()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>format_fun =&gt; <seetype marker="#format_fun">format_fun()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>stack_trim_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stack_trim_fun">stack_trim_fun()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="erlang#module">module()</seetype>, <seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype>)</typehead></typedecl>
</type>
<spec>
  <name>format_call</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>format_call</name>
  <arity>5</arity>
  <contract/>
</spec>
<spec>
  <name>format_exception</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>format_exception(Class, Reason, StackTrace) -&gt; <seetype marker="unicode#chardata">unicode:chardata()</seetype></head>
      <guard>
        <subtype><typename>Class</typename><string>Class = error | exit | throw</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>StackTrace</typename><string>StackTrace = <seetype marker="erlang#stacktrace">erlang:stacktrace()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Class</anno>
  <anno>Reason</anno>
  <anno>StackTrace</anno>
</spec>
<spec>
  <name>format_exception</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>format_exception(Class, Reason, StackTrace, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="unicode#chardata">unicode:chardata()</seetype></head>
      <guard>
        <subtype><typename>Class</typename><string>Class = error | exit | throw</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seetype marker="erlang#term">term()</seetype></string></subtype>
        <subtype><typename>StackTrace</typename><string>StackTrace = <seetype marker="erlang#stacktrace">erlang:stacktrace()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#format_options">format_options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Class</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
  <anno>StackTrace</anno>
</spec>
<spec>
  <name>format_exception</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>format_exception</name>
  <arity>7</arity>
  <contract/>
</spec>
<spec>
  <name>format_exception</name>
  <arity>8</arity>
  <contract/>
</spec>
<spec>
  <name>format_fun</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>format_fun</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>format_stacktrace</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>format_stacktrace</name>
  <arity>5</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:21.</timestamp>
</module>