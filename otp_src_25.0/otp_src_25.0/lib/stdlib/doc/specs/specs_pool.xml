<module name="pool">
<spec>
  <name>attach</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>attach(Node) -&gt; already_attached | attached</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>do_spawn</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>do_spawn(Gl :: <seetype marker="erlang#pid">pid()</seetype>, M :: <seetype marker="erlang#module">module()</seetype>, F :: <seetype marker="erlang#atom">atom()</seetype>, A :: [<seetype marker="erlang#term">term()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>A</anno>
  <anno>F</anno>
  <anno>Gl</anno>
  <anno>M</anno>
</spec>
<spec>
  <name>get_node</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_node() -&gt; <seetype marker="erlang#node">node()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>get_nodes</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_nodes() -&gt; [<seetype marker="erlang#node">node()</seetype>]</head></clause>
  </contract>
</spec>
<spec>
  <name>get_nodes_and_load</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>pspawn</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pspawn(Mod, Fun, Args) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Mod</typename><string>Mod = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Fun</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>pspawn_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pspawn_link(Mod, Fun, Args) -&gt; <seetype marker="erlang#pid">pid()</seetype></head>
      <guard>
        <subtype><typename>Mod</typename><string>Mod = <seetype marker="erlang#module">module()</seetype></string></subtype>
        <subtype><typename>Fun</typename><string>Fun = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = [<seetype marker="erlang#term">term()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Fun</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Name) -&gt; Nodes</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>start</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start(Name, Args) -&gt; Nodes</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Nodes</typename><string>Nodes = [<seetype marker="erlang#node">node()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Name</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>statistic_collector</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stop() -&gt; stopped</head></clause>
  </contract>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:19.</timestamp>
</module>