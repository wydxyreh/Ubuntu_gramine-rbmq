<module name="slave">
<spec>
  <name>pseudo</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>pseudo</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pseudo(Master, ServerList) -&gt; ok</head>
      <guard>
        <subtype><typename>Master</typename><string>Master = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>ServerList</typename><string>ServerList = [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Master</anno>
  <anno>ServerList</anno>
</spec>
<spec>
  <name>relay</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relay(Pid) -&gt; <seetype marker="erlang#no_return">no_return()</seetype></head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = <seetype marker="erlang#pid">pid()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>slave_start</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Host) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start(Host, Name) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>5</arity>
  <contract/>
</spec>
<spec>
  <name>start_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_link(Host) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(Host, Name) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seetype marker="inet#hostname">inet:hostname()</seetype></string></subtype>
        <subtype><typename>Name</typename><string>Name = <seetype marker="erlang#atom">atom()</seetype> | <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Args</typename><string>Args = <seetype marker="erlang#string">string()</seetype></string></subtype>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(Node) -&gt; ok</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = <seetype marker="erlang#node">node()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>wait_for_master_to_die</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>wait_for_slave</name>
  <arity>7</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:20.</timestamp>
</module>