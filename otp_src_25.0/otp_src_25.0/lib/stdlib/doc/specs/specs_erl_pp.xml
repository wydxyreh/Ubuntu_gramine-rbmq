<module name="erl_pp">
<type>
  <name>hook_function</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hook_function">hook_function()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Expr :: <seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CurrentIndentation :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CurrentPrecedence :: <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: <seetype marker="#options">options()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="io_lib#chars">io_lib:chars()</seetype>)</typehead></typedecl>
  <anno>CurrentIndentation</anno>
  <anno>CurrentPrecedence</anno>
  <anno>Expr</anno>
  <anno>Options</anno>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{hook, <seetype marker="#hook_function">hook_function()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{encoding, latin1 | unicode | utf8} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{quote_singleton_atom_types, <seetype marker="erlang#boolean">boolean()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{linewidth, <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{indent, <seetype marker="erlang#pos_integer">integer() &gt;= 1</seetype>}</typehead></typedecl>
</type>
<type>
  <name>options</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-options">options()</marker> = <seetype marker="#hook_function">hook_function()</seetype> | [<seetype marker="#option">option()</seetype>]</typehead></typedecl>
</type>
<spec>
  <name>attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>attribute(Attribute) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Attribute</typename><string>Attribute = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attribute</anno>
</spec>
<spec>
  <name>attribute</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>attribute(Attribute, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Attribute</typename><string>Attribute = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attribute</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>expr(Expression) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>expr(Expression, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>expr(Expression, Indent, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype></string></subtype>
        <subtype><typename>Indent</typename><string>Indent = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
  <anno>Indent</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>expr(Expression, Indent, Precedence, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype></string></subtype>
        <subtype><typename>Indent</typename><string>Indent = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Precedence</typename><string>Precedence = <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
  <anno>Indent</anno>
  <anno>Options</anno>
  <anno>Precedence</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>exprs(Expressions) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Expressions</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expressions</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Indent, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</string></subtype>
        <subtype><typename>Indent</typename><string>Indent = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expressions</anno>
  <anno>Indent</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>form</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>form(Form) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Form</typename><string>Form = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype> | <seetype marker="erl_parse#form_info">erl_parse:form_info()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Form</anno>
</spec>
<spec>
  <name>form</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>form(Form, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Form</typename><string>Form = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype> | <seetype marker="erl_parse#form_info">erl_parse:form_info()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Form</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function(Function) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
</spec>
<spec>
  <name>function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>function(Function, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>guard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>guard(Guard) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Guard</typename><string>Guard = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Guard</anno>
</spec>
<spec>
  <name>guard</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>guard(Guard, Options) -&gt; <seetype marker="io_lib#chars">io_lib:chars()</seetype></head>
      <guard>
        <subtype><typename>Guard</typename><string>Guard = [<seetype marker="erl_parse#abstract_expr">erl_parse:abstract_expr()</seetype>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seetype marker="#options">options()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Guard</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>legalize_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>legalize_vars(Function) -&gt; <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype></head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:17.</timestamp>
</module>