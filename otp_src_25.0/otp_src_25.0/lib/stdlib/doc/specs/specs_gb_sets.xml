<module name="gb_sets">
<type>
  <name>iter</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-iter">iter()</marker> = <seetype marker="#iter">iter</seetype>(<seetype marker="erlang#term">term()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>iter</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-iter">iter(Element)</marker></typehead></typedecl>
  <anno>Element</anno>
</type>
<type>
  <name>set</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-set">set()</marker> = <seetype marker="#set">set</seetype>(<seetype marker="erlang#term">term()</seetype>)</typehead></typedecl>
</type>
<type>
  <name>set</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-set">set(Element)</marker></typehead></typedecl>
  <anno>Element</anno>
</type>
<spec>
  <name>add</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add(Element, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>add_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_element(Element, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>balance</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>balance(Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>del_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>del_element(Element, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete(Element, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>delete_any</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_any(Element, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>difference</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>difference(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>empty</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>empty() -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
</spec>
<spec>
  <name>filter</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>filter(Pred, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Pred</typename><string>Pred = fun((Element) -&gt; <seetype marker="erlang#boolean">boolean()</seetype>)</string></subtype>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Pred</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>fold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold(Function, Acc0, Set) -&gt; Acc1</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = fun((Element, AccIn) -&gt; AccOut)</string></subtype>
        <subtype><typename>Acc0</typename><string>Acc0 = Acc1 = AccIn = AccOut = Acc</string></subtype>
        <subtype><typename>Acc1</typename><string/></subtype>
        <subtype><typename>AccIn</typename><string/></subtype>
        <subtype><typename>AccOut</typename><string/></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Acc0</anno>
  <anno>Acc1</anno>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Element</anno>
  <anno>Function</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_list(List) -&gt; Set</head>
      <guard>
        <subtype><typename>List</typename><string>List = [Element]</string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>List</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>from_ordset</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_ordset(List) -&gt; Set</head>
      <guard>
        <subtype><typename>List</typename><string>List = [Element]</string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>List</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>insert</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>insert(Element, Set1) -&gt; Set2</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>intersection</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>intersection(SetList) -&gt; Set</head>
      <guard>
        <subtype><typename>SetList</typename><string>SetList = [<seetype marker="#set">set</seetype>(Element), ...]</string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set</anno>
  <anno>SetList</anno>
</spec>
<spec>
  <name>intersection</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>intersection(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>is_disjoint</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_disjoint(Set1, Set2) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>is_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_element(Element, Set) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>is_empty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_empty(Set) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
</spec>
<spec>
  <name>is_member</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_member(Element, Set) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>is_set</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_set(Term) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = <seetype marker="erlang#term">term()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_subset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_subset(Set1, Set2) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>iterator</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>iterator(Set) -&gt; Iter</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Iter</typename><string>Iter = <seetype marker="#iter">iter</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Iter</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>iterator_from</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>iterator_from(Element, Set) -&gt; Iter</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Iter</typename><string>Iter = <seetype marker="#iter">iter</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Iter</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>largest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>largest(Set) -&gt; Element</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; Set</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
</spec>
<spec>
  <name>next</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>next(Iter1) -&gt; {Element, Iter2} | none</head>
      <guard>
        <subtype><typename>Iter1</typename><string>Iter1 = Iter2 = <seetype marker="#iter">iter</seetype>(Element)</string></subtype>
        <subtype><typename>Iter2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Iter1</anno>
  <anno>Iter2</anno>
</spec>
<spec>
  <name>singleton</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>singleton(Element) -&gt; <seetype marker="#set">set</seetype>(Element)</head></clause>
  </contract>
  <anno>Element</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Set) -&gt; <seetype marker="erlang#non_neg_integer">integer() &gt;= 0</seetype></head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Set</anno>
</spec>
<spec>
  <name>smallest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>smallest(Set) -&gt; Element</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>subtract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>subtract(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<spec>
  <name>take_largest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>take_largest(Set1) -&gt; {Element, Set2}</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>take_smallest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>take_smallest(Set1) -&gt; {Element, Set2}</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Set) -&gt; List</head>
      <guard>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>List</typename><string>List = [Element]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>List</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>union</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>union(SetList) -&gt; Set</head>
      <guard>
        <subtype><typename>SetList</typename><string>SetList = [<seetype marker="#set">set</seetype>(Element), ...]</string></subtype>
        <subtype><typename>Set</typename><string>Set = <seetype marker="#set">set</seetype>(Element)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set</anno>
  <anno>SetList</anno>
</spec>
<spec>
  <name>union</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>union(Set1, Set2) -&gt; Set3</head>
      <guard>
        <subtype><typename>Set1</typename><string>Set1 = Set2 = Set3 = <seetype marker="#set">set</seetype>(Element)</string></subtype>
        <subtype><typename>Set2</typename><string></string></subtype>
        <subtype><typename>Set3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Element</anno>
  <anno>Set1</anno>
  <anno>Set2</anno>
  <anno>Set3</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:18.</timestamp>
</module>