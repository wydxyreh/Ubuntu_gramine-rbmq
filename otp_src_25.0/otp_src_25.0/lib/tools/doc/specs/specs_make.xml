<module name="make">
<spec>
  <name>all</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>all() -&gt; up_to_date | error</head></clause>
  </contract>
</spec>
<spec>
  <name>all</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>all(Options) -&gt; up_to_date | error</head>
      <guard>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>noexec | load | netload | {emake, Emake} | <seetype marker="compile#option">compile:option()</seetype></string></subtype>
        <subtype><typename>Emake</typename><string>Emake = [EmakeElement]</string></subtype>
        <subtype><typename>EmakeElement</typename><string>EmakeElement = Modules | {Modules, [<seetype marker="compile#option">compile:option()</seetype>]}</string></subtype>
        <subtype><typename>Modules</typename><string>Modules = <seetype marker="erlang#atom">atom()</seetype> | [<seetype marker="erlang#atom">atom()</seetype>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Emake</anno>
  <anno>EmakeElement</anno>
  <anno>Modules</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>all_or_nothing</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>files</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>files(ModFiles) -&gt; up_to_date | error</head>
      <guard>
        <subtype><typename>ModFiles</typename><string>ModFiles = [(Module :: <seetype marker="erlang#module">module()</seetype>) | (File :: <seetype marker="file#filename">file:filename()</seetype>)]</string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>ModFiles</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>files</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>files(ModFiles, Options) -&gt; up_to_date | error</head>
      <guard>
        <subtype><typename>ModFiles</typename><string>ModFiles = [(Module :: <seetype marker="erlang#module">module()</seetype>) | (File :: <seetype marker="file#filename">file:filename()</seetype>)]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = noexec | load | netload | <seetype marker="compile#option">compile:option()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>ModFiles</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:43:46.</timestamp>
</module>