<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>prettypr</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>prettypr.xml</file></header>
<module>prettypr</module>
<modulesummary>A generic pretty printer library.</modulesummary>
<description>
<p>A generic pretty printer library. This module uses a  
strict-style context passing implementation of John Hughes algorithm,  
described in "The design of a Pretty-printing Library". The  
paragraph-style formatting, empty documents, floating documents, and  
null strings are my own additions to the algorithm.</p>
 
  <p>To get started, you should read about the <seeerl marker="#type-document">document()</seeerl> data
  type; the main constructor functions: <seemfa marker="#text/1">text/1</seemfa>, <seemfa marker="#above/2">above/2</seemfa>, <seemfa marker="#beside/2">beside/2</seemfa>, <seemfa marker="#nest/2">nest/2</seemfa>, <seemfa marker="#sep/1">sep/1</seemfa>, and <seemfa marker="#par/2">par/2</seemfa>; and the main layout function <seemfa marker="#format/3">format/3</seemfa>.</p>
 
  <p>If you simply want to format a paragraph of plain text, you probably
  want to use the <seemfa marker="#text_par/2">text_par/2</seemfa> function, as in the following
  example:
  </p><pre>  prettypr:format(prettypr:text_par("Lorem ipsum dolor sit amet"), 20)</pre></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-deep_string"/>deep_string() = [char() | deep_string()]</tag>
<item><p/> </item>
<tag><marker id="type-document"/>document() = null | #text{s=deep_string()} | #nest{n=integer(), d=<seeerl marker="#type-document">document()</seeerl>} | #beside{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>} | #above{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>} | #sep{ds=[<seeerl marker="#type-document">document()</seeerl>], i=integer(), p=boolean()} | #float{d=<seeerl marker="#type-document">document()</seeerl>, h=integer(), v=integer()} | #union{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>} | #fit{d=<seeerl marker="#type-document">document()</seeerl>}</tag>
<item><p/> </item>
</taglist></section>
<funcs>
<func>
<name since="">above(D1::<seeerl marker="#type-document">document()</seeerl>, D2::<seeerl marker="#type-document">document()</seeerl>) -&gt; #above{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>}</name>
<fsummary>Concatenates documents vertically.</fsummary>

<desc><marker id="above-2"/>

<p>Concatenates documents vertically. Returns a document
  representing the concatenation of the documents <c>D1</c> and <c>D2</c> such
  that the first line of <c>D2</c> follows directly below the last line of
  <c>D1</c>, and the first character of <c>D2</c> is in the same horizontal
  column as the first character of <c>D1</c>, in all possible layouts.</p>
 
  <p>Examples:
  </p><pre>     ab  cd  =&gt;  ab
                 cd
 
                    abc
     abc   fgh  =&gt;   de
      de    ij      fgh
                     ij</pre>
</desc></func>
<func>
<name since="">beside(D1::<seeerl marker="#type-document">document()</seeerl>, D2::<seeerl marker="#type-document">document()</seeerl>) -&gt; #beside{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>}</name>
<fsummary>Concatenates documents horizontally.</fsummary>

<desc><marker id="beside-2"/>

<p>Concatenates documents horizontally. Returns a document
  representing the concatenation of the documents <c>D1</c> and <c>D2</c> such
  that the last character of <c>D1</c> is horizontally adjacent to the first
  character of <c>D2</c>, in all possible layouts. (Note: any indentation of
  <c>D2</c> is lost.)</p>
 
  <p>Examples:
  </p><pre>     ab  cd  =&gt;  abcd
 
     ab  ef      ab
     cd  gh  =&gt;  cdef
                   gh</pre>
</desc></func>
<func>
<name since="">best(D::<seeerl marker="#type-document">document()</seeerl>, W::integer(), R::integer()) -&gt; empty | <seeerl marker="#type-document">document()</seeerl></name>
<fsummary>Selects a "best" layout for a document, creating a corresponding
  fixed-layout document.</fsummary>

<desc><marker id="best-3"/>

<p>Selects a "best" layout for a document, creating a corresponding
  fixed-layout document. If no layout could be produced, the atom
  <c>empty</c> is returned instead. For details about <c>PaperWidth</c> and
  <c>LineWidth</c>, see <seemfa marker="#format/3">format/3</seemfa>. The function is idempotent.</p>
 
  <p>One possible use of this function is to compute a fixed layout for a
  document, which can then be included as part of a larger document.
  For example:
  </p><pre>     above(text("Example:"), nest(8, best(D, W - 12, L - 6)))</pre><p>
  will format <c>D</c> as a displayed-text example indented by 8, whose
  right margin is indented by 4 relative to the paper width <c>W</c> of the
  surrounding document, and whose maximum individual line length is
  shorter by 6 than the line length <c>L</c> of the surrounding document.</p>
 
 <p>This function is used by the <seemfa marker="#format/3">format/3</seemfa> function to prepare a
  document before being laid out as text.</p>
</desc></func>
<func>
<name since="">break(D::<seeerl marker="#type-document">document()</seeerl>) -&gt; #above{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>}</name>
<fsummary>Forces a line break at the end of the given document.</fsummary>

<desc><marker id="break-1"/>

<p>Forces a line break at the end of the given document. This is a
  utility function; see <seemfa marker="#empty/0">empty/0</seemfa> for details.</p>
</desc></func>
<func>
<name since="">empty() -&gt; null</name>
<fsummary>Yields the empty document, which has neither height nor width.</fsummary>

<desc><marker id="empty-0"/>

<p>Yields the empty document, which has neither height nor width.
  (<c>empty</c> is thus different from an empty <seemfa marker="#text/1">text</seemfa>  
string, which has zero width but height 1.)</p>
 
  <p>Empty documents are occasionally useful; in particular, they have the
  property that <c>above(X, empty())</c> will force a new line after <c>X</c>
  without leaving an empty line below it; since this is a common idiom,
  the utility function <seemfa marker="#break/1">break/1</seemfa> will place a given document in
  such a context.
 </p>
<p><em>See also:</em> <seemfa marker="#text/1">text/1</seemfa>.</p>
</desc></func>
<func>
<name since="">floating(D::<seeerl marker="#type-document">document()</seeerl>) -&gt; #float{d=<seeerl marker="#type-document">document()</seeerl>, h=integer(), v=integer()}</name>
<fsummary>Equivalent to floating(D, 0, 0).
</fsummary>

<desc><marker id="floating-1"/>
<p>Equivalent to <seemfa marker="#floating/3">floating(D, 0, 0)</seemfa>.</p>
</desc></func>
<func>
<name since="">floating(D::<seeerl marker="#type-document">document()</seeerl>, H::integer(), V::integer()) -&gt; #float{d=<seeerl marker="#type-document">document()</seeerl>, h=integer(), v=integer()}</name>
<fsummary>Creates a "floating" document.</fsummary>

<desc><marker id="floating-3"/>

<p>Creates a "floating" document. The result represents the same
  set of layouts as <c>D</c>; however, a floating document may be moved
  relative to other floating documents immediately beside or above it,
  according to their relative horizontal and vertical priorities. These
  priorities are set with the <c>Hp</c> and <c>Vp</c> parameters; if omitted,  
both default to zero.</p>
 
  <p>Notes: Floating documents appear to work well, but are currently less
  general than you might wish, losing effect when embedded in certain
  contexts. It is possible to nest floating-operators (even with
  different priorities), but the effects may be difficult to predict.
  In any case, note that the way the algorithm reorders floating
  documents amounts to a "bubblesort", so don't expect it to be able to
  sort large sequences of floating documents quickly.</p>
</desc></func>
<func>
<name since="">follow(D1::<seeerl marker="#type-document">document()</seeerl>, D2::<seeerl marker="#type-document">document()</seeerl>) -&gt; #beside{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>}</name>
<fsummary>Equivalent to follow(D1, D2, 0).
</fsummary>

<desc><marker id="follow-2"/>
<p>Equivalent to <seemfa marker="#follow/3">follow(D1, D2, 0)</seemfa>.</p>
</desc></func>
<func>
<name since="">follow(D1::<seeerl marker="#type-document">document()</seeerl>, D2::<seeerl marker="#type-document">document()</seeerl>, N::integer()) -&gt; #beside{d1=<seeerl marker="#type-document">document()</seeerl>, d2=<seeerl marker="#type-document">document()</seeerl>}</name>
<fsummary>Separates two documents by either a single space, or a line
  break and indentation.</fsummary>

<desc><marker id="follow-3"/>

<p>Separates two documents by either a single space, or a line
  break and indentation. In other words, one of the layouts
  </p><pre>     abc def</pre><p>
  or
  </p><pre>     abc
      def</pre><p>  
will be generated, using the optional offset in the latter case. This  
is often useful for typesetting programming language constructs.</p>
 
  <p>This is a utility function; see <seemfa marker="#par/2">par/2</seemfa> for further details.
 </p>
<p><em>See also:</em> <seemfa marker="#follow/2">follow/2</seemfa>.</p>
</desc></func>
<func>
<name since="">format(D::<seeerl marker="#type-document">document()</seeerl>) -&gt; string()</name>
<fsummary>Equivalent to format(D, 80).
</fsummary>

<desc><marker id="format-1"/>
<p>Equivalent to <seemfa marker="#format/2">format(D, 80)</seemfa>.</p>
</desc></func>
<func>
<name since="">format(D::<seeerl marker="#type-document">document()</seeerl>, W::integer()) -&gt; string()</name>
<fsummary>Equivalent to format(D, PaperWidth, 65).
</fsummary>

<desc><marker id="format-2"/>
<p>Equivalent to <seemfa marker="#format/3">format(D, PaperWidth, 65)</seemfa>.</p>
</desc></func>
<func>
<name since="">format(D::<seeerl marker="#type-document">document()</seeerl>, W::integer(), R::integer()) -&gt; string()</name>
<fsummary>Computes a layout for a document and returns the corresponding
  text.</fsummary>

<desc><marker id="format-3"/>

<p>Computes a layout for a document and returns the corresponding
  text. See <seeerl marker="#type-document">document()</seeerl> for further information. Throws
  <c>no_layout</c> if no layout could be selected.</p>
 
  <p><c>PaperWidth</c> specifies the total width (in character positions) of
  the field for which the text is to be laid out. <c>LineWidth</c> specifies
  the desired maximum width (in number of characters) of the text
  printed on any single line, disregarding leading and trailing white
  space. These parameters need to be properly balanced in order to
  produce good layouts. By default, <c>PaperWidth</c> is 80 and <c>LineWidth</c>
  is 65.
 </p>
<p><em>See also:</em> <seemfa marker="#best/3">best/3</seemfa>.</p>
</desc></func>
<func>
<name since="">nest(N::integer(), D::<seeerl marker="#type-document">document()</seeerl>) -&gt; <seeerl marker="#type-document">document()</seeerl></name>
<fsummary>Indents a document a number of character positions to the right.</fsummary>

<desc><marker id="nest-2"/>

<p>Indents a document a number of character positions to the right.
  Note that <c>N</c> may be negative, shifting the text to the left, or
  zero, in which case <c>D</c> is returned unchanged.</p>
</desc></func>
<func>
<name since="">null_text(S::string()) -&gt; #text{s=deep_string()}</name>
<fsummary>Similar to text/1, but the result is treated as having  
zero width.</fsummary>

<desc><marker id="null_text-1"/>

<p>Similar to <seemfa marker="#text/1">text/1</seemfa>, but the result is treated as having  
zero width. This is regardless of the actual length of the string.  
Null text is typically used for markup, which is supposed to have no  
effect on the actual layout.</p>
 
  <p>The standard example is when formatting source code as HTML to be
  placed within <c>&lt;pre&gt;...&lt;/pre&gt;</c> markup, and using e.g. <c>&lt;i&gt;</c> and <c>&lt;b&gt;</c>
  to make parts of the source code stand out. In this case, the markup
  does not add to the width of the text when viewed in an HTML browser,
  so the layout engine should simply pretend that the markup has zero
  width.
 </p>
<p><em>See also:</em> <seemfa marker="#empty/0">empty/0</seemfa>, <seemfa marker="#text/1">text/1</seemfa>.</p>
</desc></func>
<func>
<name since="">par(Ds::[<seeerl marker="#type-document">document()</seeerl>]) -&gt; #sep{ds=[<seeerl marker="#type-document">document()</seeerl>], i=integer(), p=boolean()}</name>
<fsummary>Equivalent to par(Ds, 0).
</fsummary>

<desc><marker id="par-1"/>
<p>Equivalent to <seemfa marker="#par/2">par(Ds, 0)</seemfa>.</p>
</desc></func>
<func>
<name since="">par(Ds::[<seeerl marker="#type-document">document()</seeerl>], N::integer()) -&gt; #sep{ds=[<seeerl marker="#type-document">document()</seeerl>], i=integer(), p=boolean()}</name>
<fsummary>Arranges documents in a paragraph-like layout.</fsummary>

<desc><marker id="par-2"/>

<p>Arranges documents in a paragraph-like layout. Returns a
  document representing all possible left-aligned paragraph-like
  layouts of the (nonempty) sequence <c>Docs</c> of documents. Elements in
  <c>Docs</c> are separated horizontally by a single space character and
  vertically with a single line break. All lines following the first
  (if any) are indented to the same left column, whose indentation is
  specified by the optional <c>Offset</c> parameter relative to the position
  of the first element in <c>Docs</c>. For example, with an offset of -4,  
the following layout can be produced, for a list of documents  
representing the numbers 0 to 15:</p>
 
  <pre>         0 1 2 3
     4 5 6 7 8 9
     10 11 12 13
     14 15</pre><p>
  or with an offset of +2:
  </p><pre>     0 1 2 3 4 5 6
       7 8 9 10 11
       12 13 14 15</pre>
 
  <p>The utility function <seemfa marker="#text_par/2">text_par/2</seemfa> can be used to easily
  transform a string of text into a <c>par</c> representation by splitting  
it into words.</p>
 
  <p>Note that whenever a document in <c>Docs</c> contains a line break, it
  will be placed on a separate line. Thus, neither a layout such as
  </p><pre>     ab cd
        ef</pre><p>
  nor
  </p><pre>     ab
     cd ef</pre><p>
  will be generated. However, a useful idiom for making the former
  variant possible (when wanted) is <c>beside(par([D1, text("")], N),
  D2)</c> for two documents <c>D1</c> and <c>D2</c>. This will break the line
  between <c>D1</c> and <c>D2</c> if <c>D1</c> contains a line break (or if otherwise
  necessary), and optionally further indent <c>D2</c> by <c>N</c> character
  positions. The utility function <seemfa marker="#follow/3">follow/3</seemfa> creates this context
  for two documents <c>D1</c> and <c>D2</c>, and an optional integer <c>N</c>.
 </p>
<p><em>See also:</em> <seemfa marker="#par/1">par/1</seemfa>, <seemfa marker="#text_par/2">text_par/2</seemfa>.</p>
</desc></func>
<func>
<name since="">sep(Ds::[<seeerl marker="#type-document">document()</seeerl>]) -&gt; #sep{ds=[<seeerl marker="#type-document">document()</seeerl>], i=integer(), p=boolean()}</name>
<fsummary>Arranges documents horizontally or vertically, separated by
  whitespace.</fsummary>

<desc><marker id="sep-1"/>

<p>Arranges documents horizontally or vertically, separated by
  whitespace. Returns a document representing two alternative layouts
  of the (nonempty) sequence <c>Docs</c> of documents, such that either all
  elements in <c>Docs</c> are concatenated horizontally, and separated by a  
space character, or all elements are concatenated vertically (without  
extra separation).</p>
 
  <p>Note: If some document in <c>Docs</c> contains a line break, the vertical  
layout will always be selected.</p>
 
  <p>Examples:
  </p><pre>                                  ab
     ab  cd  ef  =&gt;  ab cd ef  |  cd
                                  ef
 
     ab           ab
     cd  ef  =&gt;   cd
                  ef</pre><p>
 </p>
<p><em>See also:</em> <seemfa marker="#par/2">par/2</seemfa>.</p>
</desc></func>
<func>
<name since="">text(S::string()) -&gt; #text{s=deep_string()}</name>
<fsummary>Yields a document representing a fixed, unbreakable sequence of
  characters.</fsummary>

<desc><marker id="text-1"/>

<p>Yields a document representing a fixed, unbreakable sequence of
  characters. The string should contain only <em>printable</em>
  characters (tabs allowed but not recommended), and <em>not</em>
  newline, line feed, vertical tab, etc. A tab character (<c>\t</c>) is
  interpreted as padding of 1-8 space characters to the next column of
  8 characters <em>within the string</em>.
 </p>
<p><em>See also:</em> <seemfa marker="#empty/0">empty/0</seemfa>, <seemfa marker="#null_text/1">null_text/1</seemfa>, <seemfa marker="#text_par/2">text_par/2</seemfa>.</p>
</desc></func>
<func>
<name since="">text_par(S::string()) -&gt; <seeerl marker="#type-document">document()</seeerl></name>
<fsummary>Equivalent to text_par(Text, 0).
</fsummary>

<desc><marker id="text_par-1"/>
<p>Equivalent to <seemfa marker="#text_par/2">text_par(Text, 0)</seemfa>.</p>
</desc></func>
<func>
<name since="">text_par(S::string(), N::integer()) -&gt; <seeerl marker="#type-document">document()</seeerl></name>
<fsummary>Yields a document representing paragraph-formatted plain text.</fsummary>

<desc><marker id="text_par-2"/>

<p>Yields a document representing paragraph-formatted plain text.
  The optional <c>Indentation</c> parameter specifies the extra indentation
  of the first line of the paragraph. For example, <c>text_par("Lorem
  ipsum dolor sit amet", N)</c> could represent
  </p><pre>     Lorem ipsum dolor
     sit amet</pre><p>
  if <c>N</c> = 0, or
  </p><pre>       Lorem ipsum
     dolor sit amet</pre><p>
  if <c>N</c> = 2, or
  </p><pre>     Lorem ipsum dolor
       sit amet</pre><p>
  if <c>N</c> = -2.</p>
 
  <p>(The sign of the indentation is thus reversed compared to the <seemfa marker="#par/2">par/2</seemfa> function, and the behaviour varies slightly depending on the  
sign in order to match the expected layout of a paragraph of text.)</p>
 
  <p>Note that this is just a utility function, which does all the work of
  splitting the given string into words separated by whitespace and
  setting up a <seemfa marker="#par/2">par</seemfa> with the proper indentation,
  containing a list of <seemfa marker="#text/1">text</seemfa> elements.
 </p>
<p><em>See also:</em> <seemfa marker="#par/2">par/2</seemfa>, <seemfa marker="#text/1">text/1</seemfa>, <seemfa marker="#text_par/1">text_par/1</seemfa>.</p>
</desc></func></funcs>

<authors>

<aname>Richard Carlsson</aname>
<email>carlsson.richard@gmail.com</email></authors></erlref>