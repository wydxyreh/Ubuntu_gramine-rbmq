<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>erl_prettypr</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>erl_prettypr.xml</file></header>
<module>erl_prettypr</module>
<modulesummary>Pretty printing of abstract Erlang syntax trees.</modulesummary>
<description>
<p>Pretty printing of abstract Erlang syntax trees.</p>
 
  <p>This module is a front end to the pretty-printing library module
  <c>prettypr</c>, for text formatting of abstract syntax trees defined by
  the module <c>erl_syntax</c>.</p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-clause_t"/>clause_t() = case_expr | fun_expr | if_expr | maybe_expr | receive_expr | try_expr | {function, <seeerl marker="syntax_tools:prettypr#type-document">prettypr:document()</seeerl>} | spec</tag>
<item><p/> </item>
<tag><marker id="type-context"/>context() = #ctxt{prec=integer(), sub_indent=non_neg_integer(), break_indent=non_neg_integer(), clause=<seeerl marker="#type-clause_t">clause_t()</seeerl> | undefined, hook=<seeerl marker="#type-hook">hook()</seeerl>, paper=integer(), ribbon=integer(), user=term(), encoding=<seeerl marker="stdlib:epp#type-source_encoding">epp:source_encoding()</seeerl>, empty_lines=<seeerl marker="stdlib:sets#type-set">sets:set(integer())</seeerl>}</tag>
<item><p/> </item>
<tag><marker id="type-hook"/>hook() = none | (<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>, term(), term()) -&gt; <seeerl marker="syntax_tools:prettypr#type-document">prettypr:document()</seeerl></tag>
<item><p/> </item>
<tag><marker id="type-syntaxTree"/>syntaxTree() = <seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl></tag>
<item><p/>
<p>An abstract syntax tree. See the <seeerl marker="erl_syntax">erl_syntax</seeerl> module for
  details.
 </p>
</item>
</taglist></section>
<funcs>
<func>
<name since="">best(Node::<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>) -&gt; empty | <seeerl marker="syntax_tools:prettypr#type-document">prettypr:document()</seeerl></name>
<fsummary>Equivalent to best(Tree, []).
</fsummary>

<desc><marker id="best-1"/>
<p>Equivalent to <seemfa marker="#best/2">best(Tree, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">best(Node::<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>, Options::[term()]) -&gt; empty | <seeerl marker="syntax_tools:prettypr#type-document">prettypr:document()</seeerl></name>
<fsummary>Creates a fixed "best" abstract layout for a syntax tree.</fsummary>

<desc><marker id="best-2"/>

<p>Creates a fixed "best" abstract layout for a syntax tree. This
  is similar to the <c>layout/2</c> function, except that here, the final
  layout has been selected with respect to the given options. The atom
  <c>empty</c> is returned if no such layout could be produced. For
  information on the options, see the <c>format/2</c> function.
 </p>
<p><em>See also:</em> <seemfa marker="#best/1">best/1</seemfa>, <seemfa marker="#format/2">format/2</seemfa>, <seemfa marker="#layout/2">layout/2</seemfa>, <seemfa marker="prettypr#best/3">prettypr:best/3</seemfa>.</p>
</desc></func>
<func>
<name since="">format(Node::<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>) -&gt; string()</name>
<fsummary>Equivalent to format(Tree, []).
</fsummary>

<desc><marker id="format-1"/>
<p>Equivalent to <seemfa marker="#format/2">format(Tree, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">format(Node::<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>, Options::[term()]) -&gt; string()</name>
<fsummary>Prettyprint-formats an abstract Erlang syntax tree as text.</fsummary>

<desc><marker id="format-2"/>

<p>Prettyprint-formats an abstract Erlang syntax tree as text. For
  example, if you have a <c>.beam</c> file that has been compiled with
  <c>debug_info</c>, the following should print the source code for the
  module (as it looks in the debug info representation):
  </p><pre>     {ok,{_,[{abstract_code,{_,AC}}]}} =
             beam_lib:chunks("myfile.beam",[abstract_code]),
     io:put_chars(erl_prettypr:format(erl_syntax:form_list(AC)))</pre><p>
 
  Available options:
  </p><taglist>
    <tag>{hook, none | <seeerl marker="#type-hook">hook()</seeerl>}</tag>
        <item><p>Unless the value is <c>none</c>, the given function is called
        for each node whose list of annotations is not empty; see below
        for details. The default value is <c>none</c>.</p></item>
 
    <tag>{paper, integer()}</tag>
        <item><p>Specifies the preferred maximum number of characters on any
        line, including indentation. The default value is 80.</p></item>
 
    <tag>{ribbon, integer()}</tag>
        <item><p>Specifies the preferred maximum number of characters on any
        line, not counting indentation. The default value is 65.</p></item>
 
    <tag>{user, term()}</tag>
        <item><p>User-specific data for use in hook functions. The default
        value is <c>undefined</c>.</p></item>
    <tag>{encoding, epp:source_encoding()}</tag>
        <item><p>Specifies the encoding of the generated file.</p></item>
  </taglist><p>
 
  A hook function (cf. the <seeerl marker="#type-hook">hook()</seeerl> type) is passed the current
  syntax tree node, the context, and a continuation. The context can be
  examined and manipulated by functions such as <c>get_ctxt_user/1</c> and
  <c>set_ctxt_user/2</c>. The hook must return a "document" data structure
  (see <seemfa marker="#layout/2">layout/2</seemfa> and <seemfa marker="#best/2">best/2</seemfa>); this may be constructed in
  part or in whole by applying the continuation function. For example,
  the following is a trivial hook:
  </p><pre>      fun (Node, Ctxt, Cont) -&gt; Cont(Node, Ctxt) end</pre><p>
  which yields the same result as if no hook was given.
  The following, however:
  </p><pre>      fun (Node, Ctxt, Cont) -&gt;
          Doc = Cont(Node, Ctxt),
          prettypr:beside(prettypr:text("&lt;b&gt;"),
                          prettypr:beside(Doc,
                                          prettypr:text("&lt;/b&gt;")))
      end</pre><p>
  will place the text of any annotated node (regardless of the
  annotation data) between HTML "boldface begin" and "boldface end"
  tags.
 </p>
<p><em>See also:</em> <seeerl marker="erl_syntax">erl_syntax</seeerl>, <seemfa marker="#best/2">best/2</seemfa>, <seemfa marker="#format/1">format/1</seemfa>, <seemfa marker="#get_ctxt_user/1">get_ctxt_user/1</seemfa>, <seemfa marker="#layout/2">layout/2</seemfa>, <seemfa marker="#set_ctxt_user/2">set_ctxt_user/2</seemfa>.</p>
</desc></func>
<func>
<name since="">get_ctxt_hook(Ctxt::<seeerl marker="#type-context">context()</seeerl>) -&gt; <seeerl marker="#type-hook">hook()</seeerl></name>
<fsummary>Returns the hook function field of the prettyprinter context.</fsummary>

<desc><marker id="get_ctxt_hook-1"/>

<p>Returns the hook function field of the prettyprinter context.</p>
<p><em>See also:</em> <seemfa marker="#set_ctxt_hook/2">set_ctxt_hook/2</seemfa>.</p>
</desc></func>
<func>
<name since="">get_ctxt_linewidth(Ctxt::<seeerl marker="#type-context">context()</seeerl>) -&gt; integer()</name>
<fsummary>Returns the line widh field of the prettyprinter context.</fsummary>

<desc><marker id="get_ctxt_linewidth-1"/>

<p>Returns the line widh field of the prettyprinter context.</p>
<p><em>See also:</em> <seemfa marker="#set_ctxt_linewidth/2">set_ctxt_linewidth/2</seemfa>.</p>
</desc></func>
<func>
<name since="">get_ctxt_paperwidth(Ctxt::<seeerl marker="#type-context">context()</seeerl>) -&gt; integer()</name>
<fsummary>Returns the paper widh field of the prettyprinter context.</fsummary>

<desc><marker id="get_ctxt_paperwidth-1"/>

<p>Returns the paper widh field of the prettyprinter context.</p>
<p><em>See also:</em> <seemfa marker="#set_ctxt_paperwidth/2">set_ctxt_paperwidth/2</seemfa>.</p>
</desc></func>
<func>
<name since="">get_ctxt_precedence(Ctxt::<seeerl marker="#type-context">context()</seeerl>) -&gt; integer()</name>
<fsummary>Returns the operator precedence field of the prettyprinter
  context.</fsummary>

<desc><marker id="get_ctxt_precedence-1"/>

<p>Returns the operator precedence field of the prettyprinter
  context.
 </p>
<p><em>See also:</em> <seemfa marker="#set_ctxt_precedence/2">set_ctxt_precedence/2</seemfa>.</p>
</desc></func>
<func>
<name since="">get_ctxt_user(Ctxt::<seeerl marker="#type-context">context()</seeerl>) -&gt; term()</name>
<fsummary>Returns the user data field of the prettyprinter context.</fsummary>

<desc><marker id="get_ctxt_user-1"/>

<p>Returns the user data field of the prettyprinter context.</p>
<p><em>See also:</em> <seemfa marker="#set_ctxt_user/2">set_ctxt_user/2</seemfa>.</p>
</desc></func>
<func>
<name since="">layout(Node::<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>) -&gt; <seeerl marker="syntax_tools:prettypr#type-document">prettypr:document()</seeerl></name>
<fsummary>Equivalent to layout(Tree, []).
</fsummary>

<desc><marker id="layout-1"/>
<p>Equivalent to <seemfa marker="#layout/2">layout(Tree, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">layout(Node::<seeerl marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seeerl>, Options::[term()]) -&gt; <seeerl marker="syntax_tools:prettypr#type-document">prettypr:document()</seeerl></name>
<fsummary>Creates an abstract document layout for a syntax tree.</fsummary>

<desc><marker id="layout-2"/>

<p>Creates an abstract document layout for a syntax tree. The
  result represents a set of possible layouts (cf. module <c>prettypr</c>).
  For information on the options, see <seemfa marker="#format/2">format/2</seemfa>; note, however,
  that the <c>paper</c> and <c>ribbon</c> options are ignored by this function.</p>
 
  <p>This function provides a low-level interface to the pretty printer,
  returning a flexible representation of possible layouts, independent
  of the paper width eventually to be used for formatting. This can be
  included as part of another document and/or further processed
  directly by the functions in the <c>prettypr</c> module, or used in a hook
  function (see <c>format/2</c> for details).
 </p>
<p><em>See also:</em> <seeerl marker="prettypr">prettypr</seeerl>, <seemfa marker="#format/2">format/2</seemfa>, <seemfa marker="#layout/1">layout/1</seemfa>.</p>
</desc></func>
<func>
<name since="">set_ctxt_hook(Ctxt::<seeerl marker="#type-context">context()</seeerl>, Hook::<seeerl marker="#type-hook">hook()</seeerl>) -&gt; <seeerl marker="#type-context">context()</seeerl></name>
<fsummary>Updates the hook function field of the prettyprinter context.</fsummary>

<desc><marker id="set_ctxt_hook-2"/>

<p>Updates the hook function field of the prettyprinter context.</p>
<p><em>See also:</em> <seemfa marker="#get_ctxt_hook/1">get_ctxt_hook/1</seemfa>.</p>
</desc></func>
<func>
<name since="">set_ctxt_linewidth(Ctxt::<seeerl marker="#type-context">context()</seeerl>, W::integer()) -&gt; <seeerl marker="#type-context">context()</seeerl></name>
<fsummary>Updates the line widh field of the prettyprinter context.</fsummary>

<desc><marker id="set_ctxt_linewidth-2"/>

<p>Updates the line widh field of the prettyprinter context.</p>
 
  <p>Note: changing this value (and passing the resulting context to a
  continuation function) does not affect the normal formatting, but may
  affect user-defined behaviour in hook functions.
 </p>
<p><em>See also:</em> <seemfa marker="#get_ctxt_linewidth/1">get_ctxt_linewidth/1</seemfa>.</p>
</desc></func>
<func>
<name since="">set_ctxt_paperwidth(Ctxt::<seeerl marker="#type-context">context()</seeerl>, W::integer()) -&gt; <seeerl marker="#type-context">context()</seeerl></name>
<fsummary>Updates the paper widh field of the prettyprinter context.</fsummary>

<desc><marker id="set_ctxt_paperwidth-2"/>

<p>Updates the paper widh field of the prettyprinter context.</p>
 
  <p>Note: changing this value (and passing the resulting context to a
  continuation function) does not affect the normal formatting, but may
  affect user-defined behaviour in hook functions.
 </p>
<p><em>See also:</em> <seemfa marker="#get_ctxt_paperwidth/1">get_ctxt_paperwidth/1</seemfa>.</p>
</desc></func>
<func>
<name since="">set_ctxt_precedence(Ctxt::<seeerl marker="#type-context">context()</seeerl>, Prec::integer()) -&gt; <seeerl marker="#type-context">context()</seeerl></name>
<fsummary>Updates the operator precedence field of the prettyprinter
  context.</fsummary>

<desc><marker id="set_ctxt_precedence-2"/>

<p>Updates the operator precedence field of the prettyprinter
  context. See the <seeerl marker="stdlib:erl_parse">erl_parse(3)</seeerl> module for operator precedences.
 </p>
<p><em>See also:</em> <seeerl marker="stdlib:erl_parse">erl_parse(3)</seeerl>, <seemfa marker="#get_ctxt_precedence/1">get_ctxt_precedence/1</seemfa>.</p>
</desc></func>
<func>
<name since="">set_ctxt_user(Ctxt::<seeerl marker="#type-context">context()</seeerl>, X::term()) -&gt; <seeerl marker="#type-context">context()</seeerl></name>
<fsummary>Updates the user data field of the prettyprinter context.</fsummary>

<desc><marker id="set_ctxt_user-2"/>

<p>Updates the user data field of the prettyprinter context.</p>
<p><em>See also:</em> <seemfa marker="#get_ctxt_user/1">get_ctxt_user/1</seemfa>.</p>
</desc></func></funcs>

<authors>

<aname>Richard Carlsson</aname>
<email>carlsson.richard@gmail.com</email></authors></erlref>