<module name="erl_syntax_lib">
<type>
  <name>appFunName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-appFunName">appFunName()</marker> = {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>} | {<seetype marker="erlang#atom">atom()</seetype>, {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}}</typehead></typedecl>
</type>
<type>
  <name>field</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-field">field()</marker> = {<seetype marker="erlang#atom">atom()</seetype>, {<seetype marker="#field_default">field_default()</seetype>, <seetype marker="#field_type">field_type()</seetype>}}</typehead></typedecl>
</type>
<type>
  <name>field_default</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-field_default">field_default()</marker> = none | <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></typehead></typedecl>
</type>
<type>
  <name>field_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-field_type">field_type()</marker> = none | <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></typehead></typedecl>
</type>
<type>
  <name>fields</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fields">fields()</marker> = [<seetype marker="#field">field()</seetype>]</typehead></typedecl>
</type>
<type>
  <name>functionN</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-functionN">functionN()</marker> = <seetype marker="erlang#atom">atom()</seetype> | {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>functionName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-functionName">functionName()</marker> = <seetype marker="#functionN">functionN()</seetype> | {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="#functionN">functionN()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info">info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, [{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#atom">atom()</seetype>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#atom">atom()</seetype></typehead></typedecl>
</type>
<type>
  <name>info_pair</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_pair">info_pair()</marker> = {<seetype marker="#key">key()</seetype>, <seetype marker="erlang#term">term()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>key</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-key">key()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>attributes | errors | exports | functions | imports | module |<br/><nbsp/><nbsp/><nbsp/><nbsp/>records | warnings</typehead></typedecl>
</type>
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = <seetype marker="#shortname">shortname()</seetype> | {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="#shortname">shortname()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>shortname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-shortname">shortname()</marker> = <seetype marker="erlang#atom">atom()</seetype> | {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>typeName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-typeName">typeName()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#atom">atom()</seetype> | {<seetype marker="erlang#module">module()</seetype>, {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}} | {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}</typehead></typedecl>
</type>
<spec>
  <name>analyze_application</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_application(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#appFunName">appFunName()</seetype> | <seetype marker="erlang#arity">arity()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>preprocessor | {<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_export_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_export_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="#functionName">functionName()</seetype>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_file_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_file_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#string">string()</seetype>, <seetype marker="erlang#integer">integer()</seetype>}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_form</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_form(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>} | <seetype marker="erlang#atom">atom()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_forms</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_forms(Forms :: <seetype marker="erl_syntax#forms">erl_syntax:forms()</seetype>) -&gt; [<seetype marker="#info_pair">info_pair()</seetype>]</head></clause>
  </contract>
  <anno>Forms</anno>
</spec>
<spec>
  <name>analyze_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_function(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#arity">arity()</seetype>}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_function_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_function_name(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#functionName">functionName()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_implicit_fun</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_implicit_fun(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#functionName">functionName()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_import_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_import_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, [<seetype marker="#functionName">functionName()</seetype>]} | <seetype marker="erlang#atom">atom()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_module_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_module_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#atom">atom()</seetype> | {<seetype marker="erlang#atom">atom()</seetype>, [<seetype marker="erlang#atom">atom()</seetype>]}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_record_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_record_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="#fields">fields()</seetype>}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_record_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_record_expr(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="#info">info()</seetype>} | <seetype marker="erlang#atom">atom()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_record_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_record_field(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt; <seetype marker="#field">field()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_type_application</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_type_application(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="#typeName">typeName()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_type_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_type_name(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt; <seetype marker="#typeName">typeName()</seetype></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_wild_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_wild_attribute(Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erlang#atom">atom()</seetype>, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>annotate_bindings</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>annotate_bindings(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>annotate_bindings</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>annotate_bindings(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Env :: <seetype marker="ordsets#ordset">ordsets:ordset</seetype>(<seetype marker="erlang#atom">atom()</seetype>)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>fold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold(F :: fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>fold_subtrees</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold_subtrees(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>foldl_listlist</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl_listlist(F :: fun((<seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ls :: [[<seetype marker="erlang#term">term()</seetype>]]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Ls</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>function_name_expansions</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_name_expansions(Fs :: [<seetype marker="#name">name()</seetype>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seetype marker="#shortname">shortname()</seetype>, <seetype marker="#name">name()</seetype>}]</head></clause>
  </contract>
  <anno>Fs</anno>
</spec>
<spec>
  <name>is_fail_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_fail_expr(E :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>E</anno>
</spec>
<spec>
  <name>limit</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>limit(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, Depth :: <seetype marker="erlang#integer">integer()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>limit</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>limit(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Node :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Node</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(F :: fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt; <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>map_subtrees</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_subtrees(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>mapfold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfold(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>mapfold_subtrees</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfold_subtrees(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>mapfoldl_listlist</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfoldl_listlist(F :: fun((<seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>) -&gt; {<seetype marker="erlang#term">term()</seetype>, <seetype marker="erlang#term">term()</seetype>}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="erlang#term">term()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ls :: [[<seetype marker="erlang#term">term()</seetype>]]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[[<seetype marker="erlang#term">term()</seetype>]], <seetype marker="erlang#term">term()</seetype>}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>Ls</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new_variable_name(S :: <seetype marker="sets#set">sets:set</seetype>(<seetype marker="erlang#atom">atom()</seetype>)) -&gt; <seetype marker="erlang#atom">atom()</seetype></head></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_name</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_variable_name(F :: fun((<seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#atom">atom()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="sets#set">sets:set</seetype>(<seetype marker="erlang#atom">atom()</seetype>)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erlang#atom">atom()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_names</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_variable_names(N :: <seetype marker="erlang#integer">integer()</seetype>, S :: <seetype marker="sets#set">sets:set</seetype>(<seetype marker="erlang#atom">atom()</seetype>)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="erlang#atom">atom()</seetype>]</head></clause>
  </contract>
  <anno>N</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_names</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>new_variable_names(N :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: fun((<seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="erlang#atom">atom()</seetype>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seetype marker="sets#set">sets:set</seetype>(<seetype marker="erlang#atom">atom()</seetype>)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seetype marker="erlang#atom">atom()</seetype>]</head></clause>
  </contract>
  <anno>F</anno>
  <anno>N</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>strip_comments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strip_comments(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>to_comment</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_comment(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>to_comment</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>to_comment(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>, Prefix :: <seetype marker="erlang#string">string()</seetype>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>Prefix</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>to_comment</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>to_comment(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Prefix :: <seetype marker="erlang#string">string()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: fun((<seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt; <seetype marker="erlang#string">string()</seetype>)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Prefix</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>variables</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>variables(Tree :: <seetype marker="erl_syntax#syntaxTree">erl_syntax:syntaxTree()</seetype>) -&gt; <seetype marker="sets#set">sets:set</seetype>(<seetype marker="erlang#atom">atom()</seetype>)</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:45:19.</timestamp>
</module>