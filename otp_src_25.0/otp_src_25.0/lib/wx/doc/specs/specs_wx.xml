<module name="wx">
<type>
  <name>wx_colour</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_colour">wx_colour()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{R :: <seetype marker="erlang#byte">byte()</seetype>, G :: <seetype marker="erlang#byte">byte()</seetype>, B :: <seetype marker="erlang#byte">byte()</seetype>} | <seetype marker="#wx_colour4">wx_colour4()</seetype></typehead></typedecl>
  <anno>B</anno>
  <anno>G</anno>
  <anno>R</anno>
</type>
<type>
  <name>wx_colour4</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_colour4">wx_colour4()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{R :: <seetype marker="erlang#byte">byte()</seetype>, G :: <seetype marker="erlang#byte">byte()</seetype>, B :: <seetype marker="erlang#byte">byte()</seetype>, A :: <seetype marker="erlang#byte">byte()</seetype>}</typehead></typedecl>
  <anno>A</anno>
  <anno>B</anno>
  <anno>G</anno>
  <anno>R</anno>
</type>
<type>
  <name>wx_datetime</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_datetime">wx_datetime()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{{Year :: <seetype marker="erlang#integer">integer()</seetype>, Month :: <seetype marker="erlang#integer">integer()</seetype>, Day :: <seetype marker="erlang#integer">integer()</seetype>},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Hour :: <seetype marker="erlang#integer">integer()</seetype>, Minute :: <seetype marker="erlang#integer">integer()</seetype>, Second :: <seetype marker="erlang#integer">integer()</seetype>}}</typehead></typedecl>
  <anno>Day</anno>
  <anno>Hour</anno>
  <anno>Minute</anno>
  <anno>Month</anno>
  <anno>Second</anno>
  <anno>Year</anno>
</type>
<type>
  <name>wx_enum</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_enum">wx_enum()</marker> = <seetype marker="erlang#integer">integer()</seetype></typehead></typedecl>
</type>
<type>
  <name>wx_env</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_env">wx_env()</marker> = #wx_env{}</typehead></typedecl>
</type>
<type>
  <name>wx_memory</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_memory">wx_memory()</marker> = <seetype marker="erlang#binary">binary()</seetype> | #wx_mem{}</typehead></typedecl>
</type>
<type>
  <name>wx_object</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_object">wx_object()</marker> = #wx_ref{}</typehead></typedecl>
</type>
<type>
  <name>wx_wxHtmlLinkInfo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_wxHtmlLinkInfo">wx_wxHtmlLinkInfo()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#wxHtmlLinkInfo{href = <seetype marker="unicode#chardata">unicode:chardata()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>target = <seetype marker="unicode#chardata">unicode:chardata()</seetype>}</typehead></typedecl>
</type>
<type>
  <name>wx_wxMouseState</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_wxMouseState">wx_wxMouseState()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#wxMouseState{x = <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>y = <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>leftDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>middleDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>rightDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>controlDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shiftDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>altDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>metaDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cmdDown = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>aux1Down = <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>aux2Down = <seetype marker="erlang#boolean">boolean()</seetype>}</typehead></typedecl>
</type>
<spec>
  <name>batch</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>batch(Fun :: <seetype marker="erlang#function">function()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>create_memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>create_memory(Size :: <seetype marker="erlang#integer">integer()</seetype>) -&gt; <seetype marker="#wx_memory">wx_memory()</seetype></head></clause>
  </contract>
  <anno>Size</anno>
</spec>
<spec>
  <name>debug</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>debug(Debug :: Level | [Level]) -&gt; ok</head>
      <guard>
        <subtype><typename>Level</typename><string>Level = none | verbose | trace | driver | <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Debug</anno>
  <anno>Level</anno>
</spec>
<spec>
  <name>demo</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>demo() -&gt; ok | {error, <seetype marker="erlang#atom">atom()</seetype>}</head></clause>
  </contract>
</spec>
<spec>
  <name>destroy</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>destroy() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>equal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>equal(Wx_ref :: <seetype marker="#wx_object">wx_object()</seetype>, X2 :: <seetype marker="#wx_object">wx_object()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Wx_ref</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl(Fun :: <seetype marker="erlang#function">function()</seetype>, Acc :: <seetype marker="erlang#term">term()</seetype>, List :: <seetype marker="erlang#list">list()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldr(Fun :: <seetype marker="erlang#function">function()</seetype>, Acc :: <seetype marker="erlang#term">term()</seetype>, List :: <seetype marker="erlang#list">list()</seetype>) -&gt; <seetype marker="erlang#term">term()</seetype></head></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>foreach</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>foreach(Fun :: <seetype marker="erlang#function">function()</seetype>, List :: <seetype marker="erlang#list">list()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>getObjectType</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getObjectType(Wx_ref :: <seetype marker="#wx_object">wx_object()</seetype>) -&gt; <seetype marker="erlang#atom">atom()</seetype></head></clause>
  </contract>
  <anno>Wx_ref</anno>
</spec>
<spec>
  <name>get_env</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_env() -&gt; <seetype marker="#wx_env">wx_env()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>get_memory_bin</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_memory_bin(Wx_mem :: <seetype marker="#wx_memory">wx_memory()</seetype>) -&gt; <seetype marker="erlang#binary">binary()</seetype></head></clause>
  </contract>
  <anno>Wx_mem</anno>
</spec>
<spec>
  <name>is_null</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_null(Wx_ref :: <seetype marker="#wx_object">wx_object()</seetype>) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head></clause>
  </contract>
  <anno>Wx_ref</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Fun :: <seetype marker="erlang#function">function()</seetype>, List :: <seetype marker="erlang#list">list()</seetype>) -&gt; <seetype marker="erlang#list">list()</seetype></head></clause>
  </contract>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seetype marker="#wx_object">wx_object()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Options :: [Option]) -&gt; <seetype marker="#wx_object">wx_object()</seetype></head>
      <guard>
        <subtype><typename>Option</typename><string>Option = {debug, <seetype marker="erlang#list">list()</seetype> | <seetype marker="erlang#atom">atom()</seetype>} | {silent_start, <seetype marker="erlang#boolean">boolean()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>null</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>null() -&gt; <seetype marker="#wx_object">wx_object()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>parent_class</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>release_memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>release_memory(Wx_mem :: <seetype marker="#wx_memory">wx_memory()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>Wx_mem</anno>
</spec>
<spec>
  <name>retain_memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>retain_memory(Wx_mem :: <seetype marker="#wx_memory">wx_memory()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>Wx_mem</anno>
</spec>
<spec>
  <name>set_env</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>set_env(Wx_env :: <seetype marker="#wx_env">wx_env()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>Wx_env</anno>
</spec>
<spec>
  <name>subscribe_events</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>subscribe_events() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>typeCast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>typeCast(Old :: <seetype marker="#wx_object">wx_object()</seetype>, NewType :: <seetype marker="erlang#atom">atom()</seetype>) -&gt; <seetype marker="#wx_object">wx_object()</seetype></head></clause>
  </contract>
  <anno>NewType</anno>
  <anno>Old</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:44:27.</timestamp>
</module>