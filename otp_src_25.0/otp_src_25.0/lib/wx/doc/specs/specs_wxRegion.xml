<module name="wxRegion">
<type>
  <name>wxRegion</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wxRegion">wxRegion()</marker> = <seetype marker="wx#wx_object">wx:wx_object()</seetype></typehead></typedecl>
</type>
<spec>
  <name>'Xor'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>'Xor'(This, Rect) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Rect</typename><string>Rect = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Rect</anno>
  <anno>This</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>'Xor'</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>'Xor'(This, Region) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = Region = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Region</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Region</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>'Xor'</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>'Xor'(This, X, Y, Width, Height) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Height = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>This</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>clear</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clear(This) -&gt; ok</head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>contains</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>contains(This, Pt) -&gt; <seetype marker="wx#wx_enum">wx:wx_enum()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Pt</typename><string>Pt = {X :: <seetype marker="erlang#integer">integer()</seetype>, Y :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pt</anno>
  <anno>This</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>contains</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>contains(This, Rect) -&gt; <seetype marker="wx#wx_enum">wx:wx_enum()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Rect</typename><string>Rect = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Rect</anno>
  <anno>This</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>contains</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>contains(This, X, Y) -&gt; <seetype marker="wx#wx_enum">wx:wx_enum()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>X</typename><string>X = Y = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>contains</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>contains(This, X, Y, Width, Height) -&gt; <seetype marker="wx#wx_enum">wx:wx_enum()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Height = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>This</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>convertToBitmap</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>convertToBitmap(This) -&gt; <seetype marker="wxBitmap#wxBitmap">wxBitmap:wxBitmap()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>destroy</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>destroy(This :: <seetype marker="#wxRegion">wxRegion()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>getBox</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getBox(This) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>This</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>intersect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>intersect(This, Rect) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Rect</typename><string>Rect = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Rect</anno>
  <anno>This</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>intersect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>intersect(This, Region) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = Region = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Region</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Region</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>intersect</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>intersect(This, X, Y, Width, Height) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Height = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>This</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>isEmpty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isEmpty(This) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seetype marker="#wxRegion">wxRegion()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Rect) -&gt; <seetype marker="#wxRegion">wxRegion()</seetype></head>
      <guard>
        <subtype><typename>Rect</typename><string>Rect = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Rect</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Bmp) -&gt; <seetype marker="#wxRegion">wxRegion()</seetype></head>
      <guard>
        <subtype><typename>Bmp</typename><string>Bmp = <seetype marker="wxBitmap#wxBitmap">wxBitmap:wxBitmap()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bmp</anno>
</spec>
<spec>
  <name>new</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new(TopLeft, BottomRight) -&gt; <seetype marker="#wxRegion">wxRegion()</seetype></head>
      <guard>
        <subtype><typename>TopLeft</typename><string>TopLeft = BottomRight = {X :: <seetype marker="erlang#integer">integer()</seetype>, Y :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
        <subtype><typename>BottomRight</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BottomRight</anno>
  <anno>TopLeft</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>new</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>new(X, Y, Width, Height) -&gt; <seetype marker="#wxRegion">wxRegion()</seetype></head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Width = Height = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>offset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>offset(This, Pt) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Pt</typename><string>Pt = {X :: <seetype marker="erlang#integer">integer()</seetype>, Y :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pt</anno>
  <anno>This</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>offset</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>offset(This, X, Y) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>X</typename><string>X = Y = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>parent_class</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>subtract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>subtract(This, Rect) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Rect</typename><string>Rect = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Rect</anno>
  <anno>This</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>subtract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>subtract(This, Region) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = Region = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Region</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Region</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>union</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>union(This, Region) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Region</typename><string>Region = <seetype marker="wxRegion#wxRegion">wxRegion:wxRegion()</seetype> | <seetype marker="wxBitmap#wxBitmap">wxBitmap:wxBitmap()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Region</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>union</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>union(This, Rect) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Rect</typename><string>Rect = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>H :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Rect</anno>
  <anno>This</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>union</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>union(This, Bmp, TransColour) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Bmp</typename><string>Bmp = <seetype marker="wxBitmap#wxBitmap">wxBitmap:wxBitmap()</seetype></string></subtype>
        <subtype><typename>TransColour</typename><string>TransColour = <seetype marker="wx#wx_colour">wx:wx_colour()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bmp</anno>
  <anno>This</anno>
  <anno>TransColour</anno>
</spec>
<spec>
  <name>union</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>union(This, Bmp, TransColour, Options :: [Option]) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>Bmp</typename><string>Bmp = <seetype marker="wxBitmap#wxBitmap">wxBitmap:wxBitmap()</seetype></string></subtype>
        <subtype><typename>TransColour</typename><string>TransColour = <seetype marker="wx#wx_colour">wx:wx_colour()</seetype></string></subtype>
        <subtype><typename>Option</typename><string>Option = {tolerance, <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bmp</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>This</anno>
  <anno>TransColour</anno>
</spec>
<spec>
  <name>union</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>union(This, X, Y, Width, Height) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxRegion">wxRegion()</seetype></string></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Height = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>This</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:44:42.</timestamp>
</module>