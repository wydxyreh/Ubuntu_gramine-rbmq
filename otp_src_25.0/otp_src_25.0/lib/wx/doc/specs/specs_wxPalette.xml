<module name="wxPalette">
<type>
  <name>wxPalette</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wxPalette">wxPalette()</marker> = <seetype marker="wx#wx_object">wx:wx_object()</seetype></typehead></typedecl>
</type>
<spec>
  <name>create</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>create(This, Red, Green, Blue) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
        <subtype><typename>Red</typename><string>Red = Green = Blue = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>destroy</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>destroy(This :: <seetype marker="#wxPalette">wxPalette()</seetype>) -&gt; ok</head></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>getColoursCount</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getColoursCount(This) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>getPixel</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getPixel(This, Red, Green, Blue) -&gt; <seetype marker="erlang#integer">integer()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
        <subtype><typename>Red</typename><string>Red = Green = Blue = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>getRGB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getRGB(This, Pixel) -&gt; Result</head>
      <guard>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Res :: <seetype marker="erlang#boolean">boolean()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Red :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: <seetype marker="erlang#integer">integer()</seetype>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: <seetype marker="erlang#integer">integer()</seetype>}</string></subtype>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
        <subtype><typename>Pixel</typename><string>Pixel = <seetype marker="erlang#integer">integer()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Pixel</anno>
  <anno>Red</anno>
  <anno>Res</anno>
  <anno>Result</anno>
  <anno>This</anno>
</spec>
<spec>
  <name>isOk</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isOk(This) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seetype marker="#wxPalette">wxPalette()</seetype></head></clause>
  </contract>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Palette) -&gt; <seetype marker="#wxPalette">wxPalette()</seetype></head>
      <guard>
        <subtype><typename>Palette</typename><string>Palette = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>Palette</anno>
</spec>
<spec>
  <name>new</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>new(Red, Green, Blue) -&gt; <seetype marker="#wxPalette">wxPalette()</seetype></head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = <seetype marker="erlang#binary">binary()</seetype></string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>ok</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ok(This) -&gt; <seetype marker="erlang#boolean">boolean()</seetype></head>
      <guard>
        <subtype><typename>This</typename><string>This = <seetype marker="#wxPalette">wxPalette()</seetype></string></subtype>
      </guard></clause>
  </contract>
  <anno>This</anno>
</spec>
<spec>
  <name>parent_class</name>
  <arity>1</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 17 2022, 21:44:40.</timestamp>
</module>