<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>xmerl_xpath</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>xmerl_xpath.xml</file></header>
<module>xmerl_xpath</module>
<modulesummary>The xmerl_xpath module handles the entire XPath 1.0 spec.</modulesummary>
<description>
<p>The xmerl_xpath module handles the entire XPath 1.0 spec.
  XPath expressions typically occur in XML attributes and are used to address
  parts of an XML document.
     The grammar is defined in <c>xmerl_xpath_parse.yrl</c>.
     The core functions are defined in <c>xmerl_xpath_pred.erl</c>.</p>

     <p>Some useful shell commands for debugging the XPath parser</p>
 <pre>
 c(xmerl_xpath_scan).
 yecc:yecc("xmerl_xpath_parse.yrl", "xmerl_xpath_parse", true, []).
 c(xmerl_xpath_parse).

 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("position() &gt; -1")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("5 * 6 div 2")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("5 + 6 mod 2")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("5 * 6")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("-----6")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("parent::node()")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("descendant-or-self::node()")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("parent::processing-instruction('foo')")).
  </pre>
 </description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-docEntity"/>docEntity() = #xmlDocument{} | [<seeerl marker="#type-docNodes">docNodes()</seeerl>]</tag>
<item><p/> </item>
<tag><marker id="type-docNodes"/>docNodes() = #xmlElement{} | #xmlAttribute{} | #xmlText{} | #xmlPI{} | #xmlComment{} | #xmlNsNode{}</tag>
<item><p/> </item>
<tag><marker id="type-nodeEntity"/>nodeEntity() = #xmlElement{} | #xmlAttribute{} | #xmlText{} | #xmlPI{} | #xmlComment{} | #xmlNsNode{} | #xmlDocument{}</tag>
<item><p/> </item>
<tag><marker id="type-option_list"/>option_list()</tag>
<item><p/>
<p>Options allows to customize the behaviour of the
      XPath scanner.
  </p>
  <p>
  Possible options are:
  </p>
  <taglist>
   <tag><c>{namespace, #xmlNamespace}</c></tag>
     <item><p>Set namespace nodes, from XmlNamspace, in xmlContext</p></item>
   <tag><c>{namespace, Nodes}</c></tag>
     <item><p>Set namespace nodes in xmlContext.</p></item>
  </taglist>
</item>
<tag><marker id="type-parentList"/>parentList() = [{atom(), integer()}]</tag>
<item><p/> </item>
<tag><marker id="type-xPathString"/>xPathString() = string()</tag>
<item><p/> </item>
</taglist></section>
<funcs>
<func>
<name since="">string(Str, Doc) -&gt; [<seeerl marker="#type-docEntity">docEntity()</seeerl>] | Scalar</name>
<fsummary>Equivalent to string(Str, Doc, []).
</fsummary>

<desc><marker id="string-2"/>
<p>Equivalent to <seemfa marker="#string/3">string(Str, Doc, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">string(Str, Doc, Options) -&gt; [<seeerl marker="#type-docEntity">docEntity()</seeerl>] | Scalar</name>
<fsummary>Equivalent to string(Str, Doc, [], Doc, Options).
</fsummary>

<desc><marker id="string-3"/>
<p>Equivalent to <seemfa marker="#string/5">string(Str, Doc, [], Doc, Options)</seemfa>.</p>
</desc></func>
<func>
<name since="">string(Str, Node, Parents, Doc, Options) -&gt; [<seeerl marker="#type-docEntity">docEntity()</seeerl>] | Scalar</name>
<fsummary>Extracts the nodes from the parsed XML tree according to XPath.</fsummary>
<type>
<v>Str = <seeerl marker="#type-xPathString">xPathString()</seeerl></v><v>Node = <seeerl marker="#type-nodeEntity">nodeEntity()</seeerl></v><v>Parents = <seeerl marker="#type-parentList">parentList()</seeerl></v><v>Doc = <seeerl marker="#type-nodeEntity">nodeEntity()</seeerl></v><v>Options = <seeerl marker="#type-option_list">option_list()</seeerl></v><v>Scalar = #xmlObj{}</v></type>
<desc><marker id="string-5"/>

<p>Extracts the nodes from the parsed XML tree according to XPath.
    xmlObj is a record with fields type and value,
    where type is boolean | number | string</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>