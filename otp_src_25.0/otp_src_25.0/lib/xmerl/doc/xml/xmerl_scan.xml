<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>xmerl_scan</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>xmerl_scan.xml</file></header>
<module>xmerl_scan</module>
<modulesummary>This module is the interface to the XML parser, it handles XML 1.0.</modulesummary>
<description>
<p>This module is the interface to the XML parser, it handles XML 1.0.
      The XML parser is activated through
      <c>xmerl_scan:string/[1,2]</c> or
      <c>xmerl_scan:file/[1,2]</c>.
      It returns records of the type defined in xmerl.hrl.
  See also <url href="xmerl_examples.html">tutorial</url> on customization
  functions.</p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-document"/>document() = <seeerl marker="#type-xmlElement">xmlElement()</seeerl> | <seeerl marker="#type-xmlDocument">xmlDocument()</seeerl></tag>
<item><p/>
<p>
  The document returned by <c>xmerl_scan:string/[1,2]</c> and
  <c>xmerl_scan:file/[1,2]</c>. The type of the returned record depends on
  the value of the document option passed to the function.
  </p>
</item>
<tag><marker id="type-global_state"/>global_state()</tag>
<item><p/>
<p>
  The global state of the scanner, represented by the #xmerl_scanner{} record.
  </p>
</item>
<tag><marker id="type-option_list"/>option_list()</tag>
<item><p/>
<p>Options allow to customize the behaviour of the
      scanner.
  See also <url href="xmerl_examples.html">tutorial</url> on customization
  functions.
  </p>
  <p>
  Possible options are:
  </p>
  <taglist>
   <tag><c>{acc_fun, Fun}</c></tag>
     <item><p>Call back function to accumulate contents of entity.</p></item>
   <tag><c>{continuation_fun, Fun} |
             {continuation_fun, Fun, ContinuationState}</c></tag>
     <item><p>Call back function to decide what to do if the scanner runs into EOF
      before the document is complete.</p></item>
   <tag><c>{event_fun, Fun} |
             {event_fun, Fun, EventState}</c></tag>
     <item><p>Call back function to handle scanner events.</p></item>
   <tag><c>{fetch_fun, Fun} |
             {fetch_fun, Fun, FetchState}</c></tag>
     <item><p>Call back function to fetch an external resource.</p></item>
   <tag><c>{hook_fun, Fun} |
             {hook_fun, Fun, HookState}</c></tag>
     <item><p>Call back function to process the document entities once
      identified.</p></item>
   <tag><c>{close_fun, Fun}</c></tag>
     <item><p>Called when document has been completely parsed.</p></item>
   <tag><c>{rules, ReadFun, WriteFun, RulesState} |
             {rules, Rules}</c></tag>
     <item><p>Handles storing of scanner information when parsing.</p></item>
   <tag><c>{user_state, UserState}</c></tag>
     <item><p>Global state variable accessible from all customization functions</p></item>
 
   <tag><c>{fetch_path, PathList}</c></tag>
     <item><p>PathList is a list of
      directories to search when fetching files. If the file in question
      is not in the fetch_path, the URI will be used as a file
      name.</p></item>
   <tag><c>{space, Flag}</c></tag>
     <item><p>'preserve' (default) to preserve spaces, 'normalize' to
     accumulate consecutive whitespace and replace it with one space.</p></item>
   <tag><c>{line, Line}</c></tag>
     <item><p>To specify starting line for scanning in document which contains
     fragments of XML.</p></item>
   <tag><c>{namespace_conformant, Flag}</c></tag>
     <item><p>Controls whether to behave as a namespace conformant XML parser,
     'false' (default) to not otherwise 'true'.</p></item>
   <tag><c>{validation, Flag}</c></tag>
     <item><p>Controls whether to process as a validating XML parser:
     'off' (default) no validation, or validation 'dtd' by DTD or 'schema'
     by XML Schema. 'false' and 'true' options are obsolete
     (i.e. they may be removed in a future release), if used 'false'
     equals 'off' and 'true' equals 'dtd'.</p></item>
   <tag><c>{schemaLocation, [{Namespace,Link}|...]}</c></tag>
     <item><p>Tells explicitly which XML Schema documents to use to validate
     the XML document. Used together with the
     <c>{validation,schema}</c> option.</p></item>
   <tag><c>{quiet, Flag}</c></tag>
     <item><p>Set to 'true' if xmerl should behave quietly and not output any
     information to standard output (default 'false').</p></item>
   <tag><c>{doctype_DTD, DTD}</c></tag>
     <item><p>Allows to specify DTD name when it isn't available in the XML
     document. This option has effect only together with
     <c>{validation,'dtd'</c> option.</p></item>
   <tag><c>{xmlbase, Dir}</c></tag>
     <item><p>XML Base directory. If using string/1 default is current directory.
     If using file/1 default is directory of given file.</p></item>
   <tag><c>{encoding, Enc}</c></tag>
     <item><p>Set default character set used (default UTF-8).
     This character set is used only if not explicitly given by the XML
     declaration. </p></item>
   <tag><c>{document, Flag}</c></tag>
     <item><p>Set to 'true' if xmerl should return a complete XML document
     as an xmlDocument record (default 'false').</p></item>
   <tag><c>{comments, Flag}</c></tag>
     <item><p>Set to 'false' if xmerl should skip comments otherwise they will
     be returned as xmlComment records (default 'true').</p></item>
   <tag><c>{default_attrs, Flag}</c></tag>
     <item><p>Set to 'true' if xmerl should add to elements missing attributes
     with a defined default value (default 'false').</p></item>
  </taglist>
</item>
<tag><marker id="type-xmlDocument"/>xmlDocument() = #xmlDocument{}</tag>
<item><p/>
<p>The record definition is found in xmerl.hrl.</p>
</item>
<tag><marker id="type-xmlElement"/>xmlElement() = #xmlElement{}</tag>
<item><p/> </item>
</taglist></section>
<funcs>
<func>
<name since="">accumulate_whitespace(T::string(), S::<seeerl marker="#type-global_state">global_state()</seeerl>, X3::atom(), Acc::string()) -&gt; {Acc, T1, S1}</name>
<fsummary>Function to accumulate and normalize whitespace.</fsummary>

<desc><marker id="accumulate_whitespace-4"/>

<p>Function to accumulate and normalize whitespace.</p>
</desc></func>
<func>
<name since="">cont_state(S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>Equivalent to cont_state(ContinuationState, S).
</fsummary>

<desc><marker id="cont_state-1"/>
<p>Equivalent to <seemfa marker="#cont_state/2">cont_state(ContinuationState, S)</seemfa>.</p>
</desc></func>
<func>
<name since="">cont_state(X::ContinuationState, S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>For controlling the ContinuationState, to be used in a continuation
   function, and called when the parser encounters the end of the byte stream.</fsummary>

<desc><marker id="cont_state-2"/>

<p>For controlling the ContinuationState, to be used in a continuation
   function, and called when the parser encounters the end of the byte stream.
   See <url href="xmerl_examples.html">tutorial</url> on customization functions.</p>
</desc></func>
<func>
<name since="">event_state(S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>Equivalent to event_state(EventState, S).
</fsummary>

<desc><marker id="event_state-1"/>
<p>Equivalent to <seemfa marker="#event_state/2">event_state(EventState, S)</seemfa>.</p>
</desc></func>
<func>
<name since="">event_state(X::EventState, S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>For controlling the EventState, to be used in an event
   function, and called at the beginning and at the end of a parsed entity.</fsummary>

<desc><marker id="event_state-2"/>

<p>For controlling the EventState, to be used in an event
   function, and called at the beginning and at the end of a parsed entity.
   See <url href="xmerl_examples.html">tutorial</url> on customization functions.</p>
</desc></func>
<func>
<name since="">fetch_state(S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>Equivalent to fetch_state(FetchState, S).
</fsummary>

<desc><marker id="fetch_state-1"/>
<p>Equivalent to <seemfa marker="#fetch_state/2">fetch_state(FetchState, S)</seemfa>.</p>
</desc></func>
<func>
<name since="">fetch_state(X::FetchState, S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>For controlling the FetchState, to be used in a fetch
   function, and called when the parser fetch an external resource (eg.</fsummary>

<desc><marker id="fetch_state-2"/>

<p>For controlling the FetchState, to be used in a fetch
   function, and called when the parser fetch an external resource (eg. a DTD).
   See <url href="xmerl_examples.html">tutorial</url> on customization functions.</p>
</desc></func>
<func>
<name since="">file(Filename::string()) -&gt; {<seeerl marker="#type-xmlElement">xmlElement()</seeerl>, Rest}</name>
<fsummary>Equivalent to file(Filename, []).
</fsummary>
<type>
<v>Rest = list()</v></type>
<desc><marker id="file-1"/>
<p>Equivalent to <seemfa marker="#file/2">file(Filename, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">file(Filename::string(), Options::<seeerl marker="#type-option_list">option_list()</seeerl>) -&gt; {<seeerl marker="#type-document">document()</seeerl>, Rest}</name>
<fsummary>Parse file containing an XML document.</fsummary>
<type>
<v>Rest = list()</v></type>
<desc><marker id="file-2"/>

<p>Parse file containing an XML document</p>
</desc></func>
<func>
<name since="">hook_state(S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>Equivalent to hook_state(HookState, S).
</fsummary>

<desc><marker id="hook_state-1"/>
<p>Equivalent to <seemfa marker="#hook_state/2">hook_state(HookState, S)</seemfa>.</p>
</desc></func>
<func>
<name since="">hook_state(X::HookState, S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>For controlling the HookState, to be used in a hook
   function, and called when the parser has parsed a complete entity.</fsummary>

<desc><marker id="hook_state-2"/>

<p>For controlling the HookState, to be used in a hook
   function, and called when the parser has parsed a complete entity.
   See <url href="xmerl_examples.html">tutorial</url> on customization functions.</p>
</desc></func>
<func>
<name since="">rules_state(S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>Equivalent to rules_state(RulesState, S).
</fsummary>

<desc><marker id="rules_state-1"/>
<p>Equivalent to <seemfa marker="#rules_state/2">rules_state(RulesState, S)</seemfa>.</p>
</desc></func>
<func>
<name since="">rules_state(X::RulesState, S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>For controlling the RulesState, to be used in a rules
   function, and called when the parser store scanner information in a rules
   database.</fsummary>

<desc><marker id="rules_state-2"/>

<p>For controlling the RulesState, to be used in a rules
   function, and called when the parser store scanner information in a rules
   database.
   See <url href="xmerl_examples.html">tutorial</url> on customization functions.</p>
</desc></func>
<func>
<name since="">string(Text::list()) -&gt; {<seeerl marker="#type-xmlElement">xmlElement()</seeerl>, Rest}</name>
<fsummary>Equivalent to string(Text, []).
</fsummary>
<type>
<v>Rest = list()</v></type>
<desc><marker id="string-1"/>
<p>Equivalent to <seemfa marker="#string/2">string(Text, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">string(Text::list(), Options::<seeerl marker="#type-option_list">option_list()</seeerl>) -&gt; {<seeerl marker="#type-document">document()</seeerl>, Rest}</name>
<fsummary>Parse string containing an XML document.</fsummary>
<type>
<v>Rest = list()</v></type>
<desc><marker id="string-2"/>

<p>Parse string containing an XML document</p>
</desc></func>
<func>
<name since="">user_state(S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>Equivalent to user_state(UserState, S).
</fsummary>

<desc><marker id="user_state-1"/>
<p>Equivalent to <seemfa marker="#user_state/2">user_state(UserState, S)</seemfa>.</p>
</desc></func>
<func>
<name since="">user_state(X::UserState, S::<seeerl marker="#type-global_state">global_state()</seeerl>) -&gt; <seeerl marker="#type-global_state">global_state()</seeerl></name>
<fsummary>For controlling the UserState, to be used in a user function.</fsummary>

<desc><marker id="user_state-2"/>

<p>For controlling the UserState, to be used in a user function.
   See <url href="xmerl_examples.html">tutorial</url> on customization functions.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>