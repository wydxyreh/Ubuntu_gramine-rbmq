<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>xmerl_xsd</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>xmerl_xsd.xml</file></header>
<module>xmerl_xsd</module>
<modulesummary>Interface module for XML Schema validation.</modulesummary>
<description>
<p>Interface module for XML Schema validation.
  It handles the W3.org
  <url href="http://www.w3.org/XML/Schema#dev">specifications</url>
  of XML Schema second edition 28 october 2004. For an introduction to
  XML Schema study <url href="http://www.w3.org/TR/xmlschema-0/">part 0.</url>
  An XML structure is validated by xmerl_xsd:validate/[2,3].</p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-filename"/>filename() = string()</tag>
<item><p/> </item>
<tag><marker id="type-global_state"/>global_state()</tag>
<item><p/>
<p>The global state of the validator. It is
  represented by the <c>#xsd_state{}</c> record.
  </p>
</item>
<tag><marker id="type-option_list"/>option_list()</tag>
<item><p/>
<p>Options allow to customize the behaviour of the
  validation.
  </p>
  <p>
  Possible options are :
  </p>
  <taglist>
    <tag><c>{tab2file,boolean()}</c></tag>
       <item><p>Enables saving of abstract structure on file for debugging
          purpose.</p></item>
    <tag><c>{xsdbase,filename()}</c></tag>
       <item><p>XSD Base directory.</p></item>
    <tag><c>{fetch_fun,FetchFun}</c></tag>
       <item><p>Call back function to fetch an external resource.</p></item>
    <tag><c>{fetch_path,PathList}</c></tag>
       <item><p>PathList is a list of directories to search when fetching files.
           If the file in question is not in the fetch_path, the URI will
           be used as a file name.</p></item>
    <tag><c>{state,State}</c></tag>
       <item><p>It is possible by this option to provide a state with process
           information from an earlier validation.</p></item>
  </taglist>
</item>
</taglist></section>
<funcs>
<func>
<name since="">file2state(FileName) -&gt; {ok, State} | {error, Reason}</name>
<fsummary>Reads the schema state with all information of the processed
  schema from a file created with state2file/[1,2].</fsummary>
<type>
<v>State = <seeerl marker="#type-global_state">global_state()</seeerl></v><v>FileName = string()</v></type>
<desc><marker id="file2state-1"/>

<p>Reads the schema state with all information of the processed
  schema from a file created with <c>state2file/[1,2]</c>.  The
  format of this file is internal. The state can then be used
  validating an XML document.</p>
</desc></func>
<func>
<name since="">format_error(L::Errors) -&gt; Result</name>
<fsummary>Formats error descriptions to human readable strings.</fsummary>
<type>
<v>Errors = tuple() | [tuple()]</v><v>Result = string() | [string()]</v></type>
<desc><marker id="format_error-1"/>

<p>Formats error descriptions to human readable strings.</p>
</desc></func>
<func>
<name since="">process_schema(Schema) -&gt; Result</name>
<fsummary>Equivalent to process_schema(Schema, []).
</fsummary>

<desc><marker id="process_schema-1"/>
<p>Equivalent to <seemfa marker="#process_schema/2">process_schema(Schema, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">process_schema(Schema, Options) -&gt; Result</name>
<fsummary>Reads the referenced XML schema and checks that it is valid.</fsummary>
<type>
<v>Schema = string()</v><v>Result = {ok, State} | {error, Reason}</v><v>State = <seeerl marker="#type-global_state">global_state()</seeerl></v><v>Reason = [ErrorReason] | ErrorReason</v><v>Options = <seeerl marker="#type-option_list">option_list()</seeerl></v></type>
<desc><marker id="process_schema-2"/>

<p>Reads the referenced XML schema and checks that it is valid.
  Returns the <c>global_state()</c> with schema info or an
  error reason. The error reason may be a list of several errors
  or a single error encountered during the processing.</p>
</desc></func>
<func>
<name since="">process_schemas(Schemas) -&gt; Result</name>
<fsummary>Equivalent to process_schema(Schemas, []).
</fsummary>

<desc><marker id="process_schemas-1"/>
<p>Equivalent to <seemfa marker="#process_schema/2">process_schema(Schemas, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">process_schemas(Schemas, Options) -&gt; Result</name>
<fsummary>Reads the referenced XML schemas and controls they are valid.</fsummary>
<type>
<v>Schemas = [{NameSpace, string()} | Schemas] | []</v><v>Result = {ok, State} | {error, Reason}</v><v>Reason = [ErrorReason] | ErrorReason</v><v>Options = <seeerl marker="#type-option_list">option_list()</seeerl></v></type>
<desc><marker id="process_schemas-2"/>

<p>Reads the referenced XML schemas and controls they are valid.
  Returns the <c>global_state()</c> with schema info or an
  error reason. The error reason may be a list of several errors
  or a single error encountered during the processing.</p>
</desc></func>
<func>
<name since="">process_validate(Schema, Xml::Element) -&gt; Result</name>
<fsummary>Equivalent to process_validate(Schema, Xml, []).
</fsummary>

<desc><marker id="process_validate-2"/>
<p>Equivalent to <seemfa marker="#process_validate/3">process_validate(Schema, Xml, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">process_validate(Schema, Xml::Element, Opts::Options) -&gt; Result</name>
<fsummary>Validates a parsed well-formed XML element towards an XML
  schema.</fsummary>
<type>
<v>Schema = string()</v><v>Element = XmlElement</v><v>Options = <seeerl marker="#type-option_list">option_list()</seeerl></v><v>Result = {ValidXmlElement, State} | {error, Reason}</v><v>Reason = [ErrorReason] | ErrorReason</v></type>
<desc><marker id="process_validate-3"/>

<p>Validates a parsed well-formed XML element towards an XML
  schema.  </p><p> Validates in two steps. First it processes the schema,
  saves the type and structure info in an ets table and then
  validates the element towards the schema.</p>
  <p> Usage example:</p>
  <p>
  <c>1&gt;{E,_} = xmerl_scan:file("my_XML_document.xml").</c><br/>
  <c>2&gt;{E2,_} = xmerl_xsd:validate("my_XML_Schema.xsd",E).</c>
  </p>
  <p> Observe that E2 may differ from E if for instance there are default
  values defined in <c>my_XML_Schema.xsd</c>.</p>
</desc></func>
<func>
<name since="">state2file(S::State) -&gt; ok | {error, Reason}</name>
<fsummary>Same as state2file(State,SchemaName).</fsummary>

<desc><marker id="state2file-1"/>

<p>Same as state2file(State,SchemaName)</p>
 
  <p>The name of the saved file is the same as the name of the
  schema, but with <c>.xss</c> extension.</p>
</desc></func>
<func>
<name since="">state2file(S::State, FileName) -&gt; ok | {error, Reason}</name>
<fsummary>Saves the schema state with all information of the processed
  schema in a file.</fsummary>
<type>
<v>State = <seeerl marker="#type-global_state">global_state()</seeerl></v><v>FileName = string()</v></type>
<desc><marker id="state2file-2"/>

<p>Saves the schema state with all information of the processed
  schema in a file. You can provide the file name for the saved
  state. FileName is saved with the <c>.xss</c> extension
  added.</p>
</desc></func>
<func>
<name since="">validate(Xml::Element, State) -&gt; Result</name>
<fsummary>Equivalent to validate(Element, State, []).
</fsummary>

<desc><marker id="validate-2"/>
<p>Equivalent to <seemfa marker="#validate/3">validate(Element, State, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">validate(Xml::Element, State, Opts::Options) -&gt; Result</name>
<fsummary>Validates a parsed well-formed XML element (Element).</fsummary>
<type>
<v>Element = XmlElement</v><v>Options = <seeerl marker="#type-option_list">option_list()</seeerl></v><v>Result = {ValidElement, <seeerl marker="#type-global_state">global_state()</seeerl>} | {error, Reasons}</v><v>ValidElement = XmlElement</v><v>State = <seeerl marker="#type-global_state">global_state()</seeerl></v><v>Reasons = [ErrorReason] | ErrorReason</v></type>
<desc><marker id="validate-3"/>

<p>Validates a parsed well-formed XML element (Element).
  </p><p>A call to validate/2 or validate/3 must provide a well formed
  parsed XML element <c>#xmlElement{}</c> and a State,
  <c>global_state()</c>, which holds necessary information from
  an already processed schema.
  Thus validate enables reuse of the schema information and
  therefore if one shall validate several times towards the same
  schema it reduces time consumption.</p>
  <p>The result, ValidElement, is the valid element that conforms to the
  post-schema-validation infoset. When the validator finds an error it
  tries to continue and reports a list of all errors found. In those cases
  an unexpected error is found it may cause a single error reason.
  </p>
  <p> Usage example:</p>
  <p>
  <c>1&gt;{E,_} = xmerl_scan:file("my_XML_document.xml").</c><br/>
  <c>2&gt;{ok,S} = xmerl_xsd:process_schema("my_XML_Schema.xsd").</c><br/>
  <c>3&gt;{E2,_} = xmerl_xsd:validate(E,S).</c>
  </p>
  <p> Observe that E2 may differ from E if for instance there are default
  values defined in <c>my_XML_Schema.xsd</c>.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>