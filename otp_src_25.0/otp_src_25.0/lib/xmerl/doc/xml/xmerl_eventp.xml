<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>xmerl_eventp</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>xmerl_eventp.xml</file></header>
<module>xmerl_eventp</module>
<modulesummary>Simple event-based front-ends to xmerl_scan for processing
  of XML documents in streams and for parsing in SAX style.</modulesummary>
<description>
<p>Simple event-based front-ends to xmerl_scan for processing
  of XML documents in streams and for parsing in SAX style.
  Each contain more elaborate settings of xmerl_scan that makes usage of
  the customization functions.
 </p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-option_list"/>option_list()</tag>
<item><p/>
<p>Options allow to customize the behaviour of the
      scanner.
  See also <url href="xmerl_examples.html">tutorial</url> on customization
  functions.
  </p>
  <p>
  Possible options are:
  </p>
  <taglist>
   <tag><c>{acc_fun, Fun}</c></tag>
     <item><p>Call back function to accumulate contents of entity.</p></item>
   <tag><c>{continuation_fun, Fun} |
             {continuation_fun, Fun, ContinuationState}</c></tag>
     <item><p>Call back function to decide what to do if the scanner runs into EOF
      before the document is complete.</p></item>
   <tag><c>{event_fun, Fun} |
             {event_fun, Fun, EventState}</c></tag>
     <item><p>Call back function to handle scanner events.</p></item>
   <tag><c>{fetch_fun, Fun} |
             {fetch_fun, Fun, FetchState}</c></tag>
     <item><p>Call back function to fetch an external resource.</p></item>
   <tag><c>{hook_fun, Fun} |
             {hook_fun, Fun, HookState}</c></tag>
     <item><p>Call back function to process the document entities once
      identified.</p></item>
   <tag><c>{close_fun, Fun}</c></tag>
     <item><p>Called when document has been completely parsed.</p></item>
   <tag><c>{rules, ReadFun, WriteFun, RulesState} |
             {rules, Rules}</c></tag>
     <item><p>Handles storing of scanner information when parsing.</p></item>
   <tag><c>{user_state, UserState}</c></tag>
     <item><p>Global state variable accessible from all customization functions</p></item>
 
   <tag><c>{fetch_path, PathList}</c></tag>
     <item><p>PathList is a list of
      directories to search when fetching files. If the file in question
      is not in the fetch_path, the URI will be used as a file
      name.</p></item>
   <tag><c>{space, Flag}</c></tag>
     <item><p>'preserve' (default) to preserve spaces, 'normalize' to
     accumulate consecutive whitespace and replace it with one space.</p></item>
   <tag><c>{line, Line}</c></tag>
     <item><p>To specify starting line for scanning in document which contains
     fragments of XML.</p></item>
   <tag><c>{namespace_conformant, Flag}</c></tag>
     <item><p>Controls whether to behave as a namespace conformant XML parser,
     'false' (default) to not otherwise 'true'.</p></item>
   <tag><c>{validation, Flag}</c></tag>
     <item><p>Controls whether to process as a validating XML parser:
     'off' (default) no validation, or validation 'dtd' by DTD or 'schema'
     by XML Schema. 'false' and 'true' options are obsolete
     (i.e. they may be removed in a future release), if used 'false'
     equals 'off' and 'true' equals 'dtd'.</p></item>
   <tag><c>{schemaLocation, [{Namespace,Link}|...]}</c></tag>
     <item><p>Tells explicitly which XML Schema documents to use to validate
     the XML document. Used together with the
     <c>{validation,schema}</c> option.</p></item>
   <tag><c>{quiet, Flag}</c></tag>
     <item><p>Set to 'true' if xmerl should behave quietly and not output any
     information to standard output (default 'false').</p></item>
   <tag><c>{doctype_DTD, DTD}</c></tag>
     <item><p>Allows to specify DTD name when it isn't available in the XML
     document. This option has effect only together with
     <c>{validation,'dtd'</c> option.</p></item>
   <tag><c>{xmlbase, Dir}</c></tag>
     <item><p>XML Base directory. If using string/1 default is current directory.
     If using file/1 default is directory of given file.</p></item>
   <tag><c>{encoding, Enc}</c></tag>
     <item><p>Set default character set used (default UTF-8).
     This character set is used only if not explicitly given by the XML
     declaration. </p></item>
   <tag><c>{document, Flag}</c></tag>
     <item><p>Set to 'true' if xmerl should return a complete XML document
     as an xmlDocument record (default 'false').</p></item>
   <tag><c>{comments, Flag}</c></tag>
     <item><p>Set to 'false' if xmerl should skip comments otherwise they will
     be returned as xmlComment records (default 'true').</p></item>
   <tag><c>{default_attrs, Flag}</c></tag>
     <item><p>Set to 'true' if xmerl should add to elements missing attributes
     with a defined default value (default 'false').</p></item>
  </taglist>
 
</item>
<tag><marker id="type-xmlElement"/>xmlElement() = #xmlElement{}</tag>
<item><p/> </item>
</taglist></section>
<funcs>
<func>
<name since="">file_sax(Fname::string(), CallBackModule::atom(), UserState, Options::<seeerl marker="#type-option_list">option_list()</seeerl>) -&gt; NewUserState</name>
<fsummary>Parse file containing an XML document, SAX style.</fsummary>

<desc><marker id="file_sax-4"/>

<p>Parse file containing an XML document, SAX style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>hook_fun</c> for using xmerl export functionality directly after
  an entity is parsed.</p>
</desc></func>
<func>
<name since="">stream(Fname::string(), Options::<seeerl marker="#type-option_list">option_list()</seeerl>) -&gt; <seeerl marker="#type-xmlElement">xmlElement()</seeerl></name>
<fsummary>Parse file containing an XML document as a stream, DOM style.</fsummary>

<desc><marker id="stream-2"/>

<p>Parse file containing an XML document as a stream, DOM style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>continuation_fun</c> for handling streams of XML data.
  Note that the <c>continuation_fun</c>, <c>acc_fun</c>,
  <c>fetch_fun</c>, <c>rules</c> and <c>close_fun</c>
  options cannot be user defined using this parser.</p>
</desc></func>
<func>
<name since="">stream_sax(Fname, CallBack::CallBackModule, UserState, Options) -&gt; <seeerl marker="#type-xmlElement">xmlElement()</seeerl></name>
<fsummary>Parse file containing an XML document as a stream, SAX style.</fsummary>
<type>
<v>Fname = string()</v><v>CallBackModule = atom()</v><v>Options = <seeerl marker="#type-option_list">option_list()</seeerl></v></type>
<desc><marker id="stream_sax-4"/>

<p>Parse file containing an XML document as a stream, SAX style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>continuation_fun</c> for handling streams of XML data.
  Note that the <c>continuation_fun</c>, <c>acc_fun</c>,
  <c>fetch_fun</c>, <c>rules</c>, <c>hook_fun</c>,
  <c>close_fun</c> and <c>user_state</c> options cannot be user
  defined using this parser.</p>
</desc></func>
<func>
<name since="">string_sax(String::list(), CallBackModule::atom(), UserState, Options::<seeerl marker="#type-option_list">option_list()</seeerl>) -&gt; <seeerl marker="#type-xmlElement">xmlElement()</seeerl></name>
<fsummary>Parse file containing an XML document, SAX style.</fsummary>

<desc><marker id="string_sax-4"/>

<p>Parse file containing an XML document, SAX style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>hook_fun</c> for using xmerl export functionality directly after
  an entity is parsed.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>