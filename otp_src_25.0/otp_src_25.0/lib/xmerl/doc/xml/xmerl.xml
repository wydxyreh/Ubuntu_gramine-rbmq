<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>xmerl</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>xmerl.xml</file></header>
<module>xmerl</module>
<modulesummary>Functions for exporting XML data to an external format.</modulesummary>
<description>
<p>Functions for exporting XML data to an external format.
 </p></description>
<funcs>
<func>
<name since="">callbacks(Module) -&gt; Result</name>
<fsummary>Find the list of inherited callback modules for a given module.</fsummary>
<type>
<v>Module = atom()</v><v>Result = [atom()]</v></type>
<desc><marker id="callbacks-1"/>

<p>Find the list of inherited callback modules for a given module.</p>
</desc></func>
<func>
<name since="">export(Content, Callback) -&gt; ExportedFormat</name>
<fsummary>Equivalent to export(Data, Callback, []).
</fsummary>

<desc><marker id="export-2"/>
<p>Equivalent to <seemfa marker="#export/3">export(Data, Callback, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">export(Content, Callback, RootAttributes) -&gt; ExportedFormat</name>
<fsummary>Exports normal, well-formed XML content, using the specified
  callback-module.</fsummary>
<type>
<v>Content = [Element]</v><v>Callback = atom()</v><v>RootAttributes = [XmlAttributes]</v></type>
<desc><marker id="export-3"/>

<p>Exports normal, well-formed XML content, using the specified
  callback-module.
  </p><p><c>Element</c> is any of:</p>
  <list>
  	<item><p><c>#xmlText{}</c></p></item>
 	<item><p><c>#xmlElement{}</c></p></item>
 	<item><p><c>#xmlPI{}</c></p></item>
 	<item><p><c>#xmlComment{}</c></p></item>
 	<item><p><c>#xmlDecl{}</c></p></item>
  </list>
  <p>(See <c>xmerl.hrl</c> for the record definitions.)
  Text in <c>#xmlText{}</c> elements can be deep lists of
  characters and/or binaries.</p>
 
  <p><c>RootAttributes</c> is a list of
  <c>#xmlAttribute{}</c> attributes for the <c>#root#</c>
  element, which implicitly becomes the parent of the given
  <c>Content</c>. The tag-handler function for
  <c>#root#</c> is thus called with the complete exported data of
  <c>Content</c>. Root attributes can be used to specify
  e.g. encoding or other metadata of an XML or HTML document.</p>
 
  <p>The <c>Callback</c> module should contain hook functions for
  all tags present in the data structure. A hook function must have the
  following format:</p>
  <pre>    Tag(Data, Attributes, Parents, E)</pre>
  <p>where <c>E</c> is the corresponding <c>#xmlElement{}</c>,
  <c>Data</c> is the already-exported contents of <c>E</c>
  and <c>Attributes</c> is the list of
  <c>#xmlAttribute{}</c> records of <c>E</c>. Finally,
  <c>Parents</c> is the list of parent nodes of <c>E</c>,
  on the form <c>[{ParentTag::atom(),
  ParentPosition::integer()}]</c>.</p>
 
  <p>The hook function should return either the data to be exported, or
  a tuple <c>{'#xml-alias#', NewTag::atom()}</c>, or a tuple
  <c>{'#xml-redefine#', Content}</c>, where <c>Content</c>
  is a content list (which can be on simple-form; see
  <c>export_simple/2</c> for details).</p>
 
  <p>A callback module can inherit definitions from other callback
  modules, through the required function <c>'#xml-interitance#() -&gt;
  [ModuleName::atom()]</c>.</p>
 
<p><em>See also:</em> <seemfa marker="#export/2">export/2</seemfa>, <seemfa marker="#export_simple/3">export_simple/3</seemfa>.</p>
</desc></func>
<func>
<name since="">export_content(Es::Content, Callbacks) -&gt; term()</name>
<fsummary>Exports normal XML content directly, without further context.</fsummary>
<type>
<v>Content = [Element]</v><v>Callback = [atom()]</v></type>
<desc><marker id="export_content-2"/>

<p>Exports normal XML content directly, without further context.</p>
</desc></func>
<func>
<name since="">export_element(E, CB) -&gt; term()
</name>
<fsummary>Exports a normal XML element directly, without further context.</fsummary>

<desc><marker id="export_element-2"/>

<p>Exports a normal XML element directly, without further context.</p>
</desc></func>
<func>
<name since="">export_element(E, CallbackModule, CallbackState) -&gt; ExportedFormat</name>
<fsummary>For on-the-fly exporting during parsing (SAX style) of the XML
  document.</fsummary>

<desc><marker id="export_element-3"/>

<p>For on-the-fly exporting during parsing (SAX style) of the XML
  document.</p>
</desc></func>
<func>
<name since="">export_simple(Content, Callback) -&gt; ExportedFormat</name>
<fsummary>Equivalent to export_simple(Content, Callback, []).
</fsummary>

<desc><marker id="export_simple-2"/>
<p>Equivalent to <seemfa marker="#export_simple/3">export_simple(Content, Callback, [])</seemfa>.</p>
</desc></func>
<func>
<name since="">export_simple(Content, Callback, RootAttrs::RootAttributes) -&gt; ExportedFormat</name>
<fsummary>Exports "simple-form" XML content, using the specified
  callback-module.</fsummary>
<type>
<v>Content = [Element]</v><v>Callback = atom()</v><v>RootAttributes = [XmlAttributes]</v></type>
<desc><marker id="export_simple-3"/>

<p>Exports "simple-form" XML content, using the specified
  callback-module.
  </p><p><c>Element</c> is any of:</p>
  <list>
 	<item><p><c>{Tag, Attributes, Content}</c></p></item>
 	<item><p><c>{Tag, Content}</c></p></item>
 	<item><p><c>Tag</c></p></item>
 	<item><p><c>IOString</c></p></item>
  	<item><p><c>#xmlText{}</c></p></item>
 	<item><p><c>#xmlElement{}</c></p></item>
 	<item><p><c>#xmlPI{}</c></p></item>
 	<item><p><c>#xmlComment{}</c></p></item>
 	<item><p><c>#xmlDecl{}</c></p></item>
  </list>
  <p>where</p>
  <list>
 	<item><p><c>Tag = atom()</c></p></item>
 	<item><p><c>Attributes = [{Name, Value}]</c></p></item>
 	<item><p><c>Name = atom()</c></p></item>
 	<item><p><c>Value = IOString | atom() | integer()</c></p></item>
  </list>
  <p>Normal-form XML elements can thus be included in the simple-form
  representation. Note that content lists must be flat. An
  <c>IOString</c> is a (possibly deep) list of characters and/or
  binaries.</p>
 
  <p><c>RootAttributes</c> is a list of:</p>
  <list>
 	<item><p><c>XmlAttributes = #xmlAttribute{}</c></p></item>
 </list>
 
  <p>See <c>export/3</c> for details on the callback module and
  the root attributes. The XML-data is always converted to normal form
  before being passed to the callback module.</p>
 
<p><em>See also:</em> <seemfa marker="#export/3">export/3</seemfa>, <seemfa marker="#export_simple/2">export_simple/2</seemfa>.</p>
</desc></func>
<func>
<name since="">export_simple_content(Content, Callback) -&gt; term()
</name>
<fsummary>Exports simple XML content directly, without further context.</fsummary>

<desc><marker id="export_simple_content-2"/>

<p>Exports simple XML content directly, without further context.</p>
</desc></func>
<func>
<name since="">export_simple_element(Content, Callback) -&gt; term()
</name>
<fsummary>Exports a simple XML element directly, without further context.</fsummary>

<desc><marker id="export_simple_element-2"/>

<p>Exports a simple XML element directly, without further context.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>